// @generated by protobuf-ts 2.8.2 with parameter generate_dependencies
// @generated from protobuf file "communication/file_service.proto" (package "communication", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message communication.ProfileUrlRequest
 */
export interface ProfileUrlRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string file_name = 2;
     */
    fileName: string;
}
/**
 * @generated from protobuf message communication.ProfileUrlResponse
 */
export interface ProfileUrlResponse {
    /**
     * @generated from protobuf field: string presigned_url = 1;
     */
    presignedUrl: string;
    /**
     * @generated from protobuf field: string file_path = 2;
     */
    filePath: string;
}
/**
 * @generated from protobuf message communication.ProfileUploadStatus
 */
export interface ProfileUploadStatus {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: bool upload_succeeded = 2;
     */
    uploadSucceeded: boolean;
}
/**
 * @generated from protobuf message communication.ProfileGetRequest
 */
export interface ProfileGetRequest {
    /**
     * @generated from protobuf field: repeated string user_ids = 1;
     */
    userIds: string[];
}
/**
 * @generated from protobuf message communication.ProfileGetResponse
 */
export interface ProfileGetResponse {
    /**
     * @generated from protobuf field: map<string, string> cache_urls = 1;
     */
    cacheUrls: {
        [key: string]: string;
    };
}
/**
 * @generated from protobuf message communication.ProfileImageEntity
 */
export interface ProfileImageEntity {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string file_type = 2;
     */
    fileType: string;
    /**
     * @generated from protobuf field: bool in_cache = 3;
     */
    inCache: boolean;
    /**
     * @generated from protobuf field: string local_path = 4;
     */
    localPath: string;
    /**
     * @generated from protobuf field: string cache_url = 6;
     */
    cacheUrl: string;
    /**
     * @generated from protobuf field: string bucket_path = 5;
     */
    bucketPath: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class ProfileUrlRequest$Type extends MessageType<ProfileUrlRequest> {
    constructor() {
        super("communication.ProfileUrlRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "file_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ProfileUrlRequest>): ProfileUrlRequest {
        const message = { userId: "", fileName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProfileUrlRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProfileUrlRequest): ProfileUrlRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string file_name */ 2:
                    message.fileName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProfileUrlRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string file_name = 2; */
        if (message.fileName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fileName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ProfileUrlRequest
 */
export const ProfileUrlRequest = new ProfileUrlRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProfileUrlResponse$Type extends MessageType<ProfileUrlResponse> {
    constructor() {
        super("communication.ProfileUrlResponse", [
            { no: 1, name: "presigned_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "file_path", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ProfileUrlResponse>): ProfileUrlResponse {
        const message = { presignedUrl: "", filePath: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProfileUrlResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProfileUrlResponse): ProfileUrlResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string presigned_url */ 1:
                    message.presignedUrl = reader.string();
                    break;
                case /* string file_path */ 2:
                    message.filePath = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProfileUrlResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string presigned_url = 1; */
        if (message.presignedUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.presignedUrl);
        /* string file_path = 2; */
        if (message.filePath !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.filePath);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ProfileUrlResponse
 */
export const ProfileUrlResponse = new ProfileUrlResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProfileUploadStatus$Type extends MessageType<ProfileUploadStatus> {
    constructor() {
        super("communication.ProfileUploadStatus", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "upload_succeeded", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ProfileUploadStatus>): ProfileUploadStatus {
        const message = { userId: "", uploadSucceeded: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProfileUploadStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProfileUploadStatus): ProfileUploadStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* bool upload_succeeded */ 2:
                    message.uploadSucceeded = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProfileUploadStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* bool upload_succeeded = 2; */
        if (message.uploadSucceeded !== false)
            writer.tag(2, WireType.Varint).bool(message.uploadSucceeded);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ProfileUploadStatus
 */
export const ProfileUploadStatus = new ProfileUploadStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProfileGetRequest$Type extends MessageType<ProfileGetRequest> {
    constructor() {
        super("communication.ProfileGetRequest", [
            { no: 1, name: "user_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ProfileGetRequest>): ProfileGetRequest {
        const message = { userIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProfileGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProfileGetRequest): ProfileGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string user_ids */ 1:
                    message.userIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProfileGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string user_ids = 1; */
        for (let i = 0; i < message.userIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.userIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ProfileGetRequest
 */
export const ProfileGetRequest = new ProfileGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProfileGetResponse$Type extends MessageType<ProfileGetResponse> {
    constructor() {
        super("communication.ProfileGetResponse", [
            { no: 1, name: "cache_urls", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<ProfileGetResponse>): ProfileGetResponse {
        const message = { cacheUrls: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProfileGetResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProfileGetResponse): ProfileGetResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, string> cache_urls */ 1:
                    this.binaryReadMap1(message.cacheUrls, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: ProfileGetResponse["cacheUrls"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ProfileGetResponse["cacheUrls"] | undefined, val: ProfileGetResponse["cacheUrls"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field communication.ProfileGetResponse.cache_urls");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: ProfileGetResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, string> cache_urls = 1; */
        for (let k of Object.keys(message.cacheUrls))
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.cacheUrls[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ProfileGetResponse
 */
export const ProfileGetResponse = new ProfileGetResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProfileImageEntity$Type extends MessageType<ProfileImageEntity> {
    constructor() {
        super("communication.ProfileImageEntity", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "file_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "in_cache", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "local_path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "cache_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "bucket_path", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ProfileImageEntity>): ProfileImageEntity {
        const message = { userId: "", fileType: "", inCache: false, localPath: "", cacheUrl: "", bucketPath: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProfileImageEntity>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProfileImageEntity): ProfileImageEntity {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string file_type */ 2:
                    message.fileType = reader.string();
                    break;
                case /* bool in_cache */ 3:
                    message.inCache = reader.bool();
                    break;
                case /* string local_path */ 4:
                    message.localPath = reader.string();
                    break;
                case /* string cache_url */ 6:
                    message.cacheUrl = reader.string();
                    break;
                case /* string bucket_path */ 5:
                    message.bucketPath = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProfileImageEntity, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string file_type = 2; */
        if (message.fileType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fileType);
        /* bool in_cache = 3; */
        if (message.inCache !== false)
            writer.tag(3, WireType.Varint).bool(message.inCache);
        /* string local_path = 4; */
        if (message.localPath !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.localPath);
        /* string cache_url = 6; */
        if (message.cacheUrl !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.cacheUrl);
        /* string bucket_path = 5; */
        if (message.bucketPath !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.bucketPath);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ProfileImageEntity
 */
export const ProfileImageEntity = new ProfileImageEntity$Type();
/**
 * @generated ServiceType for protobuf service communication.FileService
 */
export const FileService = new ServiceType("communication.FileService", [
    { name: "PresignProfilePhoto", options: {}, I: ProfileUrlRequest, O: ProfileUrlResponse },
    { name: "ConfirmProfileUploaded", options: {}, I: ProfileUploadStatus, O: ProfileImageEntity },
    { name: "GetProfilePhotos", options: {}, I: ProfileGetRequest, O: ProfileGetResponse }
]);
