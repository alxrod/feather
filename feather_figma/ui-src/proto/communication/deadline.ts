// @generated by protobuf-ts 2.8.2 with parameter generate_dependencies
// @generated from protobuf file "communication/deadline.proto" (package "communication", syntax proto3)
// tslint:disable
import { NullResponse } from "./generic";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ItemNub } from "./item";
import { Timestamp } from "../google/protobuf/timestamp";
/**
 * @generated from protobuf message communication.DeadlineEntity
 */
export interface DeadlineEntity {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string name = 18;
     */
    name: string;
    /**
     * @generated from protobuf field: bool complete = 25;
     */
    complete: boolean;
    /**
     * @generated from protobuf field: bool expired = 31;
     */
    expired: boolean;
    /**
     * @generated from protobuf field: bool buyer_settled = 27;
     */
    buyerSettled: boolean;
    /**
     * @generated from protobuf field: bool awaiting_creation = 20;
     */
    awaitingCreation: boolean;
    /**
     * @generated from protobuf field: bool awaiting_deletion = 21;
     */
    awaitingDeletion: boolean;
    /**
     * @generated from protobuf field: string deadline_proposer_id = 22;
     */
    deadlineProposerId: string;
    /**
     * @generated from protobuf field: int64 current_payout = 4;
     */
    currentPayout: bigint;
    /**
     * @generated from protobuf field: int64 worker_payout = 7;
     */
    workerPayout: bigint;
    /**
     * @generated from protobuf field: int64 buyer_payout = 10;
     */
    buyerPayout: bigint;
    /**
     * @generated from protobuf field: bool payout_awaiting_approval = 12;
     */
    payoutAwaitingApproval: boolean;
    /**
     * @generated from protobuf field: string payout_proposer_id = 13;
     */
    payoutProposerId: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp current_date = 5;
     */
    currentDate?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp worker_date = 8;
     */
    workerDate?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp buyer_date = 11;
     */
    buyerDate?: Timestamp;
    /**
     * @generated from protobuf field: bool date_awaiting_approval = 16;
     */
    dateAwaitingApproval: boolean;
    /**
     * @generated from protobuf field: string date_proposer_id = 17;
     */
    dateProposerId: string;
    /**
     * @generated from protobuf field: bool draft_required = 19;
     */
    draftRequired: boolean;
    /**
     * @generated from protobuf field: string items_proposer_id = 23;
     */
    itemsProposerId: string;
    /**
     * @generated from protobuf field: repeated uint32 item_states = 24;
     */
    itemStates: number[];
    /**
     * @generated from protobuf field: repeated communication.ItemNub items = 14;
     */
    items: ItemNub[];
    /**
     * @generated from protobuf field: bool items_awaiting_approval = 15;
     */
    itemsAwaitingApproval: boolean;
}
/**
 * @generated from protobuf message communication.DeadlineNub
 */
export interface DeadlineNub {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: bool complete = 25;
     */
    complete: boolean;
    /**
     * @generated from protobuf field: bool expired = 31;
     */
    expired: boolean;
    /**
     * @generated from protobuf field: int64 current_payout = 4;
     */
    currentPayout: bigint;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp current_date = 5;
     */
    currentDate?: Timestamp;
}
/**
 * @generated from protobuf message communication.SuggestDateReq
 */
export interface SuggestDateReq {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: string deadline_id = 4;
     */
    deadlineId: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp new_date = 3;
     */
    newDate?: Timestamp;
    /**
     * @generated from protobuf field: bool doc_mode = 5;
     */
    docMode: boolean;
}
/**
 * @generated from protobuf message communication.SuggestPayoutReq
 */
export interface SuggestPayoutReq {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: string deadline_id = 4;
     */
    deadlineId: string;
    /**
     * @generated from protobuf field: int64 new_payout = 3;
     */
    newPayout: bigint;
    /**
     * @generated from protobuf field: bool doc_mode = 5;
     */
    docMode: boolean;
}
/**
 * @generated from protobuf message communication.SuggestDeadlineItemsReq
 */
export interface SuggestDeadlineItemsReq {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: string deadline_id = 4;
     */
    deadlineId: string;
    /**
     * @generated from protobuf field: repeated string item_ids = 3;
     */
    itemIds: string[];
    /**
     * @generated from protobuf field: bool doc_mode = 5;
     */
    docMode: boolean;
}
/**
 * @generated from protobuf message communication.ReactDeadlineItemsReq
 */
export interface ReactDeadlineItemsReq {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: string message_id = 4;
     */
    messageId: string;
    /**
     * @generated from protobuf field: string deadline_id = 5;
     */
    deadlineId: string;
    /**
     * @generated from protobuf field: uint32 status = 3;
     */
    status: number;
    /**
     * @generated from protobuf field: bool doc_mode = 6;
     */
    docMode: boolean;
}
/**
 * @generated from protobuf message communication.ReactDateReq
 */
export interface ReactDateReq {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: string message_id = 4;
     */
    messageId: string;
    /**
     * @generated from protobuf field: string deadline_id = 5;
     */
    deadlineId: string;
    /**
     * @generated from protobuf field: uint32 status = 3;
     */
    status: number;
    /**
     * @generated from protobuf field: bool doc_mode = 6;
     */
    docMode: boolean;
}
/**
 * @generated from protobuf message communication.ReactPayoutReq
 */
export interface ReactPayoutReq {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: string message_id = 4;
     */
    messageId: string;
    /**
     * @generated from protobuf field: string deadline_id = 5;
     */
    deadlineId: string;
    /**
     * @generated from protobuf field: uint32 status = 3;
     */
    status: number;
    /**
     * @generated from protobuf field: bool doc_mode = 6;
     */
    docMode: boolean;
}
/**
 * @generated from protobuf message communication.SuggestAddDeadlineReq
 */
export interface SuggestAddDeadlineReq {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: communication.DeadlineEntity deadline = 3;
     */
    deadline?: DeadlineEntity;
    /**
     * @generated from protobuf field: bool doc_mode = 4;
     */
    docMode: boolean;
}
/**
 * @generated from protobuf message communication.ReactAddDeadlineReq
 */
export interface ReactAddDeadlineReq {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: string message_id = 4;
     */
    messageId: string;
    /**
     * @generated from protobuf field: string deadline_id = 3;
     */
    deadlineId: string;
    /**
     * @generated from protobuf field: uint32 status = 5;
     */
    status: number;
    /**
     * @generated from protobuf field: bool doc_mode = 6;
     */
    docMode: boolean;
}
/**
 * @generated from protobuf message communication.SuggestDelDeadlineReq
 */
export interface SuggestDelDeadlineReq {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: communication.DeadlineEntity deadline = 3;
     */
    deadline?: DeadlineEntity;
    /**
     * @generated from protobuf field: bool doc_mode = 4;
     */
    docMode: boolean;
}
/**
 * @generated from protobuf message communication.ReactDelDeadlineReq
 */
export interface ReactDelDeadlineReq {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: string message_id = 4;
     */
    messageId: string;
    /**
     * @generated from protobuf field: string deadline_id = 3;
     */
    deadlineId: string;
    /**
     * @generated from protobuf field: uint32 status = 5;
     */
    status: number;
    /**
     * @generated from protobuf field: bool doc_mode = 6;
     */
    docMode: boolean;
}
/**
 * @generated from protobuf message communication.FinishDeadlineRequest
 */
export interface FinishDeadlineRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string deadline_id = 3;
     */
    deadlineId: string;
    /**
     * @generated from protobuf field: bool doc_mode = 4;
     */
    docMode: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class DeadlineEntity$Type extends MessageType<DeadlineEntity> {
    constructor() {
        super("communication.DeadlineEntity", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 25, name: "complete", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 31, name: "expired", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 27, name: "buyer_settled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 20, name: "awaiting_creation", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 21, name: "awaiting_deletion", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 22, name: "deadline_proposer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "current_payout", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "worker_payout", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "buyer_payout", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "payout_awaiting_approval", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "payout_proposer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "current_date", kind: "message", T: () => Timestamp },
            { no: 8, name: "worker_date", kind: "message", T: () => Timestamp },
            { no: 11, name: "buyer_date", kind: "message", T: () => Timestamp },
            { no: 16, name: "date_awaiting_approval", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 17, name: "date_proposer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "draft_required", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 23, name: "items_proposer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 24, name: "item_states", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemNub },
            { no: 15, name: "items_awaiting_approval", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<DeadlineEntity>): DeadlineEntity {
        const message = { id: "", contractId: "", name: "", complete: false, expired: false, buyerSettled: false, awaitingCreation: false, awaitingDeletion: false, deadlineProposerId: "", currentPayout: 0n, workerPayout: 0n, buyerPayout: 0n, payoutAwaitingApproval: false, payoutProposerId: "", dateAwaitingApproval: false, dateProposerId: "", draftRequired: false, itemsProposerId: "", itemStates: [], items: [], itemsAwaitingApproval: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeadlineEntity>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeadlineEntity): DeadlineEntity {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* string name */ 18:
                    message.name = reader.string();
                    break;
                case /* bool complete */ 25:
                    message.complete = reader.bool();
                    break;
                case /* bool expired */ 31:
                    message.expired = reader.bool();
                    break;
                case /* bool buyer_settled */ 27:
                    message.buyerSettled = reader.bool();
                    break;
                case /* bool awaiting_creation */ 20:
                    message.awaitingCreation = reader.bool();
                    break;
                case /* bool awaiting_deletion */ 21:
                    message.awaitingDeletion = reader.bool();
                    break;
                case /* string deadline_proposer_id */ 22:
                    message.deadlineProposerId = reader.string();
                    break;
                case /* int64 current_payout */ 4:
                    message.currentPayout = reader.int64().toBigInt();
                    break;
                case /* int64 worker_payout */ 7:
                    message.workerPayout = reader.int64().toBigInt();
                    break;
                case /* int64 buyer_payout */ 10:
                    message.buyerPayout = reader.int64().toBigInt();
                    break;
                case /* bool payout_awaiting_approval */ 12:
                    message.payoutAwaitingApproval = reader.bool();
                    break;
                case /* string payout_proposer_id */ 13:
                    message.payoutProposerId = reader.string();
                    break;
                case /* google.protobuf.Timestamp current_date */ 5:
                    message.currentDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.currentDate);
                    break;
                case /* google.protobuf.Timestamp worker_date */ 8:
                    message.workerDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.workerDate);
                    break;
                case /* google.protobuf.Timestamp buyer_date */ 11:
                    message.buyerDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.buyerDate);
                    break;
                case /* bool date_awaiting_approval */ 16:
                    message.dateAwaitingApproval = reader.bool();
                    break;
                case /* string date_proposer_id */ 17:
                    message.dateProposerId = reader.string();
                    break;
                case /* bool draft_required */ 19:
                    message.draftRequired = reader.bool();
                    break;
                case /* string items_proposer_id */ 23:
                    message.itemsProposerId = reader.string();
                    break;
                case /* repeated uint32 item_states */ 24:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.itemStates.push(reader.uint32());
                    else
                        message.itemStates.push(reader.uint32());
                    break;
                case /* repeated communication.ItemNub items */ 14:
                    message.items.push(ItemNub.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool items_awaiting_approval */ 15:
                    message.itemsAwaitingApproval = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeadlineEntity, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* string name = 18; */
        if (message.name !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.name);
        /* bool complete = 25; */
        if (message.complete !== false)
            writer.tag(25, WireType.Varint).bool(message.complete);
        /* bool expired = 31; */
        if (message.expired !== false)
            writer.tag(31, WireType.Varint).bool(message.expired);
        /* bool buyer_settled = 27; */
        if (message.buyerSettled !== false)
            writer.tag(27, WireType.Varint).bool(message.buyerSettled);
        /* bool awaiting_creation = 20; */
        if (message.awaitingCreation !== false)
            writer.tag(20, WireType.Varint).bool(message.awaitingCreation);
        /* bool awaiting_deletion = 21; */
        if (message.awaitingDeletion !== false)
            writer.tag(21, WireType.Varint).bool(message.awaitingDeletion);
        /* string deadline_proposer_id = 22; */
        if (message.deadlineProposerId !== "")
            writer.tag(22, WireType.LengthDelimited).string(message.deadlineProposerId);
        /* int64 current_payout = 4; */
        if (message.currentPayout !== 0n)
            writer.tag(4, WireType.Varint).int64(message.currentPayout);
        /* int64 worker_payout = 7; */
        if (message.workerPayout !== 0n)
            writer.tag(7, WireType.Varint).int64(message.workerPayout);
        /* int64 buyer_payout = 10; */
        if (message.buyerPayout !== 0n)
            writer.tag(10, WireType.Varint).int64(message.buyerPayout);
        /* bool payout_awaiting_approval = 12; */
        if (message.payoutAwaitingApproval !== false)
            writer.tag(12, WireType.Varint).bool(message.payoutAwaitingApproval);
        /* string payout_proposer_id = 13; */
        if (message.payoutProposerId !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.payoutProposerId);
        /* google.protobuf.Timestamp current_date = 5; */
        if (message.currentDate)
            Timestamp.internalBinaryWrite(message.currentDate, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp worker_date = 8; */
        if (message.workerDate)
            Timestamp.internalBinaryWrite(message.workerDate, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp buyer_date = 11; */
        if (message.buyerDate)
            Timestamp.internalBinaryWrite(message.buyerDate, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* bool date_awaiting_approval = 16; */
        if (message.dateAwaitingApproval !== false)
            writer.tag(16, WireType.Varint).bool(message.dateAwaitingApproval);
        /* string date_proposer_id = 17; */
        if (message.dateProposerId !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.dateProposerId);
        /* bool draft_required = 19; */
        if (message.draftRequired !== false)
            writer.tag(19, WireType.Varint).bool(message.draftRequired);
        /* string items_proposer_id = 23; */
        if (message.itemsProposerId !== "")
            writer.tag(23, WireType.LengthDelimited).string(message.itemsProposerId);
        /* repeated uint32 item_states = 24; */
        if (message.itemStates.length) {
            writer.tag(24, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.itemStates.length; i++)
                writer.uint32(message.itemStates[i]);
            writer.join();
        }
        /* repeated communication.ItemNub items = 14; */
        for (let i = 0; i < message.items.length; i++)
            ItemNub.internalBinaryWrite(message.items[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* bool items_awaiting_approval = 15; */
        if (message.itemsAwaitingApproval !== false)
            writer.tag(15, WireType.Varint).bool(message.itemsAwaitingApproval);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.DeadlineEntity
 */
export const DeadlineEntity = new DeadlineEntity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeadlineNub$Type extends MessageType<DeadlineNub> {
    constructor() {
        super("communication.DeadlineNub", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 25, name: "complete", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 31, name: "expired", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "current_payout", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "current_date", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<DeadlineNub>): DeadlineNub {
        const message = { id: "", contractId: "", complete: false, expired: false, currentPayout: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeadlineNub>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeadlineNub): DeadlineNub {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* bool complete */ 25:
                    message.complete = reader.bool();
                    break;
                case /* bool expired */ 31:
                    message.expired = reader.bool();
                    break;
                case /* int64 current_payout */ 4:
                    message.currentPayout = reader.int64().toBigInt();
                    break;
                case /* google.protobuf.Timestamp current_date */ 5:
                    message.currentDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.currentDate);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeadlineNub, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* bool complete = 25; */
        if (message.complete !== false)
            writer.tag(25, WireType.Varint).bool(message.complete);
        /* bool expired = 31; */
        if (message.expired !== false)
            writer.tag(31, WireType.Varint).bool(message.expired);
        /* int64 current_payout = 4; */
        if (message.currentPayout !== 0n)
            writer.tag(4, WireType.Varint).int64(message.currentPayout);
        /* google.protobuf.Timestamp current_date = 5; */
        if (message.currentDate)
            Timestamp.internalBinaryWrite(message.currentDate, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.DeadlineNub
 */
export const DeadlineNub = new DeadlineNub$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SuggestDateReq$Type extends MessageType<SuggestDateReq> {
    constructor() {
        super("communication.SuggestDateReq", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "deadline_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "new_date", kind: "message", T: () => Timestamp },
            { no: 5, name: "doc_mode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SuggestDateReq>): SuggestDateReq {
        const message = { userId: "", id: "", deadlineId: "", docMode: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SuggestDateReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SuggestDateReq): SuggestDateReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* string deadline_id */ 4:
                    message.deadlineId = reader.string();
                    break;
                case /* google.protobuf.Timestamp new_date */ 3:
                    message.newDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.newDate);
                    break;
                case /* bool doc_mode */ 5:
                    message.docMode = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SuggestDateReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* string deadline_id = 4; */
        if (message.deadlineId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.deadlineId);
        /* google.protobuf.Timestamp new_date = 3; */
        if (message.newDate)
            Timestamp.internalBinaryWrite(message.newDate, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bool doc_mode = 5; */
        if (message.docMode !== false)
            writer.tag(5, WireType.Varint).bool(message.docMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.SuggestDateReq
 */
export const SuggestDateReq = new SuggestDateReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SuggestPayoutReq$Type extends MessageType<SuggestPayoutReq> {
    constructor() {
        super("communication.SuggestPayoutReq", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "deadline_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "new_payout", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "doc_mode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SuggestPayoutReq>): SuggestPayoutReq {
        const message = { userId: "", id: "", deadlineId: "", newPayout: 0n, docMode: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SuggestPayoutReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SuggestPayoutReq): SuggestPayoutReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* string deadline_id */ 4:
                    message.deadlineId = reader.string();
                    break;
                case /* int64 new_payout */ 3:
                    message.newPayout = reader.int64().toBigInt();
                    break;
                case /* bool doc_mode */ 5:
                    message.docMode = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SuggestPayoutReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* string deadline_id = 4; */
        if (message.deadlineId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.deadlineId);
        /* int64 new_payout = 3; */
        if (message.newPayout !== 0n)
            writer.tag(3, WireType.Varint).int64(message.newPayout);
        /* bool doc_mode = 5; */
        if (message.docMode !== false)
            writer.tag(5, WireType.Varint).bool(message.docMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.SuggestPayoutReq
 */
export const SuggestPayoutReq = new SuggestPayoutReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SuggestDeadlineItemsReq$Type extends MessageType<SuggestDeadlineItemsReq> {
    constructor() {
        super("communication.SuggestDeadlineItemsReq", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "deadline_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "item_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "doc_mode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SuggestDeadlineItemsReq>): SuggestDeadlineItemsReq {
        const message = { userId: "", id: "", deadlineId: "", itemIds: [], docMode: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SuggestDeadlineItemsReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SuggestDeadlineItemsReq): SuggestDeadlineItemsReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* string deadline_id */ 4:
                    message.deadlineId = reader.string();
                    break;
                case /* repeated string item_ids */ 3:
                    message.itemIds.push(reader.string());
                    break;
                case /* bool doc_mode */ 5:
                    message.docMode = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SuggestDeadlineItemsReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* string deadline_id = 4; */
        if (message.deadlineId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.deadlineId);
        /* repeated string item_ids = 3; */
        for (let i = 0; i < message.itemIds.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.itemIds[i]);
        /* bool doc_mode = 5; */
        if (message.docMode !== false)
            writer.tag(5, WireType.Varint).bool(message.docMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.SuggestDeadlineItemsReq
 */
export const SuggestDeadlineItemsReq = new SuggestDeadlineItemsReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReactDeadlineItemsReq$Type extends MessageType<ReactDeadlineItemsReq> {
    constructor() {
        super("communication.ReactDeadlineItemsReq", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "deadline_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "doc_mode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ReactDeadlineItemsReq>): ReactDeadlineItemsReq {
        const message = { userId: "", id: "", messageId: "", deadlineId: "", status: 0, docMode: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReactDeadlineItemsReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReactDeadlineItemsReq): ReactDeadlineItemsReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* string message_id */ 4:
                    message.messageId = reader.string();
                    break;
                case /* string deadline_id */ 5:
                    message.deadlineId = reader.string();
                    break;
                case /* uint32 status */ 3:
                    message.status = reader.uint32();
                    break;
                case /* bool doc_mode */ 6:
                    message.docMode = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReactDeadlineItemsReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* string message_id = 4; */
        if (message.messageId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.messageId);
        /* string deadline_id = 5; */
        if (message.deadlineId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.deadlineId);
        /* uint32 status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).uint32(message.status);
        /* bool doc_mode = 6; */
        if (message.docMode !== false)
            writer.tag(6, WireType.Varint).bool(message.docMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ReactDeadlineItemsReq
 */
export const ReactDeadlineItemsReq = new ReactDeadlineItemsReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReactDateReq$Type extends MessageType<ReactDateReq> {
    constructor() {
        super("communication.ReactDateReq", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "deadline_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "doc_mode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ReactDateReq>): ReactDateReq {
        const message = { userId: "", id: "", messageId: "", deadlineId: "", status: 0, docMode: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReactDateReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReactDateReq): ReactDateReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* string message_id */ 4:
                    message.messageId = reader.string();
                    break;
                case /* string deadline_id */ 5:
                    message.deadlineId = reader.string();
                    break;
                case /* uint32 status */ 3:
                    message.status = reader.uint32();
                    break;
                case /* bool doc_mode */ 6:
                    message.docMode = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReactDateReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* string message_id = 4; */
        if (message.messageId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.messageId);
        /* string deadline_id = 5; */
        if (message.deadlineId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.deadlineId);
        /* uint32 status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).uint32(message.status);
        /* bool doc_mode = 6; */
        if (message.docMode !== false)
            writer.tag(6, WireType.Varint).bool(message.docMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ReactDateReq
 */
export const ReactDateReq = new ReactDateReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReactPayoutReq$Type extends MessageType<ReactPayoutReq> {
    constructor() {
        super("communication.ReactPayoutReq", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "deadline_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "doc_mode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ReactPayoutReq>): ReactPayoutReq {
        const message = { userId: "", id: "", messageId: "", deadlineId: "", status: 0, docMode: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReactPayoutReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReactPayoutReq): ReactPayoutReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* string message_id */ 4:
                    message.messageId = reader.string();
                    break;
                case /* string deadline_id */ 5:
                    message.deadlineId = reader.string();
                    break;
                case /* uint32 status */ 3:
                    message.status = reader.uint32();
                    break;
                case /* bool doc_mode */ 6:
                    message.docMode = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReactPayoutReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* string message_id = 4; */
        if (message.messageId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.messageId);
        /* string deadline_id = 5; */
        if (message.deadlineId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.deadlineId);
        /* uint32 status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).uint32(message.status);
        /* bool doc_mode = 6; */
        if (message.docMode !== false)
            writer.tag(6, WireType.Varint).bool(message.docMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ReactPayoutReq
 */
export const ReactPayoutReq = new ReactPayoutReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SuggestAddDeadlineReq$Type extends MessageType<SuggestAddDeadlineReq> {
    constructor() {
        super("communication.SuggestAddDeadlineReq", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "deadline", kind: "message", T: () => DeadlineEntity },
            { no: 4, name: "doc_mode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SuggestAddDeadlineReq>): SuggestAddDeadlineReq {
        const message = { userId: "", id: "", docMode: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SuggestAddDeadlineReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SuggestAddDeadlineReq): SuggestAddDeadlineReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* communication.DeadlineEntity deadline */ 3:
                    message.deadline = DeadlineEntity.internalBinaryRead(reader, reader.uint32(), options, message.deadline);
                    break;
                case /* bool doc_mode */ 4:
                    message.docMode = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SuggestAddDeadlineReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* communication.DeadlineEntity deadline = 3; */
        if (message.deadline)
            DeadlineEntity.internalBinaryWrite(message.deadline, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bool doc_mode = 4; */
        if (message.docMode !== false)
            writer.tag(4, WireType.Varint).bool(message.docMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.SuggestAddDeadlineReq
 */
export const SuggestAddDeadlineReq = new SuggestAddDeadlineReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReactAddDeadlineReq$Type extends MessageType<ReactAddDeadlineReq> {
    constructor() {
        super("communication.ReactAddDeadlineReq", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "deadline_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "doc_mode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ReactAddDeadlineReq>): ReactAddDeadlineReq {
        const message = { userId: "", id: "", messageId: "", deadlineId: "", status: 0, docMode: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReactAddDeadlineReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReactAddDeadlineReq): ReactAddDeadlineReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* string message_id */ 4:
                    message.messageId = reader.string();
                    break;
                case /* string deadline_id */ 3:
                    message.deadlineId = reader.string();
                    break;
                case /* uint32 status */ 5:
                    message.status = reader.uint32();
                    break;
                case /* bool doc_mode */ 6:
                    message.docMode = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReactAddDeadlineReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* string message_id = 4; */
        if (message.messageId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.messageId);
        /* string deadline_id = 3; */
        if (message.deadlineId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.deadlineId);
        /* uint32 status = 5; */
        if (message.status !== 0)
            writer.tag(5, WireType.Varint).uint32(message.status);
        /* bool doc_mode = 6; */
        if (message.docMode !== false)
            writer.tag(6, WireType.Varint).bool(message.docMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ReactAddDeadlineReq
 */
export const ReactAddDeadlineReq = new ReactAddDeadlineReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SuggestDelDeadlineReq$Type extends MessageType<SuggestDelDeadlineReq> {
    constructor() {
        super("communication.SuggestDelDeadlineReq", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "deadline", kind: "message", T: () => DeadlineEntity },
            { no: 4, name: "doc_mode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SuggestDelDeadlineReq>): SuggestDelDeadlineReq {
        const message = { userId: "", id: "", docMode: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SuggestDelDeadlineReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SuggestDelDeadlineReq): SuggestDelDeadlineReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* communication.DeadlineEntity deadline */ 3:
                    message.deadline = DeadlineEntity.internalBinaryRead(reader, reader.uint32(), options, message.deadline);
                    break;
                case /* bool doc_mode */ 4:
                    message.docMode = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SuggestDelDeadlineReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* communication.DeadlineEntity deadline = 3; */
        if (message.deadline)
            DeadlineEntity.internalBinaryWrite(message.deadline, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bool doc_mode = 4; */
        if (message.docMode !== false)
            writer.tag(4, WireType.Varint).bool(message.docMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.SuggestDelDeadlineReq
 */
export const SuggestDelDeadlineReq = new SuggestDelDeadlineReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReactDelDeadlineReq$Type extends MessageType<ReactDelDeadlineReq> {
    constructor() {
        super("communication.ReactDelDeadlineReq", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "deadline_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "doc_mode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ReactDelDeadlineReq>): ReactDelDeadlineReq {
        const message = { userId: "", id: "", messageId: "", deadlineId: "", status: 0, docMode: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReactDelDeadlineReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReactDelDeadlineReq): ReactDelDeadlineReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* string message_id */ 4:
                    message.messageId = reader.string();
                    break;
                case /* string deadline_id */ 3:
                    message.deadlineId = reader.string();
                    break;
                case /* uint32 status */ 5:
                    message.status = reader.uint32();
                    break;
                case /* bool doc_mode */ 6:
                    message.docMode = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReactDelDeadlineReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* string message_id = 4; */
        if (message.messageId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.messageId);
        /* string deadline_id = 3; */
        if (message.deadlineId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.deadlineId);
        /* uint32 status = 5; */
        if (message.status !== 0)
            writer.tag(5, WireType.Varint).uint32(message.status);
        /* bool doc_mode = 6; */
        if (message.docMode !== false)
            writer.tag(6, WireType.Varint).bool(message.docMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ReactDelDeadlineReq
 */
export const ReactDelDeadlineReq = new ReactDelDeadlineReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FinishDeadlineRequest$Type extends MessageType<FinishDeadlineRequest> {
    constructor() {
        super("communication.FinishDeadlineRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "deadline_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "doc_mode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<FinishDeadlineRequest>): FinishDeadlineRequest {
        const message = { userId: "", contractId: "", deadlineId: "", docMode: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FinishDeadlineRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FinishDeadlineRequest): FinishDeadlineRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* string deadline_id */ 3:
                    message.deadlineId = reader.string();
                    break;
                case /* bool doc_mode */ 4:
                    message.docMode = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FinishDeadlineRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* string deadline_id = 3; */
        if (message.deadlineId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.deadlineId);
        /* bool doc_mode = 4; */
        if (message.docMode !== false)
            writer.tag(4, WireType.Varint).bool(message.docMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.FinishDeadlineRequest
 */
export const FinishDeadlineRequest = new FinishDeadlineRequest$Type();
/**
 * @generated ServiceType for protobuf service communication.Deadline
 */
export const Deadline = new ServiceType("communication.Deadline", [
    { name: "SuggestDate", options: {}, I: SuggestDateReq, O: NullResponse },
    { name: "ReactDate", options: {}, I: ReactDateReq, O: NullResponse },
    { name: "SuggestPayout", options: {}, I: SuggestPayoutReq, O: NullResponse },
    { name: "ReactPayout", options: {}, I: ReactPayoutReq, O: NullResponse },
    { name: "SuggestDeadlineItems", options: {}, I: SuggestDeadlineItemsReq, O: NullResponse },
    { name: "ReactDeadlineItems", options: {}, I: ReactDeadlineItemsReq, O: NullResponse },
    { name: "SuggestAddDeadline", options: {}, I: SuggestAddDeadlineReq, O: DeadlineEntity },
    { name: "ReactAddDeadline", options: {}, I: ReactAddDeadlineReq, O: NullResponse },
    { name: "SuggestDeleteDeadline", options: {}, I: SuggestDelDeadlineReq, O: NullResponse },
    { name: "ReactDeleteDeadline", options: {}, I: ReactDelDeadlineReq, O: NullResponse },
    { name: "FinishDeadline", options: {}, I: FinishDeadlineRequest, O: NullResponse }
]);
