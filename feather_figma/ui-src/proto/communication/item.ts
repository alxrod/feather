// @generated by protobuf-ts 2.8.2 with parameter generate_dependencies
// @generated from protobuf file "communication/item.proto" (package "communication", syntax proto3)
// tslint:disable
import { NullResponse } from "./generic";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message communication.ItemEntity
 */
export interface ItemEntity {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string name = 4;
     */
    name: string;
    /**
     * @generated from protobuf field: string current_body = 5;
     */
    currentBody: string;
    /**
     * @generated from protobuf field: string worker_body = 6;
     */
    workerBody: string;
    /**
     * @generated from protobuf field: string buyer_body = 7;
     */
    buyerBody: string;
    /**
     * @generated from protobuf field: bool awaiting_approval = 8;
     */
    awaitingApproval: boolean;
    /**
     * @generated from protobuf field: bool awaiting_creation = 9;
     */
    awaitingCreation: boolean;
    /**
     * @generated from protobuf field: bool awaiting_deletion = 10;
     */
    awaitingDeletion: boolean;
    /**
     * @generated from protobuf field: uint32 buyer_settled = 27;
     */
    buyerSettled: number;
    /**
     * @generated from protobuf field: string figma_component_id = 29;
     */
    figmaComponentId: string;
}
/**
 * @generated from protobuf message communication.ItemNub
 */
export interface ItemNub {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string proposer = 3;
     */
    proposer: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message communication.SuggestItemReq
 */
export interface SuggestItemReq {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: string item_id = 4;
     */
    itemId: string;
    /**
     * @generated from protobuf field: string new_body = 3;
     */
    newBody: string;
    /**
     * @generated from protobuf field: bool doc_mode = 5;
     */
    docMode: boolean;
}
/**
 * @generated from protobuf message communication.ReactItemReq
 */
export interface ReactItemReq {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: string message_id = 4;
     */
    messageId: string;
    /**
     * @generated from protobuf field: string item_id = 5;
     */
    itemId: string;
    /**
     * @generated from protobuf field: uint32 status = 3;
     */
    status: number;
    /**
     * @generated from protobuf field: bool doc_mode = 6;
     */
    docMode: boolean;
}
/**
 * @generated from protobuf message communication.SuggestAddItemReq
 */
export interface SuggestAddItemReq {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: communication.ItemEntity item = 3;
     */
    item?: ItemEntity;
    /**
     * @generated from protobuf field: bool doc_mode = 4;
     */
    docMode: boolean;
}
/**
 * @generated from protobuf message communication.ReactAddItemReq
 */
export interface ReactAddItemReq {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: string message_id = 4;
     */
    messageId: string;
    /**
     * @generated from protobuf field: string item_id = 3;
     */
    itemId: string;
    /**
     * @generated from protobuf field: uint32 status = 5;
     */
    status: number;
    /**
     * @generated from protobuf field: bool doc_mode = 6;
     */
    docMode: boolean;
}
/**
 * @generated from protobuf message communication.SuggestDelItemReq
 */
export interface SuggestDelItemReq {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: communication.ItemEntity item = 3;
     */
    item?: ItemEntity;
    /**
     * @generated from protobuf field: bool doc_mode = 4;
     */
    docMode: boolean;
}
/**
 * @generated from protobuf message communication.ReactDelItemReq
 */
export interface ReactDelItemReq {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: string message_id = 4;
     */
    messageId: string;
    /**
     * @generated from protobuf field: string item_id = 3;
     */
    itemId: string;
    /**
     * @generated from protobuf field: uint32 status = 5;
     */
    status: number;
    /**
     * @generated from protobuf field: bool doc_mode = 6;
     */
    docMode: boolean;
}
/**
 * @generated from protobuf message communication.ContractSettleItemRequest
 */
export interface ContractSettleItemRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string deadline_id = 2;
     */
    deadlineId: string;
    /**
     * @generated from protobuf field: string contract_id = 3;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string item_id = 4;
     */
    itemId: string;
    /**
     * @generated from protobuf field: uint32 new_state = 5;
     */
    newState: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class ItemEntity$Type extends MessageType<ItemEntity> {
    constructor() {
        super("communication.ItemEntity", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "current_body", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "worker_body", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "buyer_body", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "awaiting_approval", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "awaiting_creation", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "awaiting_deletion", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 27, name: "buyer_settled", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 29, name: "figma_component_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ItemEntity>): ItemEntity {
        const message = { id: "", contractId: "", name: "", currentBody: "", workerBody: "", buyerBody: "", awaitingApproval: false, awaitingCreation: false, awaitingDeletion: false, buyerSettled: 0, figmaComponentId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ItemEntity>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemEntity): ItemEntity {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* string name */ 4:
                    message.name = reader.string();
                    break;
                case /* string current_body */ 5:
                    message.currentBody = reader.string();
                    break;
                case /* string worker_body */ 6:
                    message.workerBody = reader.string();
                    break;
                case /* string buyer_body */ 7:
                    message.buyerBody = reader.string();
                    break;
                case /* bool awaiting_approval */ 8:
                    message.awaitingApproval = reader.bool();
                    break;
                case /* bool awaiting_creation */ 9:
                    message.awaitingCreation = reader.bool();
                    break;
                case /* bool awaiting_deletion */ 10:
                    message.awaitingDeletion = reader.bool();
                    break;
                case /* uint32 buyer_settled */ 27:
                    message.buyerSettled = reader.uint32();
                    break;
                case /* string figma_component_id */ 29:
                    message.figmaComponentId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ItemEntity, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* string name = 4; */
        if (message.name !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.name);
        /* string current_body = 5; */
        if (message.currentBody !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.currentBody);
        /* string worker_body = 6; */
        if (message.workerBody !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.workerBody);
        /* string buyer_body = 7; */
        if (message.buyerBody !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.buyerBody);
        /* bool awaiting_approval = 8; */
        if (message.awaitingApproval !== false)
            writer.tag(8, WireType.Varint).bool(message.awaitingApproval);
        /* bool awaiting_creation = 9; */
        if (message.awaitingCreation !== false)
            writer.tag(9, WireType.Varint).bool(message.awaitingCreation);
        /* bool awaiting_deletion = 10; */
        if (message.awaitingDeletion !== false)
            writer.tag(10, WireType.Varint).bool(message.awaitingDeletion);
        /* uint32 buyer_settled = 27; */
        if (message.buyerSettled !== 0)
            writer.tag(27, WireType.Varint).uint32(message.buyerSettled);
        /* string figma_component_id = 29; */
        if (message.figmaComponentId !== "")
            writer.tag(29, WireType.LengthDelimited).string(message.figmaComponentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ItemEntity
 */
export const ItemEntity = new ItemEntity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ItemNub$Type extends MessageType<ItemNub> {
    constructor() {
        super("communication.ItemNub", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "proposer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ItemNub>): ItemNub {
        const message = { id: "", proposer: "", name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ItemNub>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemNub): ItemNub {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string proposer */ 3:
                    message.proposer = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ItemNub, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string proposer = 3; */
        if (message.proposer !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.proposer);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ItemNub
 */
export const ItemNub = new ItemNub$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SuggestItemReq$Type extends MessageType<SuggestItemReq> {
    constructor() {
        super("communication.SuggestItemReq", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "new_body", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "doc_mode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SuggestItemReq>): SuggestItemReq {
        const message = { userId: "", id: "", itemId: "", newBody: "", docMode: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SuggestItemReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SuggestItemReq): SuggestItemReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* string item_id */ 4:
                    message.itemId = reader.string();
                    break;
                case /* string new_body */ 3:
                    message.newBody = reader.string();
                    break;
                case /* bool doc_mode */ 5:
                    message.docMode = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SuggestItemReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* string item_id = 4; */
        if (message.itemId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.itemId);
        /* string new_body = 3; */
        if (message.newBody !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.newBody);
        /* bool doc_mode = 5; */
        if (message.docMode !== false)
            writer.tag(5, WireType.Varint).bool(message.docMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.SuggestItemReq
 */
export const SuggestItemReq = new SuggestItemReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReactItemReq$Type extends MessageType<ReactItemReq> {
    constructor() {
        super("communication.ReactItemReq", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "doc_mode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ReactItemReq>): ReactItemReq {
        const message = { userId: "", id: "", messageId: "", itemId: "", status: 0, docMode: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReactItemReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReactItemReq): ReactItemReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* string message_id */ 4:
                    message.messageId = reader.string();
                    break;
                case /* string item_id */ 5:
                    message.itemId = reader.string();
                    break;
                case /* uint32 status */ 3:
                    message.status = reader.uint32();
                    break;
                case /* bool doc_mode */ 6:
                    message.docMode = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReactItemReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* string message_id = 4; */
        if (message.messageId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.messageId);
        /* string item_id = 5; */
        if (message.itemId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.itemId);
        /* uint32 status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).uint32(message.status);
        /* bool doc_mode = 6; */
        if (message.docMode !== false)
            writer.tag(6, WireType.Varint).bool(message.docMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ReactItemReq
 */
export const ReactItemReq = new ReactItemReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SuggestAddItemReq$Type extends MessageType<SuggestAddItemReq> {
    constructor() {
        super("communication.SuggestAddItemReq", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "item", kind: "message", T: () => ItemEntity },
            { no: 4, name: "doc_mode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SuggestAddItemReq>): SuggestAddItemReq {
        const message = { userId: "", id: "", docMode: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SuggestAddItemReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SuggestAddItemReq): SuggestAddItemReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* communication.ItemEntity item */ 3:
                    message.item = ItemEntity.internalBinaryRead(reader, reader.uint32(), options, message.item);
                    break;
                case /* bool doc_mode */ 4:
                    message.docMode = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SuggestAddItemReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* communication.ItemEntity item = 3; */
        if (message.item)
            ItemEntity.internalBinaryWrite(message.item, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bool doc_mode = 4; */
        if (message.docMode !== false)
            writer.tag(4, WireType.Varint).bool(message.docMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.SuggestAddItemReq
 */
export const SuggestAddItemReq = new SuggestAddItemReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReactAddItemReq$Type extends MessageType<ReactAddItemReq> {
    constructor() {
        super("communication.ReactAddItemReq", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "doc_mode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ReactAddItemReq>): ReactAddItemReq {
        const message = { userId: "", id: "", messageId: "", itemId: "", status: 0, docMode: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReactAddItemReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReactAddItemReq): ReactAddItemReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* string message_id */ 4:
                    message.messageId = reader.string();
                    break;
                case /* string item_id */ 3:
                    message.itemId = reader.string();
                    break;
                case /* uint32 status */ 5:
                    message.status = reader.uint32();
                    break;
                case /* bool doc_mode */ 6:
                    message.docMode = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReactAddItemReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* string message_id = 4; */
        if (message.messageId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.messageId);
        /* string item_id = 3; */
        if (message.itemId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.itemId);
        /* uint32 status = 5; */
        if (message.status !== 0)
            writer.tag(5, WireType.Varint).uint32(message.status);
        /* bool doc_mode = 6; */
        if (message.docMode !== false)
            writer.tag(6, WireType.Varint).bool(message.docMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ReactAddItemReq
 */
export const ReactAddItemReq = new ReactAddItemReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SuggestDelItemReq$Type extends MessageType<SuggestDelItemReq> {
    constructor() {
        super("communication.SuggestDelItemReq", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "item", kind: "message", T: () => ItemEntity },
            { no: 4, name: "doc_mode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SuggestDelItemReq>): SuggestDelItemReq {
        const message = { userId: "", id: "", docMode: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SuggestDelItemReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SuggestDelItemReq): SuggestDelItemReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* communication.ItemEntity item */ 3:
                    message.item = ItemEntity.internalBinaryRead(reader, reader.uint32(), options, message.item);
                    break;
                case /* bool doc_mode */ 4:
                    message.docMode = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SuggestDelItemReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* communication.ItemEntity item = 3; */
        if (message.item)
            ItemEntity.internalBinaryWrite(message.item, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bool doc_mode = 4; */
        if (message.docMode !== false)
            writer.tag(4, WireType.Varint).bool(message.docMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.SuggestDelItemReq
 */
export const SuggestDelItemReq = new SuggestDelItemReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReactDelItemReq$Type extends MessageType<ReactDelItemReq> {
    constructor() {
        super("communication.ReactDelItemReq", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "doc_mode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ReactDelItemReq>): ReactDelItemReq {
        const message = { userId: "", id: "", messageId: "", itemId: "", status: 0, docMode: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReactDelItemReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReactDelItemReq): ReactDelItemReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* string message_id */ 4:
                    message.messageId = reader.string();
                    break;
                case /* string item_id */ 3:
                    message.itemId = reader.string();
                    break;
                case /* uint32 status */ 5:
                    message.status = reader.uint32();
                    break;
                case /* bool doc_mode */ 6:
                    message.docMode = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReactDelItemReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* string message_id = 4; */
        if (message.messageId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.messageId);
        /* string item_id = 3; */
        if (message.itemId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.itemId);
        /* uint32 status = 5; */
        if (message.status !== 0)
            writer.tag(5, WireType.Varint).uint32(message.status);
        /* bool doc_mode = 6; */
        if (message.docMode !== false)
            writer.tag(6, WireType.Varint).bool(message.docMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ReactDelItemReq
 */
export const ReactDelItemReq = new ReactDelItemReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractSettleItemRequest$Type extends MessageType<ContractSettleItemRequest> {
    constructor() {
        super("communication.ContractSettleItemRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "deadline_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "new_state", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ContractSettleItemRequest>): ContractSettleItemRequest {
        const message = { userId: "", deadlineId: "", contractId: "", itemId: "", newState: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractSettleItemRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractSettleItemRequest): ContractSettleItemRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string deadline_id */ 2:
                    message.deadlineId = reader.string();
                    break;
                case /* string contract_id */ 3:
                    message.contractId = reader.string();
                    break;
                case /* string item_id */ 4:
                    message.itemId = reader.string();
                    break;
                case /* uint32 new_state */ 5:
                    message.newState = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractSettleItemRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string deadline_id = 2; */
        if (message.deadlineId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.deadlineId);
        /* string contract_id = 3; */
        if (message.contractId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.contractId);
        /* string item_id = 4; */
        if (message.itemId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.itemId);
        /* uint32 new_state = 5; */
        if (message.newState !== 0)
            writer.tag(5, WireType.Varint).uint32(message.newState);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractSettleItemRequest
 */
export const ContractSettleItemRequest = new ContractSettleItemRequest$Type();
/**
 * @generated ServiceType for protobuf service communication.Item
 */
export const Item = new ServiceType("communication.Item", [
    { name: "SuggestItem", options: {}, I: SuggestItemReq, O: NullResponse },
    { name: "ReactItem", options: {}, I: ReactItemReq, O: NullResponse },
    { name: "SuggestAddItem", options: {}, I: SuggestAddItemReq, O: ItemEntity },
    { name: "ReactAddItem", options: {}, I: ReactAddItemReq, O: NullResponse },
    { name: "SuggestDeleteItem", options: {}, I: SuggestDelItemReq, O: NullResponse },
    { name: "ReactDeleteItem", options: {}, I: ReactDelItemReq, O: NullResponse },
    { name: "SettleItem", options: {}, I: ContractSettleItemRequest, O: NullResponse }
]);
