// @generated by protobuf-ts 2.8.2 with parameter generate_dependencies
// @generated from protobuf file "communication/contract.proto" (package "communication", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../google/protobuf/timestamp";
/**
 * @generated from protobuf message communication.PriceEntity
 */
export interface PriceEntity {
    /**
     * @generated from protobuf field: int64 current = 1;
     */
    current: bigint;
    /**
     * @generated from protobuf field: int64 buyer = 2;
     */
    buyer: bigint;
    /**
     * @generated from protobuf field: int64 worker = 3;
     */
    worker: bigint;
    /**
     * @generated from protobuf field: bool awaiting_approval = 4;
     */
    awaitingApproval: boolean;
    /**
     * @generated from protobuf field: string proposer_id = 5;
     */
    proposerId: string;
}
/**
 * @generated from protobuf message communication.DeadlineEntity
 */
export interface DeadlineEntity {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string name = 18;
     */
    name: string;
    /**
     * @generated from protobuf field: bool complete = 25;
     */
    complete: boolean;
    /**
     * @generated from protobuf field: bool expired = 31;
     */
    expired: boolean;
    /**
     * @generated from protobuf field: bool worker_settled = 26;
     */
    workerSettled: boolean;
    /**
     * @generated from protobuf field: bool buyer_settled = 27;
     */
    buyerSettled: boolean;
    /**
     * @generated from protobuf field: bool worker_confirmed = 29;
     */
    workerConfirmed: boolean;
    /**
     * @generated from protobuf field: bool buyer_confirmed = 30;
     */
    buyerConfirmed: boolean;
    /**
     * @generated from protobuf field: bool admin_settled = 28;
     */
    adminSettled: boolean;
    /**
     * @generated from protobuf field: bool awaiting_creation = 20;
     */
    awaitingCreation: boolean;
    /**
     * @generated from protobuf field: bool awaiting_deletion = 21;
     */
    awaitingDeletion: boolean;
    /**
     * @generated from protobuf field: string deadline_proposer_id = 22;
     */
    deadlineProposerId: string;
    /**
     * @generated from protobuf field: int64 current_payout = 4;
     */
    currentPayout: bigint;
    /**
     * @generated from protobuf field: int64 worker_payout = 7;
     */
    workerPayout: bigint;
    /**
     * @generated from protobuf field: int64 buyer_payout = 10;
     */
    buyerPayout: bigint;
    /**
     * @generated from protobuf field: bool payout_awaiting_approval = 12;
     */
    payoutAwaitingApproval: boolean;
    /**
     * @generated from protobuf field: string payout_proposer_id = 13;
     */
    payoutProposerId: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp current_date = 5;
     */
    currentDate?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp worker_date = 8;
     */
    workerDate?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp buyer_date = 11;
     */
    buyerDate?: Timestamp;
    /**
     * @generated from protobuf field: bool date_awaiting_approval = 16;
     */
    dateAwaitingApproval: boolean;
    /**
     * @generated from protobuf field: string date_proposer_id = 17;
     */
    dateProposerId: string;
    /**
     * @generated from protobuf field: bool draft_required = 19;
     */
    draftRequired: boolean;
    /**
     * @generated from protobuf field: string items_proposer_id = 23;
     */
    itemsProposerId: string;
    /**
     * @generated from protobuf field: repeated uint32 item_states = 24;
     */
    itemStates: number[];
    /**
     * @generated from protobuf field: repeated communication.ItemNub items = 14;
     */
    items: ItemNub[];
    /**
     * @generated from protobuf field: bool items_awaiting_approval = 15;
     */
    itemsAwaitingApproval: boolean;
}
/**
 * @generated from protobuf message communication.DeadlineNub
 */
export interface DeadlineNub {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: bool complete = 25;
     */
    complete: boolean;
    /**
     * @generated from protobuf field: bool expired = 31;
     */
    expired: boolean;
    /**
     * @generated from protobuf field: int64 current_payout = 4;
     */
    currentPayout: bigint;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp current_date = 5;
     */
    currentDate?: Timestamp;
}
/**
 * @generated from protobuf message communication.ContractEntity
 */
export interface ContractEntity {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string invited_email = 11;
     */
    invitedEmail: string;
    /**
     * @generated from protobuf field: string invite_password = 18;
     */
    invitePassword: string;
    /**
     * @generated from protobuf field: communication.UserNubEntity worker = 2;
     */
    worker?: UserNubEntity;
    /**
     * @generated from protobuf field: communication.UserNubEntity buyer = 3;
     */
    buyer?: UserNubEntity;
    /**
     * @generated from protobuf field: communication.PriceEntity price = 4;
     */
    price?: PriceEntity;
    /**
     * @generated from protobuf field: repeated communication.DeadlineEntity deadlines = 5;
     */
    deadlines: DeadlineEntity[];
    /**
     * @generated from protobuf field: string current_deadline_id = 15;
     */
    currentDeadlineId: string;
    /**
     * @generated from protobuf field: string title = 8;
     */
    title: string;
    /**
     * @generated from protobuf field: string summary = 6;
     */
    summary: string;
    /**
     * @generated from protobuf field: uint32 stage = 9;
     */
    stage: number;
    /**
     * @generated from protobuf field: bool universal_lock = 14;
     */
    universalLock: boolean;
    /**
     * @generated from protobuf field: bool worker_approved = 12;
     */
    workerApproved: boolean;
    /**
     * @generated from protobuf field: bool buyer_approved = 13;
     */
    buyerApproved: boolean;
    /**
     * @generated from protobuf field: repeated communication.ItemEntity items = 7;
     */
    items: ItemEntity[];
    /**
     * @generated from protobuf field: string room_id = 10;
     */
    roomId: string;
    /**
     * @generated from protobuf field: bool disputed = 16;
     */
    disputed: boolean;
    /**
     * @generated from protobuf field: bool admin_requested = 17;
     */
    adminRequested: boolean;
    /**
     * @generated from protobuf field: string figma_link = 19;
     */
    figmaLink: string;
}
/**
 * @generated from protobuf message communication.ContractNub
 */
export interface ContractNub {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string summary = 12;
     */
    summary: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp deadline = 3;
     */
    deadline?: Timestamp;
    /**
     * @generated from protobuf field: int64 price = 4;
     */
    price: bigint;
    /**
     * @generated from protobuf field: uint32 stage = 5;
     */
    stage: number;
    /**
     * @generated from protobuf field: uint32 user_type = 6;
     */
    userType: number;
    /**
     * @generated from protobuf field: bool disputed = 7;
     */
    disputed: boolean;
    /**
     * @generated from protobuf field: bool admin_requested = 8;
     */
    adminRequested: boolean;
    /**
     * @generated from protobuf field: string worker_id = 9;
     */
    workerId: string;
    /**
     * @generated from protobuf field: string buyer_id = 10;
     */
    buyerId: string;
    /**
     * @generated from protobuf field: repeated communication.DeadlineNub deadlines = 11;
     */
    deadlines: DeadlineNub[];
}
/**
 * @generated from protobuf message communication.InviteDataRequest
 */
export interface InviteDataRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string secret = 2;
     */
    secret: string;
}
/**
 * @generated from protobuf message communication.ContractInviteNub
 */
export interface ContractInviteNub {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string invited_email = 11;
     */
    invitedEmail: string;
    /**
     * @generated from protobuf field: bool invited_user_in_system = 12;
     */
    invitedUserInSystem: boolean;
    /**
     * @generated from protobuf field: communication.UserNubEntity worker = 2;
     */
    worker?: UserNubEntity;
    /**
     * @generated from protobuf field: communication.UserNubEntity buyer = 3;
     */
    buyer?: UserNubEntity;
    /**
     * @generated from protobuf field: communication.PriceEntity price = 4;
     */
    price?: PriceEntity;
    /**
     * @generated from protobuf field: repeated communication.DeadlineEntity deadlines = 5;
     */
    deadlines: DeadlineEntity[];
    /**
     * @generated from protobuf field: string title = 8;
     */
    title: string;
    /**
     * @generated from protobuf field: string summary = 6;
     */
    summary: string;
    /**
     * @generated from protobuf field: repeated communication.ItemEntity items = 7;
     */
    items: ItemEntity[];
}
/**
 * @generated from protobuf message communication.ContractNubSet
 */
export interface ContractNubSet {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: repeated communication.ContractNub contract_nubs = 2;
     */
    contractNubs: ContractNub[];
}
/**
 * @generated from protobuf message communication.UserNubEntity
 */
export interface UserNubEntity {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string username = 2;
     */
    username: string;
    /**
     * @generated from protobuf field: bool has_photo = 5;
     */
    hasPhoto: boolean;
    /**
     * @generated from protobuf field: string photo_url = 4;
     */
    photoUrl: string;
    /**
     * @generated from protobuf field: bool worker_mode_enabled = 6;
     */
    workerModeEnabled: boolean;
    /**
     * @generated from protobuf field: bool buyer_mode_enabled = 7;
     */
    buyerModeEnabled: boolean;
}
/**
 * @generated from protobuf message communication.ItemEntity
 */
export interface ItemEntity {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string name = 4;
     */
    name: string;
    /**
     * @generated from protobuf field: string current_body = 5;
     */
    currentBody: string;
    /**
     * @generated from protobuf field: string worker_body = 6;
     */
    workerBody: string;
    /**
     * @generated from protobuf field: string buyer_body = 7;
     */
    buyerBody: string;
    /**
     * @generated from protobuf field: bool awaiting_approval = 8;
     */
    awaitingApproval: boolean;
    /**
     * @generated from protobuf field: bool awaiting_creation = 9;
     */
    awaitingCreation: boolean;
    /**
     * @generated from protobuf field: bool awaiting_deletion = 10;
     */
    awaitingDeletion: boolean;
    /**
     * @generated from protobuf field: uint32 worker_settled = 26;
     */
    workerSettled: number;
    /**
     * @generated from protobuf field: uint32 buyer_settled = 27;
     */
    buyerSettled: number;
    /**
     * @generated from protobuf field: uint32 admin_settled = 28;
     */
    adminSettled: number;
    /**
     * @generated from protobuf field: repeated string figma_node_ids = 29;
     */
    figmaNodeIds: string[];
}
/**
 * @generated from protobuf message communication.ItemNub
 */
export interface ItemNub {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string proposer = 3;
     */
    proposer: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message communication.ContractCreateRequest
 */
export interface ContractCreateRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string summary = 3;
     */
    summary: string;
    /**
     * @generated from protobuf field: string invited_email = 8;
     */
    invitedEmail: string;
    /**
     * @generated from protobuf field: uint32 role = 9;
     */
    role: number;
    /**
     * @generated from protobuf field: communication.PriceEntity price = 5;
     */
    price?: PriceEntity;
    /**
     * @generated from protobuf field: repeated communication.DeadlineEntity deadlines = 6;
     */
    deadlines: DeadlineEntity[];
    /**
     * @generated from protobuf field: repeated communication.ItemEntity items = 7;
     */
    items: ItemEntity[];
}
/**
 * @generated from protobuf message communication.ContractFinishCreationRequest
 */
export interface ContractFinishCreationRequest {
    /**
     * @generated from protobuf field: string contract_id = 1;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
}
/**
 * @generated from protobuf message communication.ContractUpdateRequest
 */
export interface ContractUpdateRequest {
    /**
     * @generated from protobuf field: string contract_id = 1;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string summary = 4;
     */
    summary: string;
    /**
     * @generated from protobuf field: string invited_email = 5;
     */
    invitedEmail: string;
    /**
     * @generated from protobuf field: uint32 role = 6;
     */
    role: number;
    /**
     * @generated from protobuf field: communication.PriceEntity price = 7;
     */
    price?: PriceEntity;
    /**
     * @generated from protobuf field: repeated communication.DeadlineEntity deadlines = 8;
     */
    deadlines: DeadlineEntity[];
    /**
     * @generated from protobuf field: repeated communication.ItemEntity items = 9;
     */
    items: ItemEntity[];
}
/**
 * @generated from protobuf message communication.QueryByIdRequest
 */
export interface QueryByIdRequest {
    /**
     * @generated from protobuf field: string contract_id = 1;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
}
/**
 * @generated from protobuf message communication.ContractSuggestPrice
 */
export interface ContractSuggestPrice {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: int64 new_price = 3;
     */
    newPrice: bigint;
}
/**
 * @generated from protobuf message communication.ContractReactPrice
 */
export interface ContractReactPrice {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string message_id = 4;
     */
    messageId: string;
    /**
     * @generated from protobuf field: uint32 status = 3;
     */
    status: number;
}
/**
 * @generated from protobuf message communication.ContractSuggestDate
 */
export interface ContractSuggestDate {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string deadline_id = 4;
     */
    deadlineId: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp new_date = 3;
     */
    newDate?: Timestamp;
}
/**
 * @generated from protobuf message communication.ContractSuggestPayout
 */
export interface ContractSuggestPayout {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string deadline_id = 4;
     */
    deadlineId: string;
    /**
     * @generated from protobuf field: int64 new_payout = 3;
     */
    newPayout: bigint;
}
/**
 * @generated from protobuf message communication.ContractSuggestDeadlineItems
 */
export interface ContractSuggestDeadlineItems {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string deadline_id = 4;
     */
    deadlineId: string;
    /**
     * @generated from protobuf field: repeated string item_ids = 3;
     */
    itemIds: string[];
}
/**
 * @generated from protobuf message communication.ContractReactDeadlineItems
 */
export interface ContractReactDeadlineItems {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string message_id = 4;
     */
    messageId: string;
    /**
     * @generated from protobuf field: string deadline_id = 5;
     */
    deadlineId: string;
    /**
     * @generated from protobuf field: uint32 status = 3;
     */
    status: number;
}
/**
 * @generated from protobuf message communication.ContractReactDate
 */
export interface ContractReactDate {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string message_id = 4;
     */
    messageId: string;
    /**
     * @generated from protobuf field: string deadline_id = 5;
     */
    deadlineId: string;
    /**
     * @generated from protobuf field: uint32 status = 3;
     */
    status: number;
}
/**
 * @generated from protobuf message communication.ContractReactPayout
 */
export interface ContractReactPayout {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string message_id = 4;
     */
    messageId: string;
    /**
     * @generated from protobuf field: string deadline_id = 5;
     */
    deadlineId: string;
    /**
     * @generated from protobuf field: uint32 status = 3;
     */
    status: number;
}
/**
 * @generated from protobuf message communication.ContractSuggestItem
 */
export interface ContractSuggestItem {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string item_id = 4;
     */
    itemId: string;
    /**
     * @generated from protobuf field: string new_body = 3;
     */
    newBody: string;
}
/**
 * @generated from protobuf message communication.ContractReactItem
 */
export interface ContractReactItem {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string message_id = 4;
     */
    messageId: string;
    /**
     * @generated from protobuf field: string item_id = 5;
     */
    itemId: string;
    /**
     * @generated from protobuf field: uint32 status = 3;
     */
    status: number;
}
/**
 * @generated from protobuf message communication.ContractSuggestAddItem
 */
export interface ContractSuggestAddItem {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: communication.ItemEntity item = 3;
     */
    item?: ItemEntity;
}
/**
 * @generated from protobuf message communication.ContractReactAddItem
 */
export interface ContractReactAddItem {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string message_id = 4;
     */
    messageId: string;
    /**
     * @generated from protobuf field: string item_id = 3;
     */
    itemId: string;
    /**
     * @generated from protobuf field: uint32 status = 5;
     */
    status: number;
}
/**
 * @generated from protobuf message communication.ContractSuggestDelItem
 */
export interface ContractSuggestDelItem {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: communication.ItemEntity item = 3;
     */
    item?: ItemEntity;
}
/**
 * @generated from protobuf message communication.ContractReactDelItem
 */
export interface ContractReactDelItem {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string message_id = 4;
     */
    messageId: string;
    /**
     * @generated from protobuf field: string item_id = 3;
     */
    itemId: string;
    /**
     * @generated from protobuf field: uint32 status = 5;
     */
    status: number;
}
/**
 * @generated from protobuf message communication.ContractSuggestAddDeadline
 */
export interface ContractSuggestAddDeadline {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: communication.DeadlineEntity deadline = 3;
     */
    deadline?: DeadlineEntity;
}
/**
 * @generated from protobuf message communication.ContractReactAddDeadline
 */
export interface ContractReactAddDeadline {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string message_id = 4;
     */
    messageId: string;
    /**
     * @generated from protobuf field: string deadline_id = 3;
     */
    deadlineId: string;
    /**
     * @generated from protobuf field: uint32 status = 5;
     */
    status: number;
}
/**
 * @generated from protobuf message communication.ContractSuggestDelDeadline
 */
export interface ContractSuggestDelDeadline {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: communication.DeadlineEntity deadline = 3;
     */
    deadline?: DeadlineEntity;
}
/**
 * @generated from protobuf message communication.ContractReactDelDeadline
 */
export interface ContractReactDelDeadline {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string message_id = 4;
     */
    messageId: string;
    /**
     * @generated from protobuf field: string deadline_id = 3;
     */
    deadlineId: string;
    /**
     * @generated from protobuf field: uint32 status = 5;
     */
    status: number;
}
/**
 * @generated from protobuf message communication.ContractResponse
 */
export interface ContractResponse {
    /**
     * @generated from protobuf field: communication.ContractEntity contract = 2;
     */
    contract?: ContractEntity;
    /**
     * @generated from protobuf field: uint32 role = 3;
     */
    role: number;
}
/**
 * @generated from protobuf message communication.QueryByUserRequest
 */
export interface QueryByUserRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
}
/**
 * @generated from protobuf message communication.ClaimContractRequest
 */
export interface ClaimContractRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string password = 3;
     */
    password: string;
}
/**
 * @generated from protobuf message communication.SignContractRequest
 */
export interface SignContractRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
}
/**
 * @generated from protobuf message communication.SettleContractRequest
 */
export interface SettleContractRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
}
/**
 * @generated from protobuf message communication.FinishDeadlineRequest
 */
export interface FinishDeadlineRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string deadline_id = 3;
     */
    deadlineId: string;
}
/**
 * @generated from protobuf message communication.ConfirmDeadlineRequest
 */
export interface ConfirmDeadlineRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string deadline_id = 3;
     */
    deadlineId: string;
}
/**
 * @generated from protobuf message communication.UndoDeadlineRequest
 */
export interface UndoDeadlineRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string deadline_id = 3;
     */
    deadlineId: string;
}
/**
 * @generated from protobuf message communication.ContractAdminSupport
 */
export interface ContractAdminSupport {
    /**
     * @generated from protobuf field: string contract_id = 1;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
}
/**
 * @generated from protobuf message communication.ContractToggleLockRequest
 */
export interface ContractToggleLockRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: bool contract_lock = 3;
     */
    contractLock: boolean;
}
/**
 * @generated from protobuf message communication.ContractReactLockRequest
 */
export interface ContractReactLockRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string message_id = 3;
     */
    messageId: string;
    /**
     * @generated from protobuf field: uint32 status = 4;
     */
    status: number;
}
/**
 * @generated from protobuf message communication.ContractSettleItemRequest
 */
export interface ContractSettleItemRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string deadline_id = 2;
     */
    deadlineId: string;
    /**
     * @generated from protobuf field: string contract_id = 3;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string item_id = 4;
     */
    itemId: string;
    /**
     * @generated from protobuf field: uint32 new_state = 5;
     */
    newState: number;
}
/**
 * @generated from protobuf message communication.ContractDeleteDraftRequest
 */
export interface ContractDeleteDraftRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
}
/**
 * @generated from protobuf message communication.NullResponse
 */
export interface NullResponse {
}
/**
 * @generated from protobuf message communication.ContractEditResponse
 */
export interface ContractEditResponse {
}
/**
 * @generated from protobuf message communication.EmailChangeRequest
 */
export interface EmailChangeRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string new_email = 3;
     */
    newEmail: string;
}
/**
 * @generated from protobuf message communication.EmailResendRequest
 */
export interface EmailResendRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
}
/**
 * @generated from protobuf message communication.FigmaLinkRequest
 */
export interface FigmaLinkRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string figma_link = 3;
     */
    figmaLink: string;
}
/**
 * @generated from protobuf message communication.FigmaItemRequest
 */
export interface FigmaItemRequest {
    /**
     * @generated from protobuf field: string contract_id = 1;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string contract_secret = 2;
     */
    contractSecret: string;
    /**
     * @generated from protobuf field: string item_id = 3;
     */
    itemId: string;
    /**
     * @generated from protobuf field: repeated string node_ids = 4;
     */
    nodeIds: string[];
}
// @generated message type with reflection information, may provide speed optimized methods
class PriceEntity$Type extends MessageType<PriceEntity> {
    constructor() {
        super("communication.PriceEntity", [
            { no: 1, name: "current", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "buyer", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "worker", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "awaiting_approval", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "proposer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PriceEntity>): PriceEntity {
        const message = { current: 0n, buyer: 0n, worker: 0n, awaitingApproval: false, proposerId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PriceEntity>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PriceEntity): PriceEntity {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 current */ 1:
                    message.current = reader.int64().toBigInt();
                    break;
                case /* int64 buyer */ 2:
                    message.buyer = reader.int64().toBigInt();
                    break;
                case /* int64 worker */ 3:
                    message.worker = reader.int64().toBigInt();
                    break;
                case /* bool awaiting_approval */ 4:
                    message.awaitingApproval = reader.bool();
                    break;
                case /* string proposer_id */ 5:
                    message.proposerId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PriceEntity, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 current = 1; */
        if (message.current !== 0n)
            writer.tag(1, WireType.Varint).int64(message.current);
        /* int64 buyer = 2; */
        if (message.buyer !== 0n)
            writer.tag(2, WireType.Varint).int64(message.buyer);
        /* int64 worker = 3; */
        if (message.worker !== 0n)
            writer.tag(3, WireType.Varint).int64(message.worker);
        /* bool awaiting_approval = 4; */
        if (message.awaitingApproval !== false)
            writer.tag(4, WireType.Varint).bool(message.awaitingApproval);
        /* string proposer_id = 5; */
        if (message.proposerId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.proposerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.PriceEntity
 */
export const PriceEntity = new PriceEntity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeadlineEntity$Type extends MessageType<DeadlineEntity> {
    constructor() {
        super("communication.DeadlineEntity", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 25, name: "complete", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 31, name: "expired", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 26, name: "worker_settled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 27, name: "buyer_settled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 29, name: "worker_confirmed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 30, name: "buyer_confirmed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 28, name: "admin_settled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 20, name: "awaiting_creation", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 21, name: "awaiting_deletion", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 22, name: "deadline_proposer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "current_payout", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "worker_payout", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "buyer_payout", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "payout_awaiting_approval", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "payout_proposer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "current_date", kind: "message", T: () => Timestamp },
            { no: 8, name: "worker_date", kind: "message", T: () => Timestamp },
            { no: 11, name: "buyer_date", kind: "message", T: () => Timestamp },
            { no: 16, name: "date_awaiting_approval", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 17, name: "date_proposer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "draft_required", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 23, name: "items_proposer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 24, name: "item_states", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemNub },
            { no: 15, name: "items_awaiting_approval", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<DeadlineEntity>): DeadlineEntity {
        const message = { id: "", contractId: "", name: "", complete: false, expired: false, workerSettled: false, buyerSettled: false, workerConfirmed: false, buyerConfirmed: false, adminSettled: false, awaitingCreation: false, awaitingDeletion: false, deadlineProposerId: "", currentPayout: 0n, workerPayout: 0n, buyerPayout: 0n, payoutAwaitingApproval: false, payoutProposerId: "", dateAwaitingApproval: false, dateProposerId: "", draftRequired: false, itemsProposerId: "", itemStates: [], items: [], itemsAwaitingApproval: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeadlineEntity>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeadlineEntity): DeadlineEntity {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* string name */ 18:
                    message.name = reader.string();
                    break;
                case /* bool complete */ 25:
                    message.complete = reader.bool();
                    break;
                case /* bool expired */ 31:
                    message.expired = reader.bool();
                    break;
                case /* bool worker_settled */ 26:
                    message.workerSettled = reader.bool();
                    break;
                case /* bool buyer_settled */ 27:
                    message.buyerSettled = reader.bool();
                    break;
                case /* bool worker_confirmed */ 29:
                    message.workerConfirmed = reader.bool();
                    break;
                case /* bool buyer_confirmed */ 30:
                    message.buyerConfirmed = reader.bool();
                    break;
                case /* bool admin_settled */ 28:
                    message.adminSettled = reader.bool();
                    break;
                case /* bool awaiting_creation */ 20:
                    message.awaitingCreation = reader.bool();
                    break;
                case /* bool awaiting_deletion */ 21:
                    message.awaitingDeletion = reader.bool();
                    break;
                case /* string deadline_proposer_id */ 22:
                    message.deadlineProposerId = reader.string();
                    break;
                case /* int64 current_payout */ 4:
                    message.currentPayout = reader.int64().toBigInt();
                    break;
                case /* int64 worker_payout */ 7:
                    message.workerPayout = reader.int64().toBigInt();
                    break;
                case /* int64 buyer_payout */ 10:
                    message.buyerPayout = reader.int64().toBigInt();
                    break;
                case /* bool payout_awaiting_approval */ 12:
                    message.payoutAwaitingApproval = reader.bool();
                    break;
                case /* string payout_proposer_id */ 13:
                    message.payoutProposerId = reader.string();
                    break;
                case /* google.protobuf.Timestamp current_date */ 5:
                    message.currentDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.currentDate);
                    break;
                case /* google.protobuf.Timestamp worker_date */ 8:
                    message.workerDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.workerDate);
                    break;
                case /* google.protobuf.Timestamp buyer_date */ 11:
                    message.buyerDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.buyerDate);
                    break;
                case /* bool date_awaiting_approval */ 16:
                    message.dateAwaitingApproval = reader.bool();
                    break;
                case /* string date_proposer_id */ 17:
                    message.dateProposerId = reader.string();
                    break;
                case /* bool draft_required */ 19:
                    message.draftRequired = reader.bool();
                    break;
                case /* string items_proposer_id */ 23:
                    message.itemsProposerId = reader.string();
                    break;
                case /* repeated uint32 item_states */ 24:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.itemStates.push(reader.uint32());
                    else
                        message.itemStates.push(reader.uint32());
                    break;
                case /* repeated communication.ItemNub items */ 14:
                    message.items.push(ItemNub.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool items_awaiting_approval */ 15:
                    message.itemsAwaitingApproval = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeadlineEntity, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* string name = 18; */
        if (message.name !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.name);
        /* bool complete = 25; */
        if (message.complete !== false)
            writer.tag(25, WireType.Varint).bool(message.complete);
        /* bool expired = 31; */
        if (message.expired !== false)
            writer.tag(31, WireType.Varint).bool(message.expired);
        /* bool worker_settled = 26; */
        if (message.workerSettled !== false)
            writer.tag(26, WireType.Varint).bool(message.workerSettled);
        /* bool buyer_settled = 27; */
        if (message.buyerSettled !== false)
            writer.tag(27, WireType.Varint).bool(message.buyerSettled);
        /* bool worker_confirmed = 29; */
        if (message.workerConfirmed !== false)
            writer.tag(29, WireType.Varint).bool(message.workerConfirmed);
        /* bool buyer_confirmed = 30; */
        if (message.buyerConfirmed !== false)
            writer.tag(30, WireType.Varint).bool(message.buyerConfirmed);
        /* bool admin_settled = 28; */
        if (message.adminSettled !== false)
            writer.tag(28, WireType.Varint).bool(message.adminSettled);
        /* bool awaiting_creation = 20; */
        if (message.awaitingCreation !== false)
            writer.tag(20, WireType.Varint).bool(message.awaitingCreation);
        /* bool awaiting_deletion = 21; */
        if (message.awaitingDeletion !== false)
            writer.tag(21, WireType.Varint).bool(message.awaitingDeletion);
        /* string deadline_proposer_id = 22; */
        if (message.deadlineProposerId !== "")
            writer.tag(22, WireType.LengthDelimited).string(message.deadlineProposerId);
        /* int64 current_payout = 4; */
        if (message.currentPayout !== 0n)
            writer.tag(4, WireType.Varint).int64(message.currentPayout);
        /* int64 worker_payout = 7; */
        if (message.workerPayout !== 0n)
            writer.tag(7, WireType.Varint).int64(message.workerPayout);
        /* int64 buyer_payout = 10; */
        if (message.buyerPayout !== 0n)
            writer.tag(10, WireType.Varint).int64(message.buyerPayout);
        /* bool payout_awaiting_approval = 12; */
        if (message.payoutAwaitingApproval !== false)
            writer.tag(12, WireType.Varint).bool(message.payoutAwaitingApproval);
        /* string payout_proposer_id = 13; */
        if (message.payoutProposerId !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.payoutProposerId);
        /* google.protobuf.Timestamp current_date = 5; */
        if (message.currentDate)
            Timestamp.internalBinaryWrite(message.currentDate, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp worker_date = 8; */
        if (message.workerDate)
            Timestamp.internalBinaryWrite(message.workerDate, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp buyer_date = 11; */
        if (message.buyerDate)
            Timestamp.internalBinaryWrite(message.buyerDate, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* bool date_awaiting_approval = 16; */
        if (message.dateAwaitingApproval !== false)
            writer.tag(16, WireType.Varint).bool(message.dateAwaitingApproval);
        /* string date_proposer_id = 17; */
        if (message.dateProposerId !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.dateProposerId);
        /* bool draft_required = 19; */
        if (message.draftRequired !== false)
            writer.tag(19, WireType.Varint).bool(message.draftRequired);
        /* string items_proposer_id = 23; */
        if (message.itemsProposerId !== "")
            writer.tag(23, WireType.LengthDelimited).string(message.itemsProposerId);
        /* repeated uint32 item_states = 24; */
        if (message.itemStates.length) {
            writer.tag(24, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.itemStates.length; i++)
                writer.uint32(message.itemStates[i]);
            writer.join();
        }
        /* repeated communication.ItemNub items = 14; */
        for (let i = 0; i < message.items.length; i++)
            ItemNub.internalBinaryWrite(message.items[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* bool items_awaiting_approval = 15; */
        if (message.itemsAwaitingApproval !== false)
            writer.tag(15, WireType.Varint).bool(message.itemsAwaitingApproval);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.DeadlineEntity
 */
export const DeadlineEntity = new DeadlineEntity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeadlineNub$Type extends MessageType<DeadlineNub> {
    constructor() {
        super("communication.DeadlineNub", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 25, name: "complete", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 31, name: "expired", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "current_payout", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "current_date", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<DeadlineNub>): DeadlineNub {
        const message = { id: "", contractId: "", complete: false, expired: false, currentPayout: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeadlineNub>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeadlineNub): DeadlineNub {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* bool complete */ 25:
                    message.complete = reader.bool();
                    break;
                case /* bool expired */ 31:
                    message.expired = reader.bool();
                    break;
                case /* int64 current_payout */ 4:
                    message.currentPayout = reader.int64().toBigInt();
                    break;
                case /* google.protobuf.Timestamp current_date */ 5:
                    message.currentDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.currentDate);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeadlineNub, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* bool complete = 25; */
        if (message.complete !== false)
            writer.tag(25, WireType.Varint).bool(message.complete);
        /* bool expired = 31; */
        if (message.expired !== false)
            writer.tag(31, WireType.Varint).bool(message.expired);
        /* int64 current_payout = 4; */
        if (message.currentPayout !== 0n)
            writer.tag(4, WireType.Varint).int64(message.currentPayout);
        /* google.protobuf.Timestamp current_date = 5; */
        if (message.currentDate)
            Timestamp.internalBinaryWrite(message.currentDate, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.DeadlineNub
 */
export const DeadlineNub = new DeadlineNub$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractEntity$Type extends MessageType<ContractEntity> {
    constructor() {
        super("communication.ContractEntity", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "invited_email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "invite_password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "worker", kind: "message", T: () => UserNubEntity },
            { no: 3, name: "buyer", kind: "message", T: () => UserNubEntity },
            { no: 4, name: "price", kind: "message", T: () => PriceEntity },
            { no: 5, name: "deadlines", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DeadlineEntity },
            { no: 15, name: "current_deadline_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "summary", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "stage", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "universal_lock", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "worker_approved", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "buyer_approved", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemEntity },
            { no: 10, name: "room_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "disputed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 17, name: "admin_requested", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 19, name: "figma_link", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ContractEntity>): ContractEntity {
        const message = { id: "", invitedEmail: "", invitePassword: "", deadlines: [], currentDeadlineId: "", title: "", summary: "", stage: 0, universalLock: false, workerApproved: false, buyerApproved: false, items: [], roomId: "", disputed: false, adminRequested: false, figmaLink: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractEntity>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractEntity): ContractEntity {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string invited_email */ 11:
                    message.invitedEmail = reader.string();
                    break;
                case /* string invite_password */ 18:
                    message.invitePassword = reader.string();
                    break;
                case /* communication.UserNubEntity worker */ 2:
                    message.worker = UserNubEntity.internalBinaryRead(reader, reader.uint32(), options, message.worker);
                    break;
                case /* communication.UserNubEntity buyer */ 3:
                    message.buyer = UserNubEntity.internalBinaryRead(reader, reader.uint32(), options, message.buyer);
                    break;
                case /* communication.PriceEntity price */ 4:
                    message.price = PriceEntity.internalBinaryRead(reader, reader.uint32(), options, message.price);
                    break;
                case /* repeated communication.DeadlineEntity deadlines */ 5:
                    message.deadlines.push(DeadlineEntity.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string current_deadline_id */ 15:
                    message.currentDeadlineId = reader.string();
                    break;
                case /* string title */ 8:
                    message.title = reader.string();
                    break;
                case /* string summary */ 6:
                    message.summary = reader.string();
                    break;
                case /* uint32 stage */ 9:
                    message.stage = reader.uint32();
                    break;
                case /* bool universal_lock */ 14:
                    message.universalLock = reader.bool();
                    break;
                case /* bool worker_approved */ 12:
                    message.workerApproved = reader.bool();
                    break;
                case /* bool buyer_approved */ 13:
                    message.buyerApproved = reader.bool();
                    break;
                case /* repeated communication.ItemEntity items */ 7:
                    message.items.push(ItemEntity.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string room_id */ 10:
                    message.roomId = reader.string();
                    break;
                case /* bool disputed */ 16:
                    message.disputed = reader.bool();
                    break;
                case /* bool admin_requested */ 17:
                    message.adminRequested = reader.bool();
                    break;
                case /* string figma_link */ 19:
                    message.figmaLink = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractEntity, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string invited_email = 11; */
        if (message.invitedEmail !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.invitedEmail);
        /* string invite_password = 18; */
        if (message.invitePassword !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.invitePassword);
        /* communication.UserNubEntity worker = 2; */
        if (message.worker)
            UserNubEntity.internalBinaryWrite(message.worker, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* communication.UserNubEntity buyer = 3; */
        if (message.buyer)
            UserNubEntity.internalBinaryWrite(message.buyer, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* communication.PriceEntity price = 4; */
        if (message.price)
            PriceEntity.internalBinaryWrite(message.price, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated communication.DeadlineEntity deadlines = 5; */
        for (let i = 0; i < message.deadlines.length; i++)
            DeadlineEntity.internalBinaryWrite(message.deadlines[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string current_deadline_id = 15; */
        if (message.currentDeadlineId !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.currentDeadlineId);
        /* string title = 8; */
        if (message.title !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.title);
        /* string summary = 6; */
        if (message.summary !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.summary);
        /* uint32 stage = 9; */
        if (message.stage !== 0)
            writer.tag(9, WireType.Varint).uint32(message.stage);
        /* bool universal_lock = 14; */
        if (message.universalLock !== false)
            writer.tag(14, WireType.Varint).bool(message.universalLock);
        /* bool worker_approved = 12; */
        if (message.workerApproved !== false)
            writer.tag(12, WireType.Varint).bool(message.workerApproved);
        /* bool buyer_approved = 13; */
        if (message.buyerApproved !== false)
            writer.tag(13, WireType.Varint).bool(message.buyerApproved);
        /* repeated communication.ItemEntity items = 7; */
        for (let i = 0; i < message.items.length; i++)
            ItemEntity.internalBinaryWrite(message.items[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* string room_id = 10; */
        if (message.roomId !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.roomId);
        /* bool disputed = 16; */
        if (message.disputed !== false)
            writer.tag(16, WireType.Varint).bool(message.disputed);
        /* bool admin_requested = 17; */
        if (message.adminRequested !== false)
            writer.tag(17, WireType.Varint).bool(message.adminRequested);
        /* string figma_link = 19; */
        if (message.figmaLink !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.figmaLink);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractEntity
 */
export const ContractEntity = new ContractEntity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractNub$Type extends MessageType<ContractNub> {
    constructor() {
        super("communication.ContractNub", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "summary", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "deadline", kind: "message", T: () => Timestamp },
            { no: 4, name: "price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "stage", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "user_type", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "disputed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "admin_requested", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "worker_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "buyer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "deadlines", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DeadlineNub }
        ]);
    }
    create(value?: PartialMessage<ContractNub>): ContractNub {
        const message = { id: "", title: "", summary: "", price: 0n, stage: 0, userType: 0, disputed: false, adminRequested: false, workerId: "", buyerId: "", deadlines: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractNub>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractNub): ContractNub {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string summary */ 12:
                    message.summary = reader.string();
                    break;
                case /* google.protobuf.Timestamp deadline */ 3:
                    message.deadline = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.deadline);
                    break;
                case /* int64 price */ 4:
                    message.price = reader.int64().toBigInt();
                    break;
                case /* uint32 stage */ 5:
                    message.stage = reader.uint32();
                    break;
                case /* uint32 user_type */ 6:
                    message.userType = reader.uint32();
                    break;
                case /* bool disputed */ 7:
                    message.disputed = reader.bool();
                    break;
                case /* bool admin_requested */ 8:
                    message.adminRequested = reader.bool();
                    break;
                case /* string worker_id */ 9:
                    message.workerId = reader.string();
                    break;
                case /* string buyer_id */ 10:
                    message.buyerId = reader.string();
                    break;
                case /* repeated communication.DeadlineNub deadlines */ 11:
                    message.deadlines.push(DeadlineNub.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractNub, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string summary = 12; */
        if (message.summary !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.summary);
        /* google.protobuf.Timestamp deadline = 3; */
        if (message.deadline)
            Timestamp.internalBinaryWrite(message.deadline, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 price = 4; */
        if (message.price !== 0n)
            writer.tag(4, WireType.Varint).int64(message.price);
        /* uint32 stage = 5; */
        if (message.stage !== 0)
            writer.tag(5, WireType.Varint).uint32(message.stage);
        /* uint32 user_type = 6; */
        if (message.userType !== 0)
            writer.tag(6, WireType.Varint).uint32(message.userType);
        /* bool disputed = 7; */
        if (message.disputed !== false)
            writer.tag(7, WireType.Varint).bool(message.disputed);
        /* bool admin_requested = 8; */
        if (message.adminRequested !== false)
            writer.tag(8, WireType.Varint).bool(message.adminRequested);
        /* string worker_id = 9; */
        if (message.workerId !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.workerId);
        /* string buyer_id = 10; */
        if (message.buyerId !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.buyerId);
        /* repeated communication.DeadlineNub deadlines = 11; */
        for (let i = 0; i < message.deadlines.length; i++)
            DeadlineNub.internalBinaryWrite(message.deadlines[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractNub
 */
export const ContractNub = new ContractNub$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InviteDataRequest$Type extends MessageType<InviteDataRequest> {
    constructor() {
        super("communication.InviteDataRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "secret", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InviteDataRequest>): InviteDataRequest {
        const message = { id: "", secret: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InviteDataRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InviteDataRequest): InviteDataRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string secret */ 2:
                    message.secret = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InviteDataRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string secret = 2; */
        if (message.secret !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.secret);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.InviteDataRequest
 */
export const InviteDataRequest = new InviteDataRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractInviteNub$Type extends MessageType<ContractInviteNub> {
    constructor() {
        super("communication.ContractInviteNub", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "invited_email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "invited_user_in_system", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "worker", kind: "message", T: () => UserNubEntity },
            { no: 3, name: "buyer", kind: "message", T: () => UserNubEntity },
            { no: 4, name: "price", kind: "message", T: () => PriceEntity },
            { no: 5, name: "deadlines", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DeadlineEntity },
            { no: 8, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "summary", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemEntity }
        ]);
    }
    create(value?: PartialMessage<ContractInviteNub>): ContractInviteNub {
        const message = { id: "", invitedEmail: "", invitedUserInSystem: false, deadlines: [], title: "", summary: "", items: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractInviteNub>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractInviteNub): ContractInviteNub {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string invited_email */ 11:
                    message.invitedEmail = reader.string();
                    break;
                case /* bool invited_user_in_system */ 12:
                    message.invitedUserInSystem = reader.bool();
                    break;
                case /* communication.UserNubEntity worker */ 2:
                    message.worker = UserNubEntity.internalBinaryRead(reader, reader.uint32(), options, message.worker);
                    break;
                case /* communication.UserNubEntity buyer */ 3:
                    message.buyer = UserNubEntity.internalBinaryRead(reader, reader.uint32(), options, message.buyer);
                    break;
                case /* communication.PriceEntity price */ 4:
                    message.price = PriceEntity.internalBinaryRead(reader, reader.uint32(), options, message.price);
                    break;
                case /* repeated communication.DeadlineEntity deadlines */ 5:
                    message.deadlines.push(DeadlineEntity.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string title */ 8:
                    message.title = reader.string();
                    break;
                case /* string summary */ 6:
                    message.summary = reader.string();
                    break;
                case /* repeated communication.ItemEntity items */ 7:
                    message.items.push(ItemEntity.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractInviteNub, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string invited_email = 11; */
        if (message.invitedEmail !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.invitedEmail);
        /* bool invited_user_in_system = 12; */
        if (message.invitedUserInSystem !== false)
            writer.tag(12, WireType.Varint).bool(message.invitedUserInSystem);
        /* communication.UserNubEntity worker = 2; */
        if (message.worker)
            UserNubEntity.internalBinaryWrite(message.worker, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* communication.UserNubEntity buyer = 3; */
        if (message.buyer)
            UserNubEntity.internalBinaryWrite(message.buyer, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* communication.PriceEntity price = 4; */
        if (message.price)
            PriceEntity.internalBinaryWrite(message.price, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated communication.DeadlineEntity deadlines = 5; */
        for (let i = 0; i < message.deadlines.length; i++)
            DeadlineEntity.internalBinaryWrite(message.deadlines[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string title = 8; */
        if (message.title !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.title);
        /* string summary = 6; */
        if (message.summary !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.summary);
        /* repeated communication.ItemEntity items = 7; */
        for (let i = 0; i < message.items.length; i++)
            ItemEntity.internalBinaryWrite(message.items[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractInviteNub
 */
export const ContractInviteNub = new ContractInviteNub$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractNubSet$Type extends MessageType<ContractNubSet> {
    constructor() {
        super("communication.ContractNubSet", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_nubs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ContractNub }
        ]);
    }
    create(value?: PartialMessage<ContractNubSet>): ContractNubSet {
        const message = { userId: "", contractNubs: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractNubSet>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractNubSet): ContractNubSet {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* repeated communication.ContractNub contract_nubs */ 2:
                    message.contractNubs.push(ContractNub.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractNubSet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* repeated communication.ContractNub contract_nubs = 2; */
        for (let i = 0; i < message.contractNubs.length; i++)
            ContractNub.internalBinaryWrite(message.contractNubs[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractNubSet
 */
export const ContractNubSet = new ContractNubSet$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserNubEntity$Type extends MessageType<UserNubEntity> {
    constructor() {
        super("communication.UserNubEntity", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "has_photo", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "photo_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "worker_mode_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "buyer_mode_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UserNubEntity>): UserNubEntity {
        const message = { id: "", username: "", hasPhoto: false, photoUrl: "", workerModeEnabled: false, buyerModeEnabled: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserNubEntity>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserNubEntity): UserNubEntity {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string username */ 2:
                    message.username = reader.string();
                    break;
                case /* bool has_photo */ 5:
                    message.hasPhoto = reader.bool();
                    break;
                case /* string photo_url */ 4:
                    message.photoUrl = reader.string();
                    break;
                case /* bool worker_mode_enabled */ 6:
                    message.workerModeEnabled = reader.bool();
                    break;
                case /* bool buyer_mode_enabled */ 7:
                    message.buyerModeEnabled = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserNubEntity, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string username = 2; */
        if (message.username !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.username);
        /* bool has_photo = 5; */
        if (message.hasPhoto !== false)
            writer.tag(5, WireType.Varint).bool(message.hasPhoto);
        /* string photo_url = 4; */
        if (message.photoUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.photoUrl);
        /* bool worker_mode_enabled = 6; */
        if (message.workerModeEnabled !== false)
            writer.tag(6, WireType.Varint).bool(message.workerModeEnabled);
        /* bool buyer_mode_enabled = 7; */
        if (message.buyerModeEnabled !== false)
            writer.tag(7, WireType.Varint).bool(message.buyerModeEnabled);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.UserNubEntity
 */
export const UserNubEntity = new UserNubEntity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ItemEntity$Type extends MessageType<ItemEntity> {
    constructor() {
        super("communication.ItemEntity", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "current_body", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "worker_body", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "buyer_body", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "awaiting_approval", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "awaiting_creation", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "awaiting_deletion", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 26, name: "worker_settled", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 27, name: "buyer_settled", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 28, name: "admin_settled", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 29, name: "figma_node_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ItemEntity>): ItemEntity {
        const message = { id: "", contractId: "", name: "", currentBody: "", workerBody: "", buyerBody: "", awaitingApproval: false, awaitingCreation: false, awaitingDeletion: false, workerSettled: 0, buyerSettled: 0, adminSettled: 0, figmaNodeIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ItemEntity>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemEntity): ItemEntity {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* string name */ 4:
                    message.name = reader.string();
                    break;
                case /* string current_body */ 5:
                    message.currentBody = reader.string();
                    break;
                case /* string worker_body */ 6:
                    message.workerBody = reader.string();
                    break;
                case /* string buyer_body */ 7:
                    message.buyerBody = reader.string();
                    break;
                case /* bool awaiting_approval */ 8:
                    message.awaitingApproval = reader.bool();
                    break;
                case /* bool awaiting_creation */ 9:
                    message.awaitingCreation = reader.bool();
                    break;
                case /* bool awaiting_deletion */ 10:
                    message.awaitingDeletion = reader.bool();
                    break;
                case /* uint32 worker_settled */ 26:
                    message.workerSettled = reader.uint32();
                    break;
                case /* uint32 buyer_settled */ 27:
                    message.buyerSettled = reader.uint32();
                    break;
                case /* uint32 admin_settled */ 28:
                    message.adminSettled = reader.uint32();
                    break;
                case /* repeated string figma_node_ids */ 29:
                    message.figmaNodeIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ItemEntity, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* string name = 4; */
        if (message.name !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.name);
        /* string current_body = 5; */
        if (message.currentBody !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.currentBody);
        /* string worker_body = 6; */
        if (message.workerBody !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.workerBody);
        /* string buyer_body = 7; */
        if (message.buyerBody !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.buyerBody);
        /* bool awaiting_approval = 8; */
        if (message.awaitingApproval !== false)
            writer.tag(8, WireType.Varint).bool(message.awaitingApproval);
        /* bool awaiting_creation = 9; */
        if (message.awaitingCreation !== false)
            writer.tag(9, WireType.Varint).bool(message.awaitingCreation);
        /* bool awaiting_deletion = 10; */
        if (message.awaitingDeletion !== false)
            writer.tag(10, WireType.Varint).bool(message.awaitingDeletion);
        /* uint32 worker_settled = 26; */
        if (message.workerSettled !== 0)
            writer.tag(26, WireType.Varint).uint32(message.workerSettled);
        /* uint32 buyer_settled = 27; */
        if (message.buyerSettled !== 0)
            writer.tag(27, WireType.Varint).uint32(message.buyerSettled);
        /* uint32 admin_settled = 28; */
        if (message.adminSettled !== 0)
            writer.tag(28, WireType.Varint).uint32(message.adminSettled);
        /* repeated string figma_node_ids = 29; */
        for (let i = 0; i < message.figmaNodeIds.length; i++)
            writer.tag(29, WireType.LengthDelimited).string(message.figmaNodeIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ItemEntity
 */
export const ItemEntity = new ItemEntity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ItemNub$Type extends MessageType<ItemNub> {
    constructor() {
        super("communication.ItemNub", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "proposer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ItemNub>): ItemNub {
        const message = { id: "", proposer: "", name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ItemNub>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemNub): ItemNub {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string proposer */ 3:
                    message.proposer = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ItemNub, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string proposer = 3; */
        if (message.proposer !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.proposer);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ItemNub
 */
export const ItemNub = new ItemNub$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractCreateRequest$Type extends MessageType<ContractCreateRequest> {
    constructor() {
        super("communication.ContractCreateRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "summary", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "invited_email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "role", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "price", kind: "message", T: () => PriceEntity },
            { no: 6, name: "deadlines", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DeadlineEntity },
            { no: 7, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemEntity }
        ]);
    }
    create(value?: PartialMessage<ContractCreateRequest>): ContractCreateRequest {
        const message = { userId: "", title: "", summary: "", invitedEmail: "", role: 0, deadlines: [], items: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractCreateRequest): ContractCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string summary */ 3:
                    message.summary = reader.string();
                    break;
                case /* string invited_email */ 8:
                    message.invitedEmail = reader.string();
                    break;
                case /* uint32 role */ 9:
                    message.role = reader.uint32();
                    break;
                case /* communication.PriceEntity price */ 5:
                    message.price = PriceEntity.internalBinaryRead(reader, reader.uint32(), options, message.price);
                    break;
                case /* repeated communication.DeadlineEntity deadlines */ 6:
                    message.deadlines.push(DeadlineEntity.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated communication.ItemEntity items */ 7:
                    message.items.push(ItemEntity.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string summary = 3; */
        if (message.summary !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.summary);
        /* string invited_email = 8; */
        if (message.invitedEmail !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.invitedEmail);
        /* uint32 role = 9; */
        if (message.role !== 0)
            writer.tag(9, WireType.Varint).uint32(message.role);
        /* communication.PriceEntity price = 5; */
        if (message.price)
            PriceEntity.internalBinaryWrite(message.price, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated communication.DeadlineEntity deadlines = 6; */
        for (let i = 0; i < message.deadlines.length; i++)
            DeadlineEntity.internalBinaryWrite(message.deadlines[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated communication.ItemEntity items = 7; */
        for (let i = 0; i < message.items.length; i++)
            ItemEntity.internalBinaryWrite(message.items[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractCreateRequest
 */
export const ContractCreateRequest = new ContractCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractFinishCreationRequest$Type extends MessageType<ContractFinishCreationRequest> {
    constructor() {
        super("communication.ContractFinishCreationRequest", [
            { no: 1, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ContractFinishCreationRequest>): ContractFinishCreationRequest {
        const message = { contractId: "", userId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractFinishCreationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractFinishCreationRequest): ContractFinishCreationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string contract_id */ 1:
                    message.contractId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractFinishCreationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string contract_id = 1; */
        if (message.contractId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.contractId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractFinishCreationRequest
 */
export const ContractFinishCreationRequest = new ContractFinishCreationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractUpdateRequest$Type extends MessageType<ContractUpdateRequest> {
    constructor() {
        super("communication.ContractUpdateRequest", [
            { no: 1, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "summary", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "invited_email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "role", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "price", kind: "message", T: () => PriceEntity },
            { no: 8, name: "deadlines", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DeadlineEntity },
            { no: 9, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemEntity }
        ]);
    }
    create(value?: PartialMessage<ContractUpdateRequest>): ContractUpdateRequest {
        const message = { contractId: "", userId: "", title: "", summary: "", invitedEmail: "", role: 0, deadlines: [], items: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractUpdateRequest): ContractUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string contract_id */ 1:
                    message.contractId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string summary */ 4:
                    message.summary = reader.string();
                    break;
                case /* string invited_email */ 5:
                    message.invitedEmail = reader.string();
                    break;
                case /* uint32 role */ 6:
                    message.role = reader.uint32();
                    break;
                case /* communication.PriceEntity price */ 7:
                    message.price = PriceEntity.internalBinaryRead(reader, reader.uint32(), options, message.price);
                    break;
                case /* repeated communication.DeadlineEntity deadlines */ 8:
                    message.deadlines.push(DeadlineEntity.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated communication.ItemEntity items */ 9:
                    message.items.push(ItemEntity.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string contract_id = 1; */
        if (message.contractId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.contractId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string summary = 4; */
        if (message.summary !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.summary);
        /* string invited_email = 5; */
        if (message.invitedEmail !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.invitedEmail);
        /* uint32 role = 6; */
        if (message.role !== 0)
            writer.tag(6, WireType.Varint).uint32(message.role);
        /* communication.PriceEntity price = 7; */
        if (message.price)
            PriceEntity.internalBinaryWrite(message.price, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* repeated communication.DeadlineEntity deadlines = 8; */
        for (let i = 0; i < message.deadlines.length; i++)
            DeadlineEntity.internalBinaryWrite(message.deadlines[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated communication.ItemEntity items = 9; */
        for (let i = 0; i < message.items.length; i++)
            ItemEntity.internalBinaryWrite(message.items[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractUpdateRequest
 */
export const ContractUpdateRequest = new ContractUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryByIdRequest$Type extends MessageType<QueryByIdRequest> {
    constructor() {
        super("communication.QueryByIdRequest", [
            { no: 1, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryByIdRequest>): QueryByIdRequest {
        const message = { contractId: "", userId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryByIdRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryByIdRequest): QueryByIdRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string contract_id */ 1:
                    message.contractId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryByIdRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string contract_id = 1; */
        if (message.contractId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.contractId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.QueryByIdRequest
 */
export const QueryByIdRequest = new QueryByIdRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractSuggestPrice$Type extends MessageType<ContractSuggestPrice> {
    constructor() {
        super("communication.ContractSuggestPrice", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "new_price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ContractSuggestPrice>): ContractSuggestPrice {
        const message = { userId: "", contractId: "", newPrice: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractSuggestPrice>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractSuggestPrice): ContractSuggestPrice {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* int64 new_price */ 3:
                    message.newPrice = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractSuggestPrice, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* int64 new_price = 3; */
        if (message.newPrice !== 0n)
            writer.tag(3, WireType.Varint).int64(message.newPrice);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractSuggestPrice
 */
export const ContractSuggestPrice = new ContractSuggestPrice$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractReactPrice$Type extends MessageType<ContractReactPrice> {
    constructor() {
        super("communication.ContractReactPrice", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ContractReactPrice>): ContractReactPrice {
        const message = { userId: "", contractId: "", messageId: "", status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractReactPrice>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractReactPrice): ContractReactPrice {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* string message_id */ 4:
                    message.messageId = reader.string();
                    break;
                case /* uint32 status */ 3:
                    message.status = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractReactPrice, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* string message_id = 4; */
        if (message.messageId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.messageId);
        /* uint32 status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).uint32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractReactPrice
 */
export const ContractReactPrice = new ContractReactPrice$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractSuggestDate$Type extends MessageType<ContractSuggestDate> {
    constructor() {
        super("communication.ContractSuggestDate", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "deadline_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "new_date", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<ContractSuggestDate>): ContractSuggestDate {
        const message = { userId: "", contractId: "", deadlineId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractSuggestDate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractSuggestDate): ContractSuggestDate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* string deadline_id */ 4:
                    message.deadlineId = reader.string();
                    break;
                case /* google.protobuf.Timestamp new_date */ 3:
                    message.newDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.newDate);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractSuggestDate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* string deadline_id = 4; */
        if (message.deadlineId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.deadlineId);
        /* google.protobuf.Timestamp new_date = 3; */
        if (message.newDate)
            Timestamp.internalBinaryWrite(message.newDate, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractSuggestDate
 */
export const ContractSuggestDate = new ContractSuggestDate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractSuggestPayout$Type extends MessageType<ContractSuggestPayout> {
    constructor() {
        super("communication.ContractSuggestPayout", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "deadline_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "new_payout", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ContractSuggestPayout>): ContractSuggestPayout {
        const message = { userId: "", contractId: "", deadlineId: "", newPayout: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractSuggestPayout>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractSuggestPayout): ContractSuggestPayout {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* string deadline_id */ 4:
                    message.deadlineId = reader.string();
                    break;
                case /* int64 new_payout */ 3:
                    message.newPayout = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractSuggestPayout, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* string deadline_id = 4; */
        if (message.deadlineId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.deadlineId);
        /* int64 new_payout = 3; */
        if (message.newPayout !== 0n)
            writer.tag(3, WireType.Varint).int64(message.newPayout);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractSuggestPayout
 */
export const ContractSuggestPayout = new ContractSuggestPayout$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractSuggestDeadlineItems$Type extends MessageType<ContractSuggestDeadlineItems> {
    constructor() {
        super("communication.ContractSuggestDeadlineItems", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "deadline_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "item_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ContractSuggestDeadlineItems>): ContractSuggestDeadlineItems {
        const message = { userId: "", contractId: "", deadlineId: "", itemIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractSuggestDeadlineItems>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractSuggestDeadlineItems): ContractSuggestDeadlineItems {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* string deadline_id */ 4:
                    message.deadlineId = reader.string();
                    break;
                case /* repeated string item_ids */ 3:
                    message.itemIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractSuggestDeadlineItems, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* string deadline_id = 4; */
        if (message.deadlineId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.deadlineId);
        /* repeated string item_ids = 3; */
        for (let i = 0; i < message.itemIds.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.itemIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractSuggestDeadlineItems
 */
export const ContractSuggestDeadlineItems = new ContractSuggestDeadlineItems$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractReactDeadlineItems$Type extends MessageType<ContractReactDeadlineItems> {
    constructor() {
        super("communication.ContractReactDeadlineItems", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "deadline_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ContractReactDeadlineItems>): ContractReactDeadlineItems {
        const message = { userId: "", contractId: "", messageId: "", deadlineId: "", status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractReactDeadlineItems>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractReactDeadlineItems): ContractReactDeadlineItems {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* string message_id */ 4:
                    message.messageId = reader.string();
                    break;
                case /* string deadline_id */ 5:
                    message.deadlineId = reader.string();
                    break;
                case /* uint32 status */ 3:
                    message.status = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractReactDeadlineItems, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* string message_id = 4; */
        if (message.messageId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.messageId);
        /* string deadline_id = 5; */
        if (message.deadlineId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.deadlineId);
        /* uint32 status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).uint32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractReactDeadlineItems
 */
export const ContractReactDeadlineItems = new ContractReactDeadlineItems$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractReactDate$Type extends MessageType<ContractReactDate> {
    constructor() {
        super("communication.ContractReactDate", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "deadline_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ContractReactDate>): ContractReactDate {
        const message = { userId: "", contractId: "", messageId: "", deadlineId: "", status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractReactDate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractReactDate): ContractReactDate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* string message_id */ 4:
                    message.messageId = reader.string();
                    break;
                case /* string deadline_id */ 5:
                    message.deadlineId = reader.string();
                    break;
                case /* uint32 status */ 3:
                    message.status = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractReactDate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* string message_id = 4; */
        if (message.messageId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.messageId);
        /* string deadline_id = 5; */
        if (message.deadlineId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.deadlineId);
        /* uint32 status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).uint32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractReactDate
 */
export const ContractReactDate = new ContractReactDate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractReactPayout$Type extends MessageType<ContractReactPayout> {
    constructor() {
        super("communication.ContractReactPayout", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "deadline_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ContractReactPayout>): ContractReactPayout {
        const message = { userId: "", contractId: "", messageId: "", deadlineId: "", status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractReactPayout>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractReactPayout): ContractReactPayout {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* string message_id */ 4:
                    message.messageId = reader.string();
                    break;
                case /* string deadline_id */ 5:
                    message.deadlineId = reader.string();
                    break;
                case /* uint32 status */ 3:
                    message.status = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractReactPayout, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* string message_id = 4; */
        if (message.messageId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.messageId);
        /* string deadline_id = 5; */
        if (message.deadlineId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.deadlineId);
        /* uint32 status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).uint32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractReactPayout
 */
export const ContractReactPayout = new ContractReactPayout$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractSuggestItem$Type extends MessageType<ContractSuggestItem> {
    constructor() {
        super("communication.ContractSuggestItem", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "new_body", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ContractSuggestItem>): ContractSuggestItem {
        const message = { userId: "", contractId: "", itemId: "", newBody: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractSuggestItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractSuggestItem): ContractSuggestItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* string item_id */ 4:
                    message.itemId = reader.string();
                    break;
                case /* string new_body */ 3:
                    message.newBody = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractSuggestItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* string item_id = 4; */
        if (message.itemId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.itemId);
        /* string new_body = 3; */
        if (message.newBody !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.newBody);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractSuggestItem
 */
export const ContractSuggestItem = new ContractSuggestItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractReactItem$Type extends MessageType<ContractReactItem> {
    constructor() {
        super("communication.ContractReactItem", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ContractReactItem>): ContractReactItem {
        const message = { userId: "", contractId: "", messageId: "", itemId: "", status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractReactItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractReactItem): ContractReactItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* string message_id */ 4:
                    message.messageId = reader.string();
                    break;
                case /* string item_id */ 5:
                    message.itemId = reader.string();
                    break;
                case /* uint32 status */ 3:
                    message.status = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractReactItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* string message_id = 4; */
        if (message.messageId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.messageId);
        /* string item_id = 5; */
        if (message.itemId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.itemId);
        /* uint32 status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).uint32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractReactItem
 */
export const ContractReactItem = new ContractReactItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractSuggestAddItem$Type extends MessageType<ContractSuggestAddItem> {
    constructor() {
        super("communication.ContractSuggestAddItem", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "item", kind: "message", T: () => ItemEntity }
        ]);
    }
    create(value?: PartialMessage<ContractSuggestAddItem>): ContractSuggestAddItem {
        const message = { userId: "", contractId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractSuggestAddItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractSuggestAddItem): ContractSuggestAddItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* communication.ItemEntity item */ 3:
                    message.item = ItemEntity.internalBinaryRead(reader, reader.uint32(), options, message.item);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractSuggestAddItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* communication.ItemEntity item = 3; */
        if (message.item)
            ItemEntity.internalBinaryWrite(message.item, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractSuggestAddItem
 */
export const ContractSuggestAddItem = new ContractSuggestAddItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractReactAddItem$Type extends MessageType<ContractReactAddItem> {
    constructor() {
        super("communication.ContractReactAddItem", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ContractReactAddItem>): ContractReactAddItem {
        const message = { userId: "", contractId: "", messageId: "", itemId: "", status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractReactAddItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractReactAddItem): ContractReactAddItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* string message_id */ 4:
                    message.messageId = reader.string();
                    break;
                case /* string item_id */ 3:
                    message.itemId = reader.string();
                    break;
                case /* uint32 status */ 5:
                    message.status = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractReactAddItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* string message_id = 4; */
        if (message.messageId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.messageId);
        /* string item_id = 3; */
        if (message.itemId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.itemId);
        /* uint32 status = 5; */
        if (message.status !== 0)
            writer.tag(5, WireType.Varint).uint32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractReactAddItem
 */
export const ContractReactAddItem = new ContractReactAddItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractSuggestDelItem$Type extends MessageType<ContractSuggestDelItem> {
    constructor() {
        super("communication.ContractSuggestDelItem", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "item", kind: "message", T: () => ItemEntity }
        ]);
    }
    create(value?: PartialMessage<ContractSuggestDelItem>): ContractSuggestDelItem {
        const message = { userId: "", contractId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractSuggestDelItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractSuggestDelItem): ContractSuggestDelItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* communication.ItemEntity item */ 3:
                    message.item = ItemEntity.internalBinaryRead(reader, reader.uint32(), options, message.item);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractSuggestDelItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* communication.ItemEntity item = 3; */
        if (message.item)
            ItemEntity.internalBinaryWrite(message.item, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractSuggestDelItem
 */
export const ContractSuggestDelItem = new ContractSuggestDelItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractReactDelItem$Type extends MessageType<ContractReactDelItem> {
    constructor() {
        super("communication.ContractReactDelItem", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ContractReactDelItem>): ContractReactDelItem {
        const message = { userId: "", contractId: "", messageId: "", itemId: "", status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractReactDelItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractReactDelItem): ContractReactDelItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* string message_id */ 4:
                    message.messageId = reader.string();
                    break;
                case /* string item_id */ 3:
                    message.itemId = reader.string();
                    break;
                case /* uint32 status */ 5:
                    message.status = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractReactDelItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* string message_id = 4; */
        if (message.messageId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.messageId);
        /* string item_id = 3; */
        if (message.itemId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.itemId);
        /* uint32 status = 5; */
        if (message.status !== 0)
            writer.tag(5, WireType.Varint).uint32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractReactDelItem
 */
export const ContractReactDelItem = new ContractReactDelItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractSuggestAddDeadline$Type extends MessageType<ContractSuggestAddDeadline> {
    constructor() {
        super("communication.ContractSuggestAddDeadline", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "deadline", kind: "message", T: () => DeadlineEntity }
        ]);
    }
    create(value?: PartialMessage<ContractSuggestAddDeadline>): ContractSuggestAddDeadline {
        const message = { userId: "", contractId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractSuggestAddDeadline>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractSuggestAddDeadline): ContractSuggestAddDeadline {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* communication.DeadlineEntity deadline */ 3:
                    message.deadline = DeadlineEntity.internalBinaryRead(reader, reader.uint32(), options, message.deadline);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractSuggestAddDeadline, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* communication.DeadlineEntity deadline = 3; */
        if (message.deadline)
            DeadlineEntity.internalBinaryWrite(message.deadline, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractSuggestAddDeadline
 */
export const ContractSuggestAddDeadline = new ContractSuggestAddDeadline$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractReactAddDeadline$Type extends MessageType<ContractReactAddDeadline> {
    constructor() {
        super("communication.ContractReactAddDeadline", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "deadline_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ContractReactAddDeadline>): ContractReactAddDeadline {
        const message = { userId: "", contractId: "", messageId: "", deadlineId: "", status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractReactAddDeadline>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractReactAddDeadline): ContractReactAddDeadline {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* string message_id */ 4:
                    message.messageId = reader.string();
                    break;
                case /* string deadline_id */ 3:
                    message.deadlineId = reader.string();
                    break;
                case /* uint32 status */ 5:
                    message.status = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractReactAddDeadline, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* string message_id = 4; */
        if (message.messageId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.messageId);
        /* string deadline_id = 3; */
        if (message.deadlineId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.deadlineId);
        /* uint32 status = 5; */
        if (message.status !== 0)
            writer.tag(5, WireType.Varint).uint32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractReactAddDeadline
 */
export const ContractReactAddDeadline = new ContractReactAddDeadline$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractSuggestDelDeadline$Type extends MessageType<ContractSuggestDelDeadline> {
    constructor() {
        super("communication.ContractSuggestDelDeadline", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "deadline", kind: "message", T: () => DeadlineEntity }
        ]);
    }
    create(value?: PartialMessage<ContractSuggestDelDeadline>): ContractSuggestDelDeadline {
        const message = { userId: "", contractId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractSuggestDelDeadline>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractSuggestDelDeadline): ContractSuggestDelDeadline {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* communication.DeadlineEntity deadline */ 3:
                    message.deadline = DeadlineEntity.internalBinaryRead(reader, reader.uint32(), options, message.deadline);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractSuggestDelDeadline, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* communication.DeadlineEntity deadline = 3; */
        if (message.deadline)
            DeadlineEntity.internalBinaryWrite(message.deadline, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractSuggestDelDeadline
 */
export const ContractSuggestDelDeadline = new ContractSuggestDelDeadline$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractReactDelDeadline$Type extends MessageType<ContractReactDelDeadline> {
    constructor() {
        super("communication.ContractReactDelDeadline", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "deadline_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ContractReactDelDeadline>): ContractReactDelDeadline {
        const message = { userId: "", contractId: "", messageId: "", deadlineId: "", status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractReactDelDeadline>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractReactDelDeadline): ContractReactDelDeadline {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* string message_id */ 4:
                    message.messageId = reader.string();
                    break;
                case /* string deadline_id */ 3:
                    message.deadlineId = reader.string();
                    break;
                case /* uint32 status */ 5:
                    message.status = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractReactDelDeadline, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* string message_id = 4; */
        if (message.messageId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.messageId);
        /* string deadline_id = 3; */
        if (message.deadlineId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.deadlineId);
        /* uint32 status = 5; */
        if (message.status !== 0)
            writer.tag(5, WireType.Varint).uint32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractReactDelDeadline
 */
export const ContractReactDelDeadline = new ContractReactDelDeadline$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractResponse$Type extends MessageType<ContractResponse> {
    constructor() {
        super("communication.ContractResponse", [
            { no: 2, name: "contract", kind: "message", T: () => ContractEntity },
            { no: 3, name: "role", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ContractResponse>): ContractResponse {
        const message = { role: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractResponse): ContractResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* communication.ContractEntity contract */ 2:
                    message.contract = ContractEntity.internalBinaryRead(reader, reader.uint32(), options, message.contract);
                    break;
                case /* uint32 role */ 3:
                    message.role = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* communication.ContractEntity contract = 2; */
        if (message.contract)
            ContractEntity.internalBinaryWrite(message.contract, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint32 role = 3; */
        if (message.role !== 0)
            writer.tag(3, WireType.Varint).uint32(message.role);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractResponse
 */
export const ContractResponse = new ContractResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryByUserRequest$Type extends MessageType<QueryByUserRequest> {
    constructor() {
        super("communication.QueryByUserRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryByUserRequest>): QueryByUserRequest {
        const message = { userId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryByUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryByUserRequest): QueryByUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryByUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.QueryByUserRequest
 */
export const QueryByUserRequest = new QueryByUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClaimContractRequest$Type extends MessageType<ClaimContractRequest> {
    constructor() {
        super("communication.ClaimContractRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ClaimContractRequest>): ClaimContractRequest {
        const message = { userId: "", contractId: "", password: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClaimContractRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClaimContractRequest): ClaimContractRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* string password */ 3:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClaimContractRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* string password = 3; */
        if (message.password !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ClaimContractRequest
 */
export const ClaimContractRequest = new ClaimContractRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignContractRequest$Type extends MessageType<SignContractRequest> {
    constructor() {
        super("communication.SignContractRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SignContractRequest>): SignContractRequest {
        const message = { userId: "", contractId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignContractRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignContractRequest): SignContractRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignContractRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.SignContractRequest
 */
export const SignContractRequest = new SignContractRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettleContractRequest$Type extends MessageType<SettleContractRequest> {
    constructor() {
        super("communication.SettleContractRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettleContractRequest>): SettleContractRequest {
        const message = { userId: "", contractId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SettleContractRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettleContractRequest): SettleContractRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettleContractRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.SettleContractRequest
 */
export const SettleContractRequest = new SettleContractRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FinishDeadlineRequest$Type extends MessageType<FinishDeadlineRequest> {
    constructor() {
        super("communication.FinishDeadlineRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "deadline_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FinishDeadlineRequest>): FinishDeadlineRequest {
        const message = { userId: "", contractId: "", deadlineId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FinishDeadlineRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FinishDeadlineRequest): FinishDeadlineRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* string deadline_id */ 3:
                    message.deadlineId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FinishDeadlineRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* string deadline_id = 3; */
        if (message.deadlineId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.deadlineId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.FinishDeadlineRequest
 */
export const FinishDeadlineRequest = new FinishDeadlineRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConfirmDeadlineRequest$Type extends MessageType<ConfirmDeadlineRequest> {
    constructor() {
        super("communication.ConfirmDeadlineRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "deadline_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ConfirmDeadlineRequest>): ConfirmDeadlineRequest {
        const message = { userId: "", contractId: "", deadlineId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ConfirmDeadlineRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConfirmDeadlineRequest): ConfirmDeadlineRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* string deadline_id */ 3:
                    message.deadlineId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConfirmDeadlineRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* string deadline_id = 3; */
        if (message.deadlineId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.deadlineId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ConfirmDeadlineRequest
 */
export const ConfirmDeadlineRequest = new ConfirmDeadlineRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UndoDeadlineRequest$Type extends MessageType<UndoDeadlineRequest> {
    constructor() {
        super("communication.UndoDeadlineRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "deadline_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UndoDeadlineRequest>): UndoDeadlineRequest {
        const message = { userId: "", contractId: "", deadlineId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UndoDeadlineRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UndoDeadlineRequest): UndoDeadlineRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* string deadline_id */ 3:
                    message.deadlineId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UndoDeadlineRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* string deadline_id = 3; */
        if (message.deadlineId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.deadlineId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.UndoDeadlineRequest
 */
export const UndoDeadlineRequest = new UndoDeadlineRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractAdminSupport$Type extends MessageType<ContractAdminSupport> {
    constructor() {
        super("communication.ContractAdminSupport", [
            { no: 1, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ContractAdminSupport>): ContractAdminSupport {
        const message = { contractId: "", userId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractAdminSupport>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractAdminSupport): ContractAdminSupport {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string contract_id */ 1:
                    message.contractId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractAdminSupport, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string contract_id = 1; */
        if (message.contractId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.contractId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractAdminSupport
 */
export const ContractAdminSupport = new ContractAdminSupport$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractToggleLockRequest$Type extends MessageType<ContractToggleLockRequest> {
    constructor() {
        super("communication.ContractToggleLockRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "contract_lock", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ContractToggleLockRequest>): ContractToggleLockRequest {
        const message = { userId: "", contractId: "", contractLock: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractToggleLockRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractToggleLockRequest): ContractToggleLockRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* bool contract_lock */ 3:
                    message.contractLock = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractToggleLockRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* bool contract_lock = 3; */
        if (message.contractLock !== false)
            writer.tag(3, WireType.Varint).bool(message.contractLock);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractToggleLockRequest
 */
export const ContractToggleLockRequest = new ContractToggleLockRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractReactLockRequest$Type extends MessageType<ContractReactLockRequest> {
    constructor() {
        super("communication.ContractReactLockRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ContractReactLockRequest>): ContractReactLockRequest {
        const message = { userId: "", contractId: "", messageId: "", status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractReactLockRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractReactLockRequest): ContractReactLockRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* string message_id */ 3:
                    message.messageId = reader.string();
                    break;
                case /* uint32 status */ 4:
                    message.status = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractReactLockRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* string message_id = 3; */
        if (message.messageId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.messageId);
        /* uint32 status = 4; */
        if (message.status !== 0)
            writer.tag(4, WireType.Varint).uint32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractReactLockRequest
 */
export const ContractReactLockRequest = new ContractReactLockRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractSettleItemRequest$Type extends MessageType<ContractSettleItemRequest> {
    constructor() {
        super("communication.ContractSettleItemRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "deadline_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "new_state", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ContractSettleItemRequest>): ContractSettleItemRequest {
        const message = { userId: "", deadlineId: "", contractId: "", itemId: "", newState: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractSettleItemRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractSettleItemRequest): ContractSettleItemRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string deadline_id */ 2:
                    message.deadlineId = reader.string();
                    break;
                case /* string contract_id */ 3:
                    message.contractId = reader.string();
                    break;
                case /* string item_id */ 4:
                    message.itemId = reader.string();
                    break;
                case /* uint32 new_state */ 5:
                    message.newState = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractSettleItemRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string deadline_id = 2; */
        if (message.deadlineId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.deadlineId);
        /* string contract_id = 3; */
        if (message.contractId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.contractId);
        /* string item_id = 4; */
        if (message.itemId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.itemId);
        /* uint32 new_state = 5; */
        if (message.newState !== 0)
            writer.tag(5, WireType.Varint).uint32(message.newState);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractSettleItemRequest
 */
export const ContractSettleItemRequest = new ContractSettleItemRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractDeleteDraftRequest$Type extends MessageType<ContractDeleteDraftRequest> {
    constructor() {
        super("communication.ContractDeleteDraftRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ContractDeleteDraftRequest>): ContractDeleteDraftRequest {
        const message = { userId: "", contractId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractDeleteDraftRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractDeleteDraftRequest): ContractDeleteDraftRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractDeleteDraftRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractDeleteDraftRequest
 */
export const ContractDeleteDraftRequest = new ContractDeleteDraftRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NullResponse$Type extends MessageType<NullResponse> {
    constructor() {
        super("communication.NullResponse", []);
    }
    create(value?: PartialMessage<NullResponse>): NullResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NullResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NullResponse): NullResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: NullResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.NullResponse
 */
export const NullResponse = new NullResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractEditResponse$Type extends MessageType<ContractEditResponse> {
    constructor() {
        super("communication.ContractEditResponse", []);
    }
    create(value?: PartialMessage<ContractEditResponse>): ContractEditResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractEditResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractEditResponse): ContractEditResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ContractEditResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractEditResponse
 */
export const ContractEditResponse = new ContractEditResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EmailChangeRequest$Type extends MessageType<EmailChangeRequest> {
    constructor() {
        super("communication.EmailChangeRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "new_email", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EmailChangeRequest>): EmailChangeRequest {
        const message = { userId: "", contractId: "", newEmail: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EmailChangeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EmailChangeRequest): EmailChangeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* string new_email */ 3:
                    message.newEmail = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EmailChangeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* string new_email = 3; */
        if (message.newEmail !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.newEmail);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.EmailChangeRequest
 */
export const EmailChangeRequest = new EmailChangeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EmailResendRequest$Type extends MessageType<EmailResendRequest> {
    constructor() {
        super("communication.EmailResendRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EmailResendRequest>): EmailResendRequest {
        const message = { userId: "", contractId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EmailResendRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EmailResendRequest): EmailResendRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EmailResendRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.EmailResendRequest
 */
export const EmailResendRequest = new EmailResendRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FigmaLinkRequest$Type extends MessageType<FigmaLinkRequest> {
    constructor() {
        super("communication.FigmaLinkRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "figma_link", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FigmaLinkRequest>): FigmaLinkRequest {
        const message = { userId: "", contractId: "", figmaLink: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FigmaLinkRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FigmaLinkRequest): FigmaLinkRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* string figma_link */ 3:
                    message.figmaLink = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FigmaLinkRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* string figma_link = 3; */
        if (message.figmaLink !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.figmaLink);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.FigmaLinkRequest
 */
export const FigmaLinkRequest = new FigmaLinkRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FigmaItemRequest$Type extends MessageType<FigmaItemRequest> {
    constructor() {
        super("communication.FigmaItemRequest", [
            { no: 1, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_secret", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "node_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FigmaItemRequest>): FigmaItemRequest {
        const message = { contractId: "", contractSecret: "", itemId: "", nodeIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FigmaItemRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FigmaItemRequest): FigmaItemRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string contract_id */ 1:
                    message.contractId = reader.string();
                    break;
                case /* string contract_secret */ 2:
                    message.contractSecret = reader.string();
                    break;
                case /* string item_id */ 3:
                    message.itemId = reader.string();
                    break;
                case /* repeated string node_ids */ 4:
                    message.nodeIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FigmaItemRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string contract_id = 1; */
        if (message.contractId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.contractId);
        /* string contract_secret = 2; */
        if (message.contractSecret !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractSecret);
        /* string item_id = 3; */
        if (message.itemId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.itemId);
        /* repeated string node_ids = 4; */
        for (let i = 0; i < message.nodeIds.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.nodeIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.FigmaItemRequest
 */
export const FigmaItemRequest = new FigmaItemRequest$Type();
/**
 * @generated ServiceType for protobuf service communication.Contract
 */
export const Contract = new ServiceType("communication.Contract", [
    { name: "Create", options: {}, I: ContractCreateRequest, O: ContractResponse },
    { name: "DeleteDraft", options: {}, I: ContractDeleteDraftRequest, O: ContractEditResponse },
    { name: "UpdateDraft", options: {}, I: ContractUpdateRequest, O: ContractResponse },
    { name: "FinishCreation", options: {}, I: ContractFinishCreationRequest, O: ContractResponse },
    { name: "ChangeInviteEmail", options: {}, I: EmailChangeRequest, O: NullResponse },
    { name: "ResendInviteEmail", options: {}, I: EmailResendRequest, O: NullResponse },
    { name: "InviteQuery", options: {}, I: InviteDataRequest, O: ContractInviteNub },
    { name: "Claim", options: {}, I: ClaimContractRequest, O: ContractResponse },
    { name: "Sign", options: {}, I: SignContractRequest, O: ContractResponse },
    { name: "Settle", options: {}, I: SettleContractRequest, O: ContractResponse },
    { name: "QueryById", options: {}, I: QueryByIdRequest, O: ContractResponse },
    { name: "QueryByUser", options: {}, I: QueryByUserRequest, O: ContractNubSet },
    { name: "QueryByAdmin", options: {}, I: QueryByUserRequest, O: ContractNubSet },
    { name: "SuggestPrice", options: {}, I: ContractSuggestPrice, O: ContractEditResponse },
    { name: "ReactPrice", options: {}, I: ContractReactPrice, O: ContractEditResponse },
    { name: "SuggestDate", options: {}, I: ContractSuggestDate, O: ContractEditResponse },
    { name: "ReactDate", options: {}, I: ContractReactDate, O: ContractEditResponse },
    { name: "SuggestPayout", options: {}, I: ContractSuggestPayout, O: ContractEditResponse },
    { name: "ReactPayout", options: {}, I: ContractReactPayout, O: ContractEditResponse },
    { name: "SuggestItem", options: {}, I: ContractSuggestItem, O: ContractEditResponse },
    { name: "ReactItem", options: {}, I: ContractReactItem, O: ContractEditResponse },
    { name: "SuggestAddItem", options: {}, I: ContractSuggestAddItem, O: ItemEntity },
    { name: "ReactAddItem", options: {}, I: ContractReactAddItem, O: ContractEditResponse },
    { name: "SuggestDeleteItem", options: {}, I: ContractSuggestDelItem, O: ContractEditResponse },
    { name: "ReactDeleteItem", options: {}, I: ContractReactDelItem, O: ContractEditResponse },
    { name: "SuggestAddDeadline", options: {}, I: ContractSuggestAddDeadline, O: DeadlineEntity },
    { name: "ReactAddDeadline", options: {}, I: ContractReactAddDeadline, O: ContractEditResponse },
    { name: "SuggestDeleteDeadline", options: {}, I: ContractSuggestDelDeadline, O: ContractEditResponse },
    { name: "ReactDeleteDeadline", options: {}, I: ContractReactDelDeadline, O: ContractEditResponse },
    { name: "SuggestDeadlineItems", options: {}, I: ContractSuggestDeadlineItems, O: ContractEditResponse },
    { name: "ReactDeadlineItems", options: {}, I: ContractReactDeadlineItems, O: ContractEditResponse },
    { name: "ToggleLock", options: {}, I: ContractToggleLockRequest, O: ContractEditResponse },
    { name: "ReactLock", options: {}, I: ContractReactLockRequest, O: ContractEditResponse },
    { name: "SettleItem", options: {}, I: ContractSettleItemRequest, O: ContractEditResponse },
    { name: "RequestAdmin", options: {}, I: ContractAdminSupport, O: NullResponse },
    { name: "ResolveAdmin", options: {}, I: ContractAdminSupport, O: NullResponse },
    { name: "FinishDeadline", options: {}, I: FinishDeadlineRequest, O: NullResponse },
    { name: "ConfirmDeadline", options: {}, I: ConfirmDeadlineRequest, O: NullResponse },
    { name: "UndoDeadline", options: {}, I: UndoDeadlineRequest, O: NullResponse },
    { name: "SetFigmaLink", options: {}, I: FigmaLinkRequest, O: ContractEditResponse },
    { name: "SetItemFigmaNodes", options: {}, I: FigmaItemRequest, O: ContractEditResponse }
]);
