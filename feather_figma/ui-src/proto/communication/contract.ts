// @generated by protobuf-ts 2.8.2 with parameter generate_dependencies
// @generated from protobuf file "communication/contract.proto" (package "communication", syntax proto3)
// tslint:disable
import { QueryByUserRequest } from "./requests";
import { QueryByIdRequest } from "./requests";
import { NullResponse } from "./generic";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { DeadlineNub } from "./deadline";
import { Timestamp } from "../google/protobuf/timestamp";
import { ItemEntity } from "./item";
import { DeadlineEntity } from "./deadline";
import { UserNubEntity } from "./user";
/**
 * @generated from protobuf message communication.PriceEntity
 */
export interface PriceEntity {
    /**
     * @generated from protobuf field: int64 current = 1;
     */
    current: bigint;
    /**
     * @generated from protobuf field: int64 buyer = 2;
     */
    buyer: bigint;
    /**
     * @generated from protobuf field: int64 worker = 3;
     */
    worker: bigint;
    /**
     * @generated from protobuf field: bool awaiting_approval = 4;
     */
    awaitingApproval: boolean;
    /**
     * @generated from protobuf field: string proposer_id = 5;
     */
    proposerId: string;
}
/**
 * @generated from protobuf message communication.ContractEntity
 */
export interface ContractEntity {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string invited_email = 11;
     */
    invitedEmail: string;
    /**
     * @generated from protobuf field: string invite_password = 18;
     */
    invitePassword: string;
    /**
     * @generated from protobuf field: bool link_share = 22;
     */
    linkShare: boolean;
    /**
     * @generated from protobuf field: communication.UserNubEntity worker = 2;
     */
    worker?: UserNubEntity;
    /**
     * @generated from protobuf field: communication.UserNubEntity buyer = 3;
     */
    buyer?: UserNubEntity;
    /**
     * @generated from protobuf field: communication.PriceEntity price = 4;
     */
    price?: PriceEntity;
    /**
     * @generated from protobuf field: repeated communication.DeadlineEntity deadlines = 5;
     */
    deadlines: DeadlineEntity[];
    /**
     * @generated from protobuf field: string current_deadline_id = 15;
     */
    currentDeadlineId: string;
    /**
     * @generated from protobuf field: string title = 8;
     */
    title: string;
    /**
     * @generated from protobuf field: string summary = 6;
     */
    summary: string;
    /**
     * @generated from protobuf field: uint32 stage = 9;
     */
    stage: number;
    /**
     * @generated from protobuf field: bool universal_lock = 14;
     */
    universalLock: boolean;
    /**
     * @generated from protobuf field: bool worker_approved = 12;
     */
    workerApproved: boolean;
    /**
     * @generated from protobuf field: bool buyer_approved = 13;
     */
    buyerApproved: boolean;
    /**
     * @generated from protobuf field: repeated communication.ItemEntity items = 7;
     */
    items: ItemEntity[];
    /**
     * @generated from protobuf field: string room_id = 10;
     */
    roomId: string;
    /**
     * @generated from protobuf field: bool disputed = 16;
     */
    disputed: boolean;
    /**
     * @generated from protobuf field: bool admin_requested = 17;
     */
    adminRequested: boolean;
    /**
     * @generated from protobuf field: string figma_link = 19;
     */
    figmaLink: string;
    /**
     * @generated from protobuf field: string figma_file_key = 21;
     */
    figmaFileKey: string;
    /**
     * @generated from protobuf field: bool figma_connected = 20;
     */
    figmaConnected: boolean;
    /**
     * @generated from protobuf field: bool free_status = 23;
     */
    freeStatus: boolean;
}
/**
 * @generated from protobuf message communication.ContractNub
 */
export interface ContractNub {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string summary = 12;
     */
    summary: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp deadline = 3;
     */
    deadline?: Timestamp;
    /**
     * @generated from protobuf field: int64 price = 4;
     */
    price: bigint;
    /**
     * @generated from protobuf field: uint32 stage = 5;
     */
    stage: number;
    /**
     * @generated from protobuf field: uint32 user_type = 6;
     */
    userType: number;
    /**
     * @generated from protobuf field: bool disputed = 7;
     */
    disputed: boolean;
    /**
     * @generated from protobuf field: bool admin_requested = 8;
     */
    adminRequested: boolean;
    /**
     * @generated from protobuf field: string worker_id = 9;
     */
    workerId: string;
    /**
     * @generated from protobuf field: string buyer_id = 10;
     */
    buyerId: string;
    /**
     * @generated from protobuf field: string figma_link = 13;
     */
    figmaLink: string;
    /**
     * @generated from protobuf field: bool figma_connected = 14;
     */
    figmaConnected: boolean;
    /**
     * @generated from protobuf field: repeated communication.DeadlineNub deadlines = 11;
     */
    deadlines: DeadlineNub[];
}
/**
 * @generated from protobuf message communication.InviteDataRequest
 */
export interface InviteDataRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string secret = 2;
     */
    secret: string;
}
/**
 * @generated from protobuf message communication.ContractInviteNub
 */
export interface ContractInviteNub {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string invited_email = 11;
     */
    invitedEmail: string;
    /**
     * @generated from protobuf field: bool link_share = 13;
     */
    linkShare: boolean;
    /**
     * @generated from protobuf field: bool invited_user_in_system = 12;
     */
    invitedUserInSystem: boolean;
    /**
     * @generated from protobuf field: communication.UserNubEntity worker = 2;
     */
    worker?: UserNubEntity;
    /**
     * @generated from protobuf field: communication.UserNubEntity buyer = 3;
     */
    buyer?: UserNubEntity;
    /**
     * @generated from protobuf field: communication.PriceEntity price = 4;
     */
    price?: PriceEntity;
    /**
     * @generated from protobuf field: repeated communication.DeadlineEntity deadlines = 5;
     */
    deadlines: DeadlineEntity[];
    /**
     * @generated from protobuf field: string title = 8;
     */
    title: string;
    /**
     * @generated from protobuf field: string summary = 6;
     */
    summary: string;
    /**
     * @generated from protobuf field: repeated communication.ItemEntity items = 7;
     */
    items: ItemEntity[];
}
/**
 * @generated from protobuf message communication.ContractNubSet
 */
export interface ContractNubSet {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: repeated communication.ContractNub contract_nubs = 2;
     */
    contractNubs: ContractNub[];
}
/**
 * @generated from protobuf message communication.ContractCreateRequest
 */
export interface ContractCreateRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string summary = 3;
     */
    summary: string;
    /**
     * @generated from protobuf field: string invited_email = 8;
     */
    invitedEmail: string;
    /**
     * @generated from protobuf field: uint32 role = 9;
     */
    role: number;
    /**
     * @generated from protobuf field: communication.PriceEntity price = 5;
     */
    price?: PriceEntity;
    /**
     * @generated from protobuf field: repeated communication.DeadlineEntity deadlines = 6;
     */
    deadlines: DeadlineEntity[];
    /**
     * @generated from protobuf field: repeated communication.ItemEntity items = 7;
     */
    items: ItemEntity[];
}
/**
 * @generated from protobuf message communication.ContractFinishCreationRequest
 */
export interface ContractFinishCreationRequest {
    /**
     * @generated from protobuf field: string contract_id = 1;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
}
/**
 * @generated from protobuf message communication.ContractUpdateRequest
 */
export interface ContractUpdateRequest {
    /**
     * @generated from protobuf field: string contract_id = 1;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string summary = 4;
     */
    summary: string;
    /**
     * @generated from protobuf field: string invited_email = 5;
     */
    invitedEmail: string;
    /**
     * @generated from protobuf field: bool link_share = 10;
     */
    linkShare: boolean;
    /**
     * @generated from protobuf field: uint32 role = 6;
     */
    role: number;
    /**
     * @generated from protobuf field: communication.PriceEntity price = 7;
     */
    price?: PriceEntity;
    /**
     * @generated from protobuf field: repeated communication.DeadlineEntity deadlines = 8;
     */
    deadlines: DeadlineEntity[];
    /**
     * @generated from protobuf field: repeated communication.ItemEntity items = 9;
     */
    items: ItemEntity[];
}
/**
 * @generated from protobuf message communication.ContractResponse
 */
export interface ContractResponse {
    /**
     * @generated from protobuf field: communication.ContractEntity contract = 2;
     */
    contract?: ContractEntity;
    /**
     * @generated from protobuf field: uint32 role = 3;
     */
    role: number;
}
/**
 * @generated from protobuf message communication.ClaimContractRequest
 */
export interface ClaimContractRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string password = 3;
     */
    password: string;
}
/**
 * @generated from protobuf message communication.SignContractRequest
 */
export interface SignContractRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
}
/**
 * @generated from protobuf message communication.SettleContractRequest
 */
export interface SettleContractRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
}
/**
 * @generated from protobuf message communication.ContractAdminSupport
 */
export interface ContractAdminSupport {
    /**
     * @generated from protobuf field: string contract_id = 1;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
}
/**
 * @generated from protobuf message communication.ContractToggleLockRequest
 */
export interface ContractToggleLockRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: bool contract_lock = 3;
     */
    contractLock: boolean;
}
/**
 * @generated from protobuf message communication.ContractReactLockRequest
 */
export interface ContractReactLockRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string message_id = 3;
     */
    messageId: string;
    /**
     * @generated from protobuf field: uint32 status = 4;
     */
    status: number;
}
/**
 * @generated from protobuf message communication.ContractDeleteDraftRequest
 */
export interface ContractDeleteDraftRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
}
/**
 * @generated from protobuf message communication.ContractEditResponse
 */
export interface ContractEditResponse {
}
/**
 * @generated from protobuf message communication.EmailChangeRequest
 */
export interface EmailChangeRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string new_email = 3;
     */
    newEmail: string;
}
/**
 * @generated from protobuf message communication.EmailChangeResponse
 */
export interface EmailChangeResponse {
    /**
     * @generated from protobuf field: string new_secret = 1;
     */
    newSecret: string;
}
/**
 * @generated from protobuf message communication.EmailResendRequest
 */
export interface EmailResendRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
}
/**
 * @generated from protobuf message communication.FigmaLinkRequest
 */
export interface FigmaLinkRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string figma_link = 3;
     */
    figmaLink: string;
}
/**
 * @generated from protobuf message communication.FigmaItemRequest
 */
export interface FigmaItemRequest {
    /**
     * @generated from protobuf field: string contract_id = 1;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string user_id = 5;
     */
    userId: string;
    /**
     * @generated from protobuf field: string item_id = 3;
     */
    itemId: string;
    /**
     * @generated from protobuf field: string component_id = 4;
     */
    componentId: string;
}
/**
 * @generated from protobuf message communication.FigmaFileConnectRequest
 */
export interface FigmaFileConnectRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string contract_id = 2;
     */
    contractId: string;
    /**
     * @generated from protobuf field: string figma_link = 3;
     */
    figmaLink: string;
}
/**
 * @generated from protobuf message communication.SuggestPriceReq
 */
export interface SuggestPriceReq {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: int64 new_price = 3;
     */
    newPrice: bigint;
}
/**
 * @generated from protobuf message communication.ReactPriceReq
 */
export interface ReactPriceReq {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: string message_id = 4;
     */
    messageId: string;
    /**
     * @generated from protobuf field: uint32 status = 3;
     */
    status: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class PriceEntity$Type extends MessageType<PriceEntity> {
    constructor() {
        super("communication.PriceEntity", [
            { no: 1, name: "current", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "buyer", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "worker", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "awaiting_approval", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "proposer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PriceEntity>): PriceEntity {
        const message = { current: 0n, buyer: 0n, worker: 0n, awaitingApproval: false, proposerId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PriceEntity>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PriceEntity): PriceEntity {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 current */ 1:
                    message.current = reader.int64().toBigInt();
                    break;
                case /* int64 buyer */ 2:
                    message.buyer = reader.int64().toBigInt();
                    break;
                case /* int64 worker */ 3:
                    message.worker = reader.int64().toBigInt();
                    break;
                case /* bool awaiting_approval */ 4:
                    message.awaitingApproval = reader.bool();
                    break;
                case /* string proposer_id */ 5:
                    message.proposerId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PriceEntity, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 current = 1; */
        if (message.current !== 0n)
            writer.tag(1, WireType.Varint).int64(message.current);
        /* int64 buyer = 2; */
        if (message.buyer !== 0n)
            writer.tag(2, WireType.Varint).int64(message.buyer);
        /* int64 worker = 3; */
        if (message.worker !== 0n)
            writer.tag(3, WireType.Varint).int64(message.worker);
        /* bool awaiting_approval = 4; */
        if (message.awaitingApproval !== false)
            writer.tag(4, WireType.Varint).bool(message.awaitingApproval);
        /* string proposer_id = 5; */
        if (message.proposerId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.proposerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.PriceEntity
 */
export const PriceEntity = new PriceEntity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractEntity$Type extends MessageType<ContractEntity> {
    constructor() {
        super("communication.ContractEntity", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "invited_email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "invite_password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 22, name: "link_share", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "worker", kind: "message", T: () => UserNubEntity },
            { no: 3, name: "buyer", kind: "message", T: () => UserNubEntity },
            { no: 4, name: "price", kind: "message", T: () => PriceEntity },
            { no: 5, name: "deadlines", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DeadlineEntity },
            { no: 15, name: "current_deadline_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "summary", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "stage", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "universal_lock", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "worker_approved", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "buyer_approved", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemEntity },
            { no: 10, name: "room_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "disputed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 17, name: "admin_requested", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 19, name: "figma_link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "figma_file_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "figma_connected", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 23, name: "free_status", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ContractEntity>): ContractEntity {
        const message = { id: "", invitedEmail: "", invitePassword: "", linkShare: false, deadlines: [], currentDeadlineId: "", title: "", summary: "", stage: 0, universalLock: false, workerApproved: false, buyerApproved: false, items: [], roomId: "", disputed: false, adminRequested: false, figmaLink: "", figmaFileKey: "", figmaConnected: false, freeStatus: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractEntity>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractEntity): ContractEntity {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string invited_email */ 11:
                    message.invitedEmail = reader.string();
                    break;
                case /* string invite_password */ 18:
                    message.invitePassword = reader.string();
                    break;
                case /* bool link_share */ 22:
                    message.linkShare = reader.bool();
                    break;
                case /* communication.UserNubEntity worker */ 2:
                    message.worker = UserNubEntity.internalBinaryRead(reader, reader.uint32(), options, message.worker);
                    break;
                case /* communication.UserNubEntity buyer */ 3:
                    message.buyer = UserNubEntity.internalBinaryRead(reader, reader.uint32(), options, message.buyer);
                    break;
                case /* communication.PriceEntity price */ 4:
                    message.price = PriceEntity.internalBinaryRead(reader, reader.uint32(), options, message.price);
                    break;
                case /* repeated communication.DeadlineEntity deadlines */ 5:
                    message.deadlines.push(DeadlineEntity.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string current_deadline_id */ 15:
                    message.currentDeadlineId = reader.string();
                    break;
                case /* string title */ 8:
                    message.title = reader.string();
                    break;
                case /* string summary */ 6:
                    message.summary = reader.string();
                    break;
                case /* uint32 stage */ 9:
                    message.stage = reader.uint32();
                    break;
                case /* bool universal_lock */ 14:
                    message.universalLock = reader.bool();
                    break;
                case /* bool worker_approved */ 12:
                    message.workerApproved = reader.bool();
                    break;
                case /* bool buyer_approved */ 13:
                    message.buyerApproved = reader.bool();
                    break;
                case /* repeated communication.ItemEntity items */ 7:
                    message.items.push(ItemEntity.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string room_id */ 10:
                    message.roomId = reader.string();
                    break;
                case /* bool disputed */ 16:
                    message.disputed = reader.bool();
                    break;
                case /* bool admin_requested */ 17:
                    message.adminRequested = reader.bool();
                    break;
                case /* string figma_link */ 19:
                    message.figmaLink = reader.string();
                    break;
                case /* string figma_file_key */ 21:
                    message.figmaFileKey = reader.string();
                    break;
                case /* bool figma_connected */ 20:
                    message.figmaConnected = reader.bool();
                    break;
                case /* bool free_status */ 23:
                    message.freeStatus = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractEntity, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string invited_email = 11; */
        if (message.invitedEmail !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.invitedEmail);
        /* string invite_password = 18; */
        if (message.invitePassword !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.invitePassword);
        /* bool link_share = 22; */
        if (message.linkShare !== false)
            writer.tag(22, WireType.Varint).bool(message.linkShare);
        /* communication.UserNubEntity worker = 2; */
        if (message.worker)
            UserNubEntity.internalBinaryWrite(message.worker, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* communication.UserNubEntity buyer = 3; */
        if (message.buyer)
            UserNubEntity.internalBinaryWrite(message.buyer, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* communication.PriceEntity price = 4; */
        if (message.price)
            PriceEntity.internalBinaryWrite(message.price, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated communication.DeadlineEntity deadlines = 5; */
        for (let i = 0; i < message.deadlines.length; i++)
            DeadlineEntity.internalBinaryWrite(message.deadlines[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string current_deadline_id = 15; */
        if (message.currentDeadlineId !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.currentDeadlineId);
        /* string title = 8; */
        if (message.title !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.title);
        /* string summary = 6; */
        if (message.summary !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.summary);
        /* uint32 stage = 9; */
        if (message.stage !== 0)
            writer.tag(9, WireType.Varint).uint32(message.stage);
        /* bool universal_lock = 14; */
        if (message.universalLock !== false)
            writer.tag(14, WireType.Varint).bool(message.universalLock);
        /* bool worker_approved = 12; */
        if (message.workerApproved !== false)
            writer.tag(12, WireType.Varint).bool(message.workerApproved);
        /* bool buyer_approved = 13; */
        if (message.buyerApproved !== false)
            writer.tag(13, WireType.Varint).bool(message.buyerApproved);
        /* repeated communication.ItemEntity items = 7; */
        for (let i = 0; i < message.items.length; i++)
            ItemEntity.internalBinaryWrite(message.items[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* string room_id = 10; */
        if (message.roomId !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.roomId);
        /* bool disputed = 16; */
        if (message.disputed !== false)
            writer.tag(16, WireType.Varint).bool(message.disputed);
        /* bool admin_requested = 17; */
        if (message.adminRequested !== false)
            writer.tag(17, WireType.Varint).bool(message.adminRequested);
        /* string figma_link = 19; */
        if (message.figmaLink !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.figmaLink);
        /* string figma_file_key = 21; */
        if (message.figmaFileKey !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.figmaFileKey);
        /* bool figma_connected = 20; */
        if (message.figmaConnected !== false)
            writer.tag(20, WireType.Varint).bool(message.figmaConnected);
        /* bool free_status = 23; */
        if (message.freeStatus !== false)
            writer.tag(23, WireType.Varint).bool(message.freeStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractEntity
 */
export const ContractEntity = new ContractEntity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractNub$Type extends MessageType<ContractNub> {
    constructor() {
        super("communication.ContractNub", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "summary", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "deadline", kind: "message", T: () => Timestamp },
            { no: 4, name: "price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "stage", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "user_type", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "disputed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "admin_requested", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "worker_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "buyer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "figma_link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "figma_connected", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "deadlines", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DeadlineNub }
        ]);
    }
    create(value?: PartialMessage<ContractNub>): ContractNub {
        const message = { id: "", title: "", summary: "", price: 0n, stage: 0, userType: 0, disputed: false, adminRequested: false, workerId: "", buyerId: "", figmaLink: "", figmaConnected: false, deadlines: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractNub>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractNub): ContractNub {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string summary */ 12:
                    message.summary = reader.string();
                    break;
                case /* google.protobuf.Timestamp deadline */ 3:
                    message.deadline = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.deadline);
                    break;
                case /* int64 price */ 4:
                    message.price = reader.int64().toBigInt();
                    break;
                case /* uint32 stage */ 5:
                    message.stage = reader.uint32();
                    break;
                case /* uint32 user_type */ 6:
                    message.userType = reader.uint32();
                    break;
                case /* bool disputed */ 7:
                    message.disputed = reader.bool();
                    break;
                case /* bool admin_requested */ 8:
                    message.adminRequested = reader.bool();
                    break;
                case /* string worker_id */ 9:
                    message.workerId = reader.string();
                    break;
                case /* string buyer_id */ 10:
                    message.buyerId = reader.string();
                    break;
                case /* string figma_link */ 13:
                    message.figmaLink = reader.string();
                    break;
                case /* bool figma_connected */ 14:
                    message.figmaConnected = reader.bool();
                    break;
                case /* repeated communication.DeadlineNub deadlines */ 11:
                    message.deadlines.push(DeadlineNub.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractNub, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string summary = 12; */
        if (message.summary !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.summary);
        /* google.protobuf.Timestamp deadline = 3; */
        if (message.deadline)
            Timestamp.internalBinaryWrite(message.deadline, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 price = 4; */
        if (message.price !== 0n)
            writer.tag(4, WireType.Varint).int64(message.price);
        /* uint32 stage = 5; */
        if (message.stage !== 0)
            writer.tag(5, WireType.Varint).uint32(message.stage);
        /* uint32 user_type = 6; */
        if (message.userType !== 0)
            writer.tag(6, WireType.Varint).uint32(message.userType);
        /* bool disputed = 7; */
        if (message.disputed !== false)
            writer.tag(7, WireType.Varint).bool(message.disputed);
        /* bool admin_requested = 8; */
        if (message.adminRequested !== false)
            writer.tag(8, WireType.Varint).bool(message.adminRequested);
        /* string worker_id = 9; */
        if (message.workerId !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.workerId);
        /* string buyer_id = 10; */
        if (message.buyerId !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.buyerId);
        /* string figma_link = 13; */
        if (message.figmaLink !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.figmaLink);
        /* bool figma_connected = 14; */
        if (message.figmaConnected !== false)
            writer.tag(14, WireType.Varint).bool(message.figmaConnected);
        /* repeated communication.DeadlineNub deadlines = 11; */
        for (let i = 0; i < message.deadlines.length; i++)
            DeadlineNub.internalBinaryWrite(message.deadlines[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractNub
 */
export const ContractNub = new ContractNub$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InviteDataRequest$Type extends MessageType<InviteDataRequest> {
    constructor() {
        super("communication.InviteDataRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "secret", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InviteDataRequest>): InviteDataRequest {
        const message = { id: "", secret: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InviteDataRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InviteDataRequest): InviteDataRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string secret */ 2:
                    message.secret = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InviteDataRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string secret = 2; */
        if (message.secret !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.secret);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.InviteDataRequest
 */
export const InviteDataRequest = new InviteDataRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractInviteNub$Type extends MessageType<ContractInviteNub> {
    constructor() {
        super("communication.ContractInviteNub", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "invited_email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "link_share", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "invited_user_in_system", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "worker", kind: "message", T: () => UserNubEntity },
            { no: 3, name: "buyer", kind: "message", T: () => UserNubEntity },
            { no: 4, name: "price", kind: "message", T: () => PriceEntity },
            { no: 5, name: "deadlines", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DeadlineEntity },
            { no: 8, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "summary", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemEntity }
        ]);
    }
    create(value?: PartialMessage<ContractInviteNub>): ContractInviteNub {
        const message = { id: "", invitedEmail: "", linkShare: false, invitedUserInSystem: false, deadlines: [], title: "", summary: "", items: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractInviteNub>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractInviteNub): ContractInviteNub {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string invited_email */ 11:
                    message.invitedEmail = reader.string();
                    break;
                case /* bool link_share */ 13:
                    message.linkShare = reader.bool();
                    break;
                case /* bool invited_user_in_system */ 12:
                    message.invitedUserInSystem = reader.bool();
                    break;
                case /* communication.UserNubEntity worker */ 2:
                    message.worker = UserNubEntity.internalBinaryRead(reader, reader.uint32(), options, message.worker);
                    break;
                case /* communication.UserNubEntity buyer */ 3:
                    message.buyer = UserNubEntity.internalBinaryRead(reader, reader.uint32(), options, message.buyer);
                    break;
                case /* communication.PriceEntity price */ 4:
                    message.price = PriceEntity.internalBinaryRead(reader, reader.uint32(), options, message.price);
                    break;
                case /* repeated communication.DeadlineEntity deadlines */ 5:
                    message.deadlines.push(DeadlineEntity.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string title */ 8:
                    message.title = reader.string();
                    break;
                case /* string summary */ 6:
                    message.summary = reader.string();
                    break;
                case /* repeated communication.ItemEntity items */ 7:
                    message.items.push(ItemEntity.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractInviteNub, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string invited_email = 11; */
        if (message.invitedEmail !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.invitedEmail);
        /* bool link_share = 13; */
        if (message.linkShare !== false)
            writer.tag(13, WireType.Varint).bool(message.linkShare);
        /* bool invited_user_in_system = 12; */
        if (message.invitedUserInSystem !== false)
            writer.tag(12, WireType.Varint).bool(message.invitedUserInSystem);
        /* communication.UserNubEntity worker = 2; */
        if (message.worker)
            UserNubEntity.internalBinaryWrite(message.worker, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* communication.UserNubEntity buyer = 3; */
        if (message.buyer)
            UserNubEntity.internalBinaryWrite(message.buyer, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* communication.PriceEntity price = 4; */
        if (message.price)
            PriceEntity.internalBinaryWrite(message.price, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated communication.DeadlineEntity deadlines = 5; */
        for (let i = 0; i < message.deadlines.length; i++)
            DeadlineEntity.internalBinaryWrite(message.deadlines[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string title = 8; */
        if (message.title !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.title);
        /* string summary = 6; */
        if (message.summary !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.summary);
        /* repeated communication.ItemEntity items = 7; */
        for (let i = 0; i < message.items.length; i++)
            ItemEntity.internalBinaryWrite(message.items[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractInviteNub
 */
export const ContractInviteNub = new ContractInviteNub$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractNubSet$Type extends MessageType<ContractNubSet> {
    constructor() {
        super("communication.ContractNubSet", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_nubs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ContractNub }
        ]);
    }
    create(value?: PartialMessage<ContractNubSet>): ContractNubSet {
        const message = { userId: "", contractNubs: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractNubSet>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractNubSet): ContractNubSet {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* repeated communication.ContractNub contract_nubs */ 2:
                    message.contractNubs.push(ContractNub.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractNubSet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* repeated communication.ContractNub contract_nubs = 2; */
        for (let i = 0; i < message.contractNubs.length; i++)
            ContractNub.internalBinaryWrite(message.contractNubs[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractNubSet
 */
export const ContractNubSet = new ContractNubSet$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractCreateRequest$Type extends MessageType<ContractCreateRequest> {
    constructor() {
        super("communication.ContractCreateRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "summary", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "invited_email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "role", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "price", kind: "message", T: () => PriceEntity },
            { no: 6, name: "deadlines", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DeadlineEntity },
            { no: 7, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemEntity }
        ]);
    }
    create(value?: PartialMessage<ContractCreateRequest>): ContractCreateRequest {
        const message = { userId: "", title: "", summary: "", invitedEmail: "", role: 0, deadlines: [], items: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractCreateRequest): ContractCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string summary */ 3:
                    message.summary = reader.string();
                    break;
                case /* string invited_email */ 8:
                    message.invitedEmail = reader.string();
                    break;
                case /* uint32 role */ 9:
                    message.role = reader.uint32();
                    break;
                case /* communication.PriceEntity price */ 5:
                    message.price = PriceEntity.internalBinaryRead(reader, reader.uint32(), options, message.price);
                    break;
                case /* repeated communication.DeadlineEntity deadlines */ 6:
                    message.deadlines.push(DeadlineEntity.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated communication.ItemEntity items */ 7:
                    message.items.push(ItemEntity.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string summary = 3; */
        if (message.summary !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.summary);
        /* string invited_email = 8; */
        if (message.invitedEmail !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.invitedEmail);
        /* uint32 role = 9; */
        if (message.role !== 0)
            writer.tag(9, WireType.Varint).uint32(message.role);
        /* communication.PriceEntity price = 5; */
        if (message.price)
            PriceEntity.internalBinaryWrite(message.price, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated communication.DeadlineEntity deadlines = 6; */
        for (let i = 0; i < message.deadlines.length; i++)
            DeadlineEntity.internalBinaryWrite(message.deadlines[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated communication.ItemEntity items = 7; */
        for (let i = 0; i < message.items.length; i++)
            ItemEntity.internalBinaryWrite(message.items[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractCreateRequest
 */
export const ContractCreateRequest = new ContractCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractFinishCreationRequest$Type extends MessageType<ContractFinishCreationRequest> {
    constructor() {
        super("communication.ContractFinishCreationRequest", [
            { no: 1, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ContractFinishCreationRequest>): ContractFinishCreationRequest {
        const message = { contractId: "", userId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractFinishCreationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractFinishCreationRequest): ContractFinishCreationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string contract_id */ 1:
                    message.contractId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractFinishCreationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string contract_id = 1; */
        if (message.contractId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.contractId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractFinishCreationRequest
 */
export const ContractFinishCreationRequest = new ContractFinishCreationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractUpdateRequest$Type extends MessageType<ContractUpdateRequest> {
    constructor() {
        super("communication.ContractUpdateRequest", [
            { no: 1, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "summary", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "invited_email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "link_share", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "role", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "price", kind: "message", T: () => PriceEntity },
            { no: 8, name: "deadlines", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DeadlineEntity },
            { no: 9, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemEntity }
        ]);
    }
    create(value?: PartialMessage<ContractUpdateRequest>): ContractUpdateRequest {
        const message = { contractId: "", userId: "", title: "", summary: "", invitedEmail: "", linkShare: false, role: 0, deadlines: [], items: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractUpdateRequest): ContractUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string contract_id */ 1:
                    message.contractId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string summary */ 4:
                    message.summary = reader.string();
                    break;
                case /* string invited_email */ 5:
                    message.invitedEmail = reader.string();
                    break;
                case /* bool link_share */ 10:
                    message.linkShare = reader.bool();
                    break;
                case /* uint32 role */ 6:
                    message.role = reader.uint32();
                    break;
                case /* communication.PriceEntity price */ 7:
                    message.price = PriceEntity.internalBinaryRead(reader, reader.uint32(), options, message.price);
                    break;
                case /* repeated communication.DeadlineEntity deadlines */ 8:
                    message.deadlines.push(DeadlineEntity.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated communication.ItemEntity items */ 9:
                    message.items.push(ItemEntity.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string contract_id = 1; */
        if (message.contractId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.contractId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string summary = 4; */
        if (message.summary !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.summary);
        /* string invited_email = 5; */
        if (message.invitedEmail !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.invitedEmail);
        /* bool link_share = 10; */
        if (message.linkShare !== false)
            writer.tag(10, WireType.Varint).bool(message.linkShare);
        /* uint32 role = 6; */
        if (message.role !== 0)
            writer.tag(6, WireType.Varint).uint32(message.role);
        /* communication.PriceEntity price = 7; */
        if (message.price)
            PriceEntity.internalBinaryWrite(message.price, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* repeated communication.DeadlineEntity deadlines = 8; */
        for (let i = 0; i < message.deadlines.length; i++)
            DeadlineEntity.internalBinaryWrite(message.deadlines[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated communication.ItemEntity items = 9; */
        for (let i = 0; i < message.items.length; i++)
            ItemEntity.internalBinaryWrite(message.items[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractUpdateRequest
 */
export const ContractUpdateRequest = new ContractUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractResponse$Type extends MessageType<ContractResponse> {
    constructor() {
        super("communication.ContractResponse", [
            { no: 2, name: "contract", kind: "message", T: () => ContractEntity },
            { no: 3, name: "role", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ContractResponse>): ContractResponse {
        const message = { role: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractResponse): ContractResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* communication.ContractEntity contract */ 2:
                    message.contract = ContractEntity.internalBinaryRead(reader, reader.uint32(), options, message.contract);
                    break;
                case /* uint32 role */ 3:
                    message.role = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* communication.ContractEntity contract = 2; */
        if (message.contract)
            ContractEntity.internalBinaryWrite(message.contract, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint32 role = 3; */
        if (message.role !== 0)
            writer.tag(3, WireType.Varint).uint32(message.role);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractResponse
 */
export const ContractResponse = new ContractResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClaimContractRequest$Type extends MessageType<ClaimContractRequest> {
    constructor() {
        super("communication.ClaimContractRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ClaimContractRequest>): ClaimContractRequest {
        const message = { userId: "", contractId: "", password: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClaimContractRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClaimContractRequest): ClaimContractRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* string password */ 3:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClaimContractRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* string password = 3; */
        if (message.password !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ClaimContractRequest
 */
export const ClaimContractRequest = new ClaimContractRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignContractRequest$Type extends MessageType<SignContractRequest> {
    constructor() {
        super("communication.SignContractRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SignContractRequest>): SignContractRequest {
        const message = { userId: "", contractId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignContractRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignContractRequest): SignContractRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignContractRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.SignContractRequest
 */
export const SignContractRequest = new SignContractRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettleContractRequest$Type extends MessageType<SettleContractRequest> {
    constructor() {
        super("communication.SettleContractRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SettleContractRequest>): SettleContractRequest {
        const message = { userId: "", contractId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SettleContractRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettleContractRequest): SettleContractRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettleContractRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.SettleContractRequest
 */
export const SettleContractRequest = new SettleContractRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractAdminSupport$Type extends MessageType<ContractAdminSupport> {
    constructor() {
        super("communication.ContractAdminSupport", [
            { no: 1, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ContractAdminSupport>): ContractAdminSupport {
        const message = { contractId: "", userId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractAdminSupport>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractAdminSupport): ContractAdminSupport {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string contract_id */ 1:
                    message.contractId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractAdminSupport, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string contract_id = 1; */
        if (message.contractId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.contractId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractAdminSupport
 */
export const ContractAdminSupport = new ContractAdminSupport$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractToggleLockRequest$Type extends MessageType<ContractToggleLockRequest> {
    constructor() {
        super("communication.ContractToggleLockRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "contract_lock", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ContractToggleLockRequest>): ContractToggleLockRequest {
        const message = { userId: "", contractId: "", contractLock: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractToggleLockRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractToggleLockRequest): ContractToggleLockRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* bool contract_lock */ 3:
                    message.contractLock = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractToggleLockRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* bool contract_lock = 3; */
        if (message.contractLock !== false)
            writer.tag(3, WireType.Varint).bool(message.contractLock);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractToggleLockRequest
 */
export const ContractToggleLockRequest = new ContractToggleLockRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractReactLockRequest$Type extends MessageType<ContractReactLockRequest> {
    constructor() {
        super("communication.ContractReactLockRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ContractReactLockRequest>): ContractReactLockRequest {
        const message = { userId: "", contractId: "", messageId: "", status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractReactLockRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractReactLockRequest): ContractReactLockRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* string message_id */ 3:
                    message.messageId = reader.string();
                    break;
                case /* uint32 status */ 4:
                    message.status = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractReactLockRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* string message_id = 3; */
        if (message.messageId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.messageId);
        /* uint32 status = 4; */
        if (message.status !== 0)
            writer.tag(4, WireType.Varint).uint32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractReactLockRequest
 */
export const ContractReactLockRequest = new ContractReactLockRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractDeleteDraftRequest$Type extends MessageType<ContractDeleteDraftRequest> {
    constructor() {
        super("communication.ContractDeleteDraftRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ContractDeleteDraftRequest>): ContractDeleteDraftRequest {
        const message = { userId: "", contractId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractDeleteDraftRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractDeleteDraftRequest): ContractDeleteDraftRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContractDeleteDraftRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractDeleteDraftRequest
 */
export const ContractDeleteDraftRequest = new ContractDeleteDraftRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractEditResponse$Type extends MessageType<ContractEditResponse> {
    constructor() {
        super("communication.ContractEditResponse", []);
    }
    create(value?: PartialMessage<ContractEditResponse>): ContractEditResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContractEditResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractEditResponse): ContractEditResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ContractEditResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ContractEditResponse
 */
export const ContractEditResponse = new ContractEditResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EmailChangeRequest$Type extends MessageType<EmailChangeRequest> {
    constructor() {
        super("communication.EmailChangeRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "new_email", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EmailChangeRequest>): EmailChangeRequest {
        const message = { userId: "", contractId: "", newEmail: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EmailChangeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EmailChangeRequest): EmailChangeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* string new_email */ 3:
                    message.newEmail = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EmailChangeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* string new_email = 3; */
        if (message.newEmail !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.newEmail);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.EmailChangeRequest
 */
export const EmailChangeRequest = new EmailChangeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EmailChangeResponse$Type extends MessageType<EmailChangeResponse> {
    constructor() {
        super("communication.EmailChangeResponse", [
            { no: 1, name: "new_secret", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EmailChangeResponse>): EmailChangeResponse {
        const message = { newSecret: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EmailChangeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EmailChangeResponse): EmailChangeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string new_secret */ 1:
                    message.newSecret = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EmailChangeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string new_secret = 1; */
        if (message.newSecret !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.newSecret);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.EmailChangeResponse
 */
export const EmailChangeResponse = new EmailChangeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EmailResendRequest$Type extends MessageType<EmailResendRequest> {
    constructor() {
        super("communication.EmailResendRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EmailResendRequest>): EmailResendRequest {
        const message = { userId: "", contractId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EmailResendRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EmailResendRequest): EmailResendRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EmailResendRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.EmailResendRequest
 */
export const EmailResendRequest = new EmailResendRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FigmaLinkRequest$Type extends MessageType<FigmaLinkRequest> {
    constructor() {
        super("communication.FigmaLinkRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "figma_link", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FigmaLinkRequest>): FigmaLinkRequest {
        const message = { userId: "", contractId: "", figmaLink: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FigmaLinkRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FigmaLinkRequest): FigmaLinkRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* string figma_link */ 3:
                    message.figmaLink = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FigmaLinkRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* string figma_link = 3; */
        if (message.figmaLink !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.figmaLink);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.FigmaLinkRequest
 */
export const FigmaLinkRequest = new FigmaLinkRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FigmaItemRequest$Type extends MessageType<FigmaItemRequest> {
    constructor() {
        super("communication.FigmaItemRequest", [
            { no: 1, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "component_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FigmaItemRequest>): FigmaItemRequest {
        const message = { contractId: "", userId: "", itemId: "", componentId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FigmaItemRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FigmaItemRequest): FigmaItemRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string contract_id */ 1:
                    message.contractId = reader.string();
                    break;
                case /* string user_id */ 5:
                    message.userId = reader.string();
                    break;
                case /* string item_id */ 3:
                    message.itemId = reader.string();
                    break;
                case /* string component_id */ 4:
                    message.componentId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FigmaItemRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string contract_id = 1; */
        if (message.contractId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.contractId);
        /* string user_id = 5; */
        if (message.userId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.userId);
        /* string item_id = 3; */
        if (message.itemId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.itemId);
        /* string component_id = 4; */
        if (message.componentId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.componentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.FigmaItemRequest
 */
export const FigmaItemRequest = new FigmaItemRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FigmaFileConnectRequest$Type extends MessageType<FigmaFileConnectRequest> {
    constructor() {
        super("communication.FigmaFileConnectRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "figma_link", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FigmaFileConnectRequest>): FigmaFileConnectRequest {
        const message = { userId: "", contractId: "", figmaLink: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FigmaFileConnectRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FigmaFileConnectRequest): FigmaFileConnectRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string contract_id */ 2:
                    message.contractId = reader.string();
                    break;
                case /* string figma_link */ 3:
                    message.figmaLink = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FigmaFileConnectRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string contract_id = 2; */
        if (message.contractId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractId);
        /* string figma_link = 3; */
        if (message.figmaLink !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.figmaLink);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.FigmaFileConnectRequest
 */
export const FigmaFileConnectRequest = new FigmaFileConnectRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SuggestPriceReq$Type extends MessageType<SuggestPriceReq> {
    constructor() {
        super("communication.SuggestPriceReq", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "new_price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SuggestPriceReq>): SuggestPriceReq {
        const message = { userId: "", id: "", newPrice: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SuggestPriceReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SuggestPriceReq): SuggestPriceReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* int64 new_price */ 3:
                    message.newPrice = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SuggestPriceReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* int64 new_price = 3; */
        if (message.newPrice !== 0n)
            writer.tag(3, WireType.Varint).int64(message.newPrice);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.SuggestPriceReq
 */
export const SuggestPriceReq = new SuggestPriceReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReactPriceReq$Type extends MessageType<ReactPriceReq> {
    constructor() {
        super("communication.ReactPriceReq", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ReactPriceReq>): ReactPriceReq {
        const message = { userId: "", id: "", messageId: "", status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReactPriceReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReactPriceReq): ReactPriceReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* string message_id */ 4:
                    message.messageId = reader.string();
                    break;
                case /* uint32 status */ 3:
                    message.status = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReactPriceReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* string message_id = 4; */
        if (message.messageId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.messageId);
        /* uint32 status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).uint32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message communication.ReactPriceReq
 */
export const ReactPriceReq = new ReactPriceReq$Type();
/**
 * @generated ServiceType for protobuf service communication.Contract
 */
export const Contract = new ServiceType("communication.Contract", [
    { name: "Create", options: {}, I: ContractCreateRequest, O: ContractResponse },
    { name: "DeleteDraft", options: {}, I: ContractDeleteDraftRequest, O: ContractEditResponse },
    { name: "UpdateDraft", options: {}, I: ContractUpdateRequest, O: ContractResponse },
    { name: "FinishCreation", options: {}, I: ContractFinishCreationRequest, O: ContractResponse },
    { name: "ChangeInviteEmail", options: {}, I: EmailChangeRequest, O: EmailChangeResponse },
    { name: "ResendInviteEmail", options: {}, I: EmailResendRequest, O: NullResponse },
    { name: "InviteQuery", options: {}, I: InviteDataRequest, O: ContractInviteNub },
    { name: "Claim", options: {}, I: ClaimContractRequest, O: ContractResponse },
    { name: "Sign", options: {}, I: SignContractRequest, O: ContractResponse },
    { name: "Settle", options: {}, I: SettleContractRequest, O: ContractResponse },
    { name: "QueryById", options: {}, I: QueryByIdRequest, O: ContractResponse },
    { name: "QueryByUser", options: {}, I: QueryByUserRequest, O: ContractNubSet },
    { name: "QueryByAdmin", options: {}, I: QueryByUserRequest, O: ContractNubSet },
    { name: "SuggestPrice", options: {}, I: SuggestPriceReq, O: ContractEditResponse },
    { name: "ReactPrice", options: {}, I: ReactPriceReq, O: ContractEditResponse },
    { name: "ToggleLock", options: {}, I: ContractToggleLockRequest, O: ContractEditResponse },
    { name: "ReactLock", options: {}, I: ContractReactLockRequest, O: ContractEditResponse },
    { name: "RequestAdmin", options: {}, I: ContractAdminSupport, O: NullResponse },
    { name: "ResolveAdmin", options: {}, I: ContractAdminSupport, O: NullResponse },
    { name: "SetFigmaConnected", options: {}, I: FigmaFileConnectRequest, O: ContractEditResponse },
    { name: "SetItemFigmaNodes", options: {}, I: FigmaItemRequest, O: ContractEditResponse }
]);
