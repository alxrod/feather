syntax = "proto3";
package communication;
option go_package=".;communication";
import "google/protobuf/timestamp.proto";

import "communication/document.proto";
import "communication/deadline.proto";
import "communication/item.proto";

message UserHandle {
    string id = 1;
    string username = 2;
}

message ChatMessage {
    string id = 1;
    string doc_id = 2;

    bool system_message = 3;
    UserHandle user = 4;

    google.protobuf.Timestamp timestamp = 5;
    string label =  6;
    uint32 method = 7;

    bool silent = 8;
    repeated ReadReceiptEntity read_receipts = 9;

    oneof body {
        CommentMsgBody comment_body = 50;
        DateMsgBody date_body = 51;
        ItemMsgBody item_body = 52;
        ItemCreateMsgBody item_create_body = 53;
        ItemDeleteMsgBody item_delete_body = 54;
        DeadlineCreateMsgBody deadline_create_body = 55;
        DeadlineDeleteMsgBody deadline_delete_body = 56;
        DeadlineItemMsgBody deadline_item_body = 57;

        FigmaLinkMsgBody figma_link_body = 58;
        FigmaItemNodesMsgBody figma_item_nodes_body = 59;
    }   
}

message ReadReceiptEntity {
    string user_id = 1;
    bool read = 2;
}

message FigmaItemNodesMsgBody {
    string item_id = 1;
    string component_id = 2;
}

message FigmaLinkMsgBody {
    string figma_link = 1;
}

message CommentMsgBody {
    string message = 1;
}

message ItemCreateMsgBody {
    ItemEntity item = 1;
}
message ItemDeleteMsgBody {
    ItemEntity item = 1;
}
message DeadlineCreateMsgBody {
    DeadlineEntity deadline = 1;
}
message DeadlineDeleteMsgBody {
    DeadlineEntity deadline = 1;
}

message ItemMsgBody {
    string item_id = 8;
    string new_version = 1;
    string old_version = 2;
}

message DateMsgBody {
    string deadline_id = 8;
    google.protobuf.Timestamp new_version = 1;
    google.protobuf.Timestamp old_version = 2;
}

message DeadlineItemMsgBody {
    DeadlineEntity deadline = 1;
    repeated ItemNub new_items = 14;
}

message UserJoin {
    string user_id = 1;
    string room_id = 2;
}
message UserLeave {
    string user_id = 1;
    string room_id = 2;
}
message UserClose{}

message SendRequest {
    string user_id = 1;
    string room_id = 2;
    CommentMsgBody body = 4;
}

message SendResponse{}

message ChatPullRequest{
    string room_id = 1;
    string user_id = 2;
}
message ChatMessageSet{
    string room_id = 1;
    repeated ChatMessage messages = 2;
}

message NewMessagesRequest{
    string user_id = 1;
}

message NewMessageEntity {
    ChatMessage message = 1;
    DocumentNub document = 3;
}
message NewMessageSet{
    repeated NewMessageEntity messages = 2;
}

service Chat {
    rpc PullNewMessages(NewMessagesRequest) returns (NewMessageSet);
    rpc PullChatHistory(ChatPullRequest) returns (ChatMessageSet);
    
    rpc JoinChat(UserJoin) returns (stream ChatMessage);
    rpc LeaveChat(UserLeave) returns (UserClose);
    rpc SendCommentMessage(SendRequest) returns (SendResponse);
}