syntax = "proto3";
package main;
option go_package=".;communication";
import "google/protobuf/timestamp.proto";

message UserHandle {
    string id = 1;
    string username = 2;
}

message ChatMessage {
    string id = 1;
    UserHandle user = 2;
    google.protobuf.Timestamp timestamp = 3;
    ChatLabel label =  5;
    uint32 method = 4;
    oneof body {
        CommentMsgBody comment_body = 6;
        DeadlineMsgBody deadline_body = 7;
        PriceMsgBody price_body = 8;
        ItemMsgBody item_body = 9;
    }   
}

message ChatLabel {
    uint32 type = 1;
    string name = 2;
    string item_id = 3;

}

message CommentMsgBody {
    string message = 1;
}

message ItemMsgBody {
    string new_version = 1;
    string old_version = 2;
    uint32 type = 3;
    bool resolved = 4;
    uint32 resol_status = 7;
    uint32 worker_status = 5;
    uint32 buyer_status = 6;
}
message DeadlineMsgBody {
    google.protobuf.Timestamp new_version = 1;
    google.protobuf.Timestamp old_version = 2;
    uint32 type = 3;
    bool resolved = 4;
    uint32 resol_status = 7;
    uint32 worker_status = 5;
    uint32 buyer_status = 6;
}
message PriceMsgBody {
    float new_version = 1;
    float old_version = 2;
    uint32 type = 3;
    bool resolved = 4;
    uint32 resol_status = 7;
    uint32 worker_status = 5;
    uint32 buyer_status = 6;
}

message UserJoin {
    string user_id = 1;
    string room_id = 2;
}
message UserLeave {
    string user_id = 1;
    string room_id = 2;
}
message UserClose{}

message SendRequest {
    string user_id = 1;
    string room_id = 2;
    uint32 method = 10;
    oneof body {
        CommentMsgBody comment_body = 6;
        DeadlineMsgBody deadline_body = 7;
        PriceMsgBody price_body = 8;
        ItemMsgBody item_body = 9;
    }  
    ChatLabel label = 4;
}

message SendResponse{}

message ChatPullRequest{
    string room_id = 1;
}
message ChatMessageSet{
    string room_id = 1;
    repeated ChatMessage messages = 2;
}
service Chat {
    rpc PullChatHistory(ChatPullRequest) returns (ChatMessageSet);
    rpc JoinChat(UserJoin) returns (stream ChatMessage);
    rpc LeaveChat(UserLeave) returns (UserClose);
    
    rpc SendMessage(SendRequest) returns (SendResponse);
}