// source: communication/chat.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var communication_document_pb = require('../communication/document_pb.js');
goog.object.extend(proto, communication_document_pb);
var communication_deadline_pb = require('../communication/deadline_pb.js');
goog.object.extend(proto, communication_deadline_pb);
var communication_item_pb = require('../communication/item_pb.js');
goog.object.extend(proto, communication_item_pb);
goog.exportSymbol('proto.communication.ChatMessage', null, global);
goog.exportSymbol('proto.communication.ChatMessage.BodyCase', null, global);
goog.exportSymbol('proto.communication.ChatMessageSet', null, global);
goog.exportSymbol('proto.communication.ChatPullRequest', null, global);
goog.exportSymbol('proto.communication.CommentMsgBody', null, global);
goog.exportSymbol('proto.communication.DateMsgBody', null, global);
goog.exportSymbol('proto.communication.DeadlineCreateMsgBody', null, global);
goog.exportSymbol('proto.communication.DeadlineDeleteMsgBody', null, global);
goog.exportSymbol('proto.communication.DeadlineItemMsgBody', null, global);
goog.exportSymbol('proto.communication.FigmaItemNodesMsgBody', null, global);
goog.exportSymbol('proto.communication.FigmaLinkMsgBody', null, global);
goog.exportSymbol('proto.communication.ItemCreateMsgBody', null, global);
goog.exportSymbol('proto.communication.ItemDeleteMsgBody', null, global);
goog.exportSymbol('proto.communication.ItemMsgBody', null, global);
goog.exportSymbol('proto.communication.NewMessageEntity', null, global);
goog.exportSymbol('proto.communication.NewMessageSet', null, global);
goog.exportSymbol('proto.communication.NewMessagesRequest', null, global);
goog.exportSymbol('proto.communication.ReadReceiptEntity', null, global);
goog.exportSymbol('proto.communication.SendRequest', null, global);
goog.exportSymbol('proto.communication.SendResponse', null, global);
goog.exportSymbol('proto.communication.UserClose', null, global);
goog.exportSymbol('proto.communication.UserHandle', null, global);
goog.exportSymbol('proto.communication.UserJoin', null, global);
goog.exportSymbol('proto.communication.UserLeave', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.communication.UserHandle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.communication.UserHandle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.communication.UserHandle.displayName = 'proto.communication.UserHandle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.communication.ChatMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.communication.ChatMessage.repeatedFields_, proto.communication.ChatMessage.oneofGroups_);
};
goog.inherits(proto.communication.ChatMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.communication.ChatMessage.displayName = 'proto.communication.ChatMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.communication.ReadReceiptEntity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.communication.ReadReceiptEntity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.communication.ReadReceiptEntity.displayName = 'proto.communication.ReadReceiptEntity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.communication.FigmaItemNodesMsgBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.communication.FigmaItemNodesMsgBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.communication.FigmaItemNodesMsgBody.displayName = 'proto.communication.FigmaItemNodesMsgBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.communication.FigmaLinkMsgBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.communication.FigmaLinkMsgBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.communication.FigmaLinkMsgBody.displayName = 'proto.communication.FigmaLinkMsgBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.communication.CommentMsgBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.communication.CommentMsgBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.communication.CommentMsgBody.displayName = 'proto.communication.CommentMsgBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.communication.ItemCreateMsgBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.communication.ItemCreateMsgBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.communication.ItemCreateMsgBody.displayName = 'proto.communication.ItemCreateMsgBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.communication.ItemDeleteMsgBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.communication.ItemDeleteMsgBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.communication.ItemDeleteMsgBody.displayName = 'proto.communication.ItemDeleteMsgBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.communication.DeadlineCreateMsgBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.communication.DeadlineCreateMsgBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.communication.DeadlineCreateMsgBody.displayName = 'proto.communication.DeadlineCreateMsgBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.communication.DeadlineDeleteMsgBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.communication.DeadlineDeleteMsgBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.communication.DeadlineDeleteMsgBody.displayName = 'proto.communication.DeadlineDeleteMsgBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.communication.ItemMsgBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.communication.ItemMsgBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.communication.ItemMsgBody.displayName = 'proto.communication.ItemMsgBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.communication.DateMsgBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.communication.DateMsgBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.communication.DateMsgBody.displayName = 'proto.communication.DateMsgBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.communication.DeadlineItemMsgBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.communication.DeadlineItemMsgBody.repeatedFields_, null);
};
goog.inherits(proto.communication.DeadlineItemMsgBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.communication.DeadlineItemMsgBody.displayName = 'proto.communication.DeadlineItemMsgBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.communication.UserJoin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.communication.UserJoin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.communication.UserJoin.displayName = 'proto.communication.UserJoin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.communication.UserLeave = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.communication.UserLeave, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.communication.UserLeave.displayName = 'proto.communication.UserLeave';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.communication.UserClose = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.communication.UserClose, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.communication.UserClose.displayName = 'proto.communication.UserClose';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.communication.SendRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.communication.SendRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.communication.SendRequest.displayName = 'proto.communication.SendRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.communication.SendResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.communication.SendResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.communication.SendResponse.displayName = 'proto.communication.SendResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.communication.ChatPullRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.communication.ChatPullRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.communication.ChatPullRequest.displayName = 'proto.communication.ChatPullRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.communication.ChatMessageSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.communication.ChatMessageSet.repeatedFields_, null);
};
goog.inherits(proto.communication.ChatMessageSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.communication.ChatMessageSet.displayName = 'proto.communication.ChatMessageSet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.communication.NewMessagesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.communication.NewMessagesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.communication.NewMessagesRequest.displayName = 'proto.communication.NewMessagesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.communication.NewMessageEntity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.communication.NewMessageEntity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.communication.NewMessageEntity.displayName = 'proto.communication.NewMessageEntity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.communication.NewMessageSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.communication.NewMessageSet.repeatedFields_, null);
};
goog.inherits(proto.communication.NewMessageSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.communication.NewMessageSet.displayName = 'proto.communication.NewMessageSet';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.communication.UserHandle.prototype.toObject = function(opt_includeInstance) {
  return proto.communication.UserHandle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.communication.UserHandle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.UserHandle.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    username: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.communication.UserHandle}
 */
proto.communication.UserHandle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.communication.UserHandle;
  return proto.communication.UserHandle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.communication.UserHandle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.communication.UserHandle}
 */
proto.communication.UserHandle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.communication.UserHandle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.communication.UserHandle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.communication.UserHandle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.UserHandle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.communication.UserHandle.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.communication.UserHandle} returns this
 */
proto.communication.UserHandle.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string username = 2;
 * @return {string}
 */
proto.communication.UserHandle.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.communication.UserHandle} returns this
 */
proto.communication.UserHandle.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.communication.ChatMessage.repeatedFields_ = [9];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.communication.ChatMessage.oneofGroups_ = [[50,51,52,53,54,55,56,57,58,59]];

/**
 * @enum {number}
 */
proto.communication.ChatMessage.BodyCase = {
  BODY_NOT_SET: 0,
  COMMENT_BODY: 50,
  DATE_BODY: 51,
  ITEM_BODY: 52,
  ITEM_CREATE_BODY: 53,
  ITEM_DELETE_BODY: 54,
  DEADLINE_CREATE_BODY: 55,
  DEADLINE_DELETE_BODY: 56,
  DEADLINE_ITEM_BODY: 57,
  FIGMA_LINK_BODY: 58,
  FIGMA_ITEM_NODES_BODY: 59
};

/**
 * @return {proto.communication.ChatMessage.BodyCase}
 */
proto.communication.ChatMessage.prototype.getBodyCase = function() {
  return /** @type {proto.communication.ChatMessage.BodyCase} */(jspb.Message.computeOneofCase(this, proto.communication.ChatMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.communication.ChatMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.communication.ChatMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.communication.ChatMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.ChatMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    docId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    systemMessage: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    user: (f = msg.getUser()) && proto.communication.UserHandle.toObject(includeInstance, f),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    label: jspb.Message.getFieldWithDefault(msg, 6, ""),
    method: jspb.Message.getFieldWithDefault(msg, 7, 0),
    silent: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    readReceiptsList: jspb.Message.toObjectList(msg.getReadReceiptsList(),
    proto.communication.ReadReceiptEntity.toObject, includeInstance),
    commentBody: (f = msg.getCommentBody()) && proto.communication.CommentMsgBody.toObject(includeInstance, f),
    dateBody: (f = msg.getDateBody()) && proto.communication.DateMsgBody.toObject(includeInstance, f),
    itemBody: (f = msg.getItemBody()) && proto.communication.ItemMsgBody.toObject(includeInstance, f),
    itemCreateBody: (f = msg.getItemCreateBody()) && proto.communication.ItemCreateMsgBody.toObject(includeInstance, f),
    itemDeleteBody: (f = msg.getItemDeleteBody()) && proto.communication.ItemDeleteMsgBody.toObject(includeInstance, f),
    deadlineCreateBody: (f = msg.getDeadlineCreateBody()) && proto.communication.DeadlineCreateMsgBody.toObject(includeInstance, f),
    deadlineDeleteBody: (f = msg.getDeadlineDeleteBody()) && proto.communication.DeadlineDeleteMsgBody.toObject(includeInstance, f),
    deadlineItemBody: (f = msg.getDeadlineItemBody()) && proto.communication.DeadlineItemMsgBody.toObject(includeInstance, f),
    figmaLinkBody: (f = msg.getFigmaLinkBody()) && proto.communication.FigmaLinkMsgBody.toObject(includeInstance, f),
    figmaItemNodesBody: (f = msg.getFigmaItemNodesBody()) && proto.communication.FigmaItemNodesMsgBody.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.communication.ChatMessage}
 */
proto.communication.ChatMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.communication.ChatMessage;
  return proto.communication.ChatMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.communication.ChatMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.communication.ChatMessage}
 */
proto.communication.ChatMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocId(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSystemMessage(value);
      break;
    case 4:
      var value = new proto.communication.UserHandle;
      reader.readMessage(value,proto.communication.UserHandle.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMethod(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSilent(value);
      break;
    case 9:
      var value = new proto.communication.ReadReceiptEntity;
      reader.readMessage(value,proto.communication.ReadReceiptEntity.deserializeBinaryFromReader);
      msg.addReadReceipts(value);
      break;
    case 50:
      var value = new proto.communication.CommentMsgBody;
      reader.readMessage(value,proto.communication.CommentMsgBody.deserializeBinaryFromReader);
      msg.setCommentBody(value);
      break;
    case 51:
      var value = new proto.communication.DateMsgBody;
      reader.readMessage(value,proto.communication.DateMsgBody.deserializeBinaryFromReader);
      msg.setDateBody(value);
      break;
    case 52:
      var value = new proto.communication.ItemMsgBody;
      reader.readMessage(value,proto.communication.ItemMsgBody.deserializeBinaryFromReader);
      msg.setItemBody(value);
      break;
    case 53:
      var value = new proto.communication.ItemCreateMsgBody;
      reader.readMessage(value,proto.communication.ItemCreateMsgBody.deserializeBinaryFromReader);
      msg.setItemCreateBody(value);
      break;
    case 54:
      var value = new proto.communication.ItemDeleteMsgBody;
      reader.readMessage(value,proto.communication.ItemDeleteMsgBody.deserializeBinaryFromReader);
      msg.setItemDeleteBody(value);
      break;
    case 55:
      var value = new proto.communication.DeadlineCreateMsgBody;
      reader.readMessage(value,proto.communication.DeadlineCreateMsgBody.deserializeBinaryFromReader);
      msg.setDeadlineCreateBody(value);
      break;
    case 56:
      var value = new proto.communication.DeadlineDeleteMsgBody;
      reader.readMessage(value,proto.communication.DeadlineDeleteMsgBody.deserializeBinaryFromReader);
      msg.setDeadlineDeleteBody(value);
      break;
    case 57:
      var value = new proto.communication.DeadlineItemMsgBody;
      reader.readMessage(value,proto.communication.DeadlineItemMsgBody.deserializeBinaryFromReader);
      msg.setDeadlineItemBody(value);
      break;
    case 58:
      var value = new proto.communication.FigmaLinkMsgBody;
      reader.readMessage(value,proto.communication.FigmaLinkMsgBody.deserializeBinaryFromReader);
      msg.setFigmaLinkBody(value);
      break;
    case 59:
      var value = new proto.communication.FigmaItemNodesMsgBody;
      reader.readMessage(value,proto.communication.FigmaItemNodesMsgBody.deserializeBinaryFromReader);
      msg.setFigmaItemNodesBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.communication.ChatMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.communication.ChatMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.communication.ChatMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.ChatMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDocId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSystemMessage();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.communication.UserHandle.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getMethod();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getSilent();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getReadReceiptsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.communication.ReadReceiptEntity.serializeBinaryToWriter
    );
  }
  f = message.getCommentBody();
  if (f != null) {
    writer.writeMessage(
      50,
      f,
      proto.communication.CommentMsgBody.serializeBinaryToWriter
    );
  }
  f = message.getDateBody();
  if (f != null) {
    writer.writeMessage(
      51,
      f,
      proto.communication.DateMsgBody.serializeBinaryToWriter
    );
  }
  f = message.getItemBody();
  if (f != null) {
    writer.writeMessage(
      52,
      f,
      proto.communication.ItemMsgBody.serializeBinaryToWriter
    );
  }
  f = message.getItemCreateBody();
  if (f != null) {
    writer.writeMessage(
      53,
      f,
      proto.communication.ItemCreateMsgBody.serializeBinaryToWriter
    );
  }
  f = message.getItemDeleteBody();
  if (f != null) {
    writer.writeMessage(
      54,
      f,
      proto.communication.ItemDeleteMsgBody.serializeBinaryToWriter
    );
  }
  f = message.getDeadlineCreateBody();
  if (f != null) {
    writer.writeMessage(
      55,
      f,
      proto.communication.DeadlineCreateMsgBody.serializeBinaryToWriter
    );
  }
  f = message.getDeadlineDeleteBody();
  if (f != null) {
    writer.writeMessage(
      56,
      f,
      proto.communication.DeadlineDeleteMsgBody.serializeBinaryToWriter
    );
  }
  f = message.getDeadlineItemBody();
  if (f != null) {
    writer.writeMessage(
      57,
      f,
      proto.communication.DeadlineItemMsgBody.serializeBinaryToWriter
    );
  }
  f = message.getFigmaLinkBody();
  if (f != null) {
    writer.writeMessage(
      58,
      f,
      proto.communication.FigmaLinkMsgBody.serializeBinaryToWriter
    );
  }
  f = message.getFigmaItemNodesBody();
  if (f != null) {
    writer.writeMessage(
      59,
      f,
      proto.communication.FigmaItemNodesMsgBody.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.communication.ChatMessage.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.communication.ChatMessage} returns this
 */
proto.communication.ChatMessage.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string doc_id = 2;
 * @return {string}
 */
proto.communication.ChatMessage.prototype.getDocId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.communication.ChatMessage} returns this
 */
proto.communication.ChatMessage.prototype.setDocId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool system_message = 3;
 * @return {boolean}
 */
proto.communication.ChatMessage.prototype.getSystemMessage = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.communication.ChatMessage} returns this
 */
proto.communication.ChatMessage.prototype.setSystemMessage = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional UserHandle user = 4;
 * @return {?proto.communication.UserHandle}
 */
proto.communication.ChatMessage.prototype.getUser = function() {
  return /** @type{?proto.communication.UserHandle} */ (
    jspb.Message.getWrapperField(this, proto.communication.UserHandle, 4));
};


/**
 * @param {?proto.communication.UserHandle|undefined} value
 * @return {!proto.communication.ChatMessage} returns this
*/
proto.communication.ChatMessage.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.communication.ChatMessage} returns this
 */
proto.communication.ChatMessage.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.communication.ChatMessage.prototype.hasUser = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.Timestamp timestamp = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.communication.ChatMessage.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.communication.ChatMessage} returns this
*/
proto.communication.ChatMessage.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.communication.ChatMessage} returns this
 */
proto.communication.ChatMessage.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.communication.ChatMessage.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string label = 6;
 * @return {string}
 */
proto.communication.ChatMessage.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.communication.ChatMessage} returns this
 */
proto.communication.ChatMessage.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint32 method = 7;
 * @return {number}
 */
proto.communication.ChatMessage.prototype.getMethod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.communication.ChatMessage} returns this
 */
proto.communication.ChatMessage.prototype.setMethod = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool silent = 8;
 * @return {boolean}
 */
proto.communication.ChatMessage.prototype.getSilent = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.communication.ChatMessage} returns this
 */
proto.communication.ChatMessage.prototype.setSilent = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * repeated ReadReceiptEntity read_receipts = 9;
 * @return {!Array<!proto.communication.ReadReceiptEntity>}
 */
proto.communication.ChatMessage.prototype.getReadReceiptsList = function() {
  return /** @type{!Array<!proto.communication.ReadReceiptEntity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.communication.ReadReceiptEntity, 9));
};


/**
 * @param {!Array<!proto.communication.ReadReceiptEntity>} value
 * @return {!proto.communication.ChatMessage} returns this
*/
proto.communication.ChatMessage.prototype.setReadReceiptsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.communication.ReadReceiptEntity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.communication.ReadReceiptEntity}
 */
proto.communication.ChatMessage.prototype.addReadReceipts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.communication.ReadReceiptEntity, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.communication.ChatMessage} returns this
 */
proto.communication.ChatMessage.prototype.clearReadReceiptsList = function() {
  return this.setReadReceiptsList([]);
};


/**
 * optional CommentMsgBody comment_body = 50;
 * @return {?proto.communication.CommentMsgBody}
 */
proto.communication.ChatMessage.prototype.getCommentBody = function() {
  return /** @type{?proto.communication.CommentMsgBody} */ (
    jspb.Message.getWrapperField(this, proto.communication.CommentMsgBody, 50));
};


/**
 * @param {?proto.communication.CommentMsgBody|undefined} value
 * @return {!proto.communication.ChatMessage} returns this
*/
proto.communication.ChatMessage.prototype.setCommentBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 50, proto.communication.ChatMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.communication.ChatMessage} returns this
 */
proto.communication.ChatMessage.prototype.clearCommentBody = function() {
  return this.setCommentBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.communication.ChatMessage.prototype.hasCommentBody = function() {
  return jspb.Message.getField(this, 50) != null;
};


/**
 * optional DateMsgBody date_body = 51;
 * @return {?proto.communication.DateMsgBody}
 */
proto.communication.ChatMessage.prototype.getDateBody = function() {
  return /** @type{?proto.communication.DateMsgBody} */ (
    jspb.Message.getWrapperField(this, proto.communication.DateMsgBody, 51));
};


/**
 * @param {?proto.communication.DateMsgBody|undefined} value
 * @return {!proto.communication.ChatMessage} returns this
*/
proto.communication.ChatMessage.prototype.setDateBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 51, proto.communication.ChatMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.communication.ChatMessage} returns this
 */
proto.communication.ChatMessage.prototype.clearDateBody = function() {
  return this.setDateBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.communication.ChatMessage.prototype.hasDateBody = function() {
  return jspb.Message.getField(this, 51) != null;
};


/**
 * optional ItemMsgBody item_body = 52;
 * @return {?proto.communication.ItemMsgBody}
 */
proto.communication.ChatMessage.prototype.getItemBody = function() {
  return /** @type{?proto.communication.ItemMsgBody} */ (
    jspb.Message.getWrapperField(this, proto.communication.ItemMsgBody, 52));
};


/**
 * @param {?proto.communication.ItemMsgBody|undefined} value
 * @return {!proto.communication.ChatMessage} returns this
*/
proto.communication.ChatMessage.prototype.setItemBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 52, proto.communication.ChatMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.communication.ChatMessage} returns this
 */
proto.communication.ChatMessage.prototype.clearItemBody = function() {
  return this.setItemBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.communication.ChatMessage.prototype.hasItemBody = function() {
  return jspb.Message.getField(this, 52) != null;
};


/**
 * optional ItemCreateMsgBody item_create_body = 53;
 * @return {?proto.communication.ItemCreateMsgBody}
 */
proto.communication.ChatMessage.prototype.getItemCreateBody = function() {
  return /** @type{?proto.communication.ItemCreateMsgBody} */ (
    jspb.Message.getWrapperField(this, proto.communication.ItemCreateMsgBody, 53));
};


/**
 * @param {?proto.communication.ItemCreateMsgBody|undefined} value
 * @return {!proto.communication.ChatMessage} returns this
*/
proto.communication.ChatMessage.prototype.setItemCreateBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 53, proto.communication.ChatMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.communication.ChatMessage} returns this
 */
proto.communication.ChatMessage.prototype.clearItemCreateBody = function() {
  return this.setItemCreateBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.communication.ChatMessage.prototype.hasItemCreateBody = function() {
  return jspb.Message.getField(this, 53) != null;
};


/**
 * optional ItemDeleteMsgBody item_delete_body = 54;
 * @return {?proto.communication.ItemDeleteMsgBody}
 */
proto.communication.ChatMessage.prototype.getItemDeleteBody = function() {
  return /** @type{?proto.communication.ItemDeleteMsgBody} */ (
    jspb.Message.getWrapperField(this, proto.communication.ItemDeleteMsgBody, 54));
};


/**
 * @param {?proto.communication.ItemDeleteMsgBody|undefined} value
 * @return {!proto.communication.ChatMessage} returns this
*/
proto.communication.ChatMessage.prototype.setItemDeleteBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 54, proto.communication.ChatMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.communication.ChatMessage} returns this
 */
proto.communication.ChatMessage.prototype.clearItemDeleteBody = function() {
  return this.setItemDeleteBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.communication.ChatMessage.prototype.hasItemDeleteBody = function() {
  return jspb.Message.getField(this, 54) != null;
};


/**
 * optional DeadlineCreateMsgBody deadline_create_body = 55;
 * @return {?proto.communication.DeadlineCreateMsgBody}
 */
proto.communication.ChatMessage.prototype.getDeadlineCreateBody = function() {
  return /** @type{?proto.communication.DeadlineCreateMsgBody} */ (
    jspb.Message.getWrapperField(this, proto.communication.DeadlineCreateMsgBody, 55));
};


/**
 * @param {?proto.communication.DeadlineCreateMsgBody|undefined} value
 * @return {!proto.communication.ChatMessage} returns this
*/
proto.communication.ChatMessage.prototype.setDeadlineCreateBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 55, proto.communication.ChatMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.communication.ChatMessage} returns this
 */
proto.communication.ChatMessage.prototype.clearDeadlineCreateBody = function() {
  return this.setDeadlineCreateBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.communication.ChatMessage.prototype.hasDeadlineCreateBody = function() {
  return jspb.Message.getField(this, 55) != null;
};


/**
 * optional DeadlineDeleteMsgBody deadline_delete_body = 56;
 * @return {?proto.communication.DeadlineDeleteMsgBody}
 */
proto.communication.ChatMessage.prototype.getDeadlineDeleteBody = function() {
  return /** @type{?proto.communication.DeadlineDeleteMsgBody} */ (
    jspb.Message.getWrapperField(this, proto.communication.DeadlineDeleteMsgBody, 56));
};


/**
 * @param {?proto.communication.DeadlineDeleteMsgBody|undefined} value
 * @return {!proto.communication.ChatMessage} returns this
*/
proto.communication.ChatMessage.prototype.setDeadlineDeleteBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 56, proto.communication.ChatMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.communication.ChatMessage} returns this
 */
proto.communication.ChatMessage.prototype.clearDeadlineDeleteBody = function() {
  return this.setDeadlineDeleteBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.communication.ChatMessage.prototype.hasDeadlineDeleteBody = function() {
  return jspb.Message.getField(this, 56) != null;
};


/**
 * optional DeadlineItemMsgBody deadline_item_body = 57;
 * @return {?proto.communication.DeadlineItemMsgBody}
 */
proto.communication.ChatMessage.prototype.getDeadlineItemBody = function() {
  return /** @type{?proto.communication.DeadlineItemMsgBody} */ (
    jspb.Message.getWrapperField(this, proto.communication.DeadlineItemMsgBody, 57));
};


/**
 * @param {?proto.communication.DeadlineItemMsgBody|undefined} value
 * @return {!proto.communication.ChatMessage} returns this
*/
proto.communication.ChatMessage.prototype.setDeadlineItemBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 57, proto.communication.ChatMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.communication.ChatMessage} returns this
 */
proto.communication.ChatMessage.prototype.clearDeadlineItemBody = function() {
  return this.setDeadlineItemBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.communication.ChatMessage.prototype.hasDeadlineItemBody = function() {
  return jspb.Message.getField(this, 57) != null;
};


/**
 * optional FigmaLinkMsgBody figma_link_body = 58;
 * @return {?proto.communication.FigmaLinkMsgBody}
 */
proto.communication.ChatMessage.prototype.getFigmaLinkBody = function() {
  return /** @type{?proto.communication.FigmaLinkMsgBody} */ (
    jspb.Message.getWrapperField(this, proto.communication.FigmaLinkMsgBody, 58));
};


/**
 * @param {?proto.communication.FigmaLinkMsgBody|undefined} value
 * @return {!proto.communication.ChatMessage} returns this
*/
proto.communication.ChatMessage.prototype.setFigmaLinkBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 58, proto.communication.ChatMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.communication.ChatMessage} returns this
 */
proto.communication.ChatMessage.prototype.clearFigmaLinkBody = function() {
  return this.setFigmaLinkBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.communication.ChatMessage.prototype.hasFigmaLinkBody = function() {
  return jspb.Message.getField(this, 58) != null;
};


/**
 * optional FigmaItemNodesMsgBody figma_item_nodes_body = 59;
 * @return {?proto.communication.FigmaItemNodesMsgBody}
 */
proto.communication.ChatMessage.prototype.getFigmaItemNodesBody = function() {
  return /** @type{?proto.communication.FigmaItemNodesMsgBody} */ (
    jspb.Message.getWrapperField(this, proto.communication.FigmaItemNodesMsgBody, 59));
};


/**
 * @param {?proto.communication.FigmaItemNodesMsgBody|undefined} value
 * @return {!proto.communication.ChatMessage} returns this
*/
proto.communication.ChatMessage.prototype.setFigmaItemNodesBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 59, proto.communication.ChatMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.communication.ChatMessage} returns this
 */
proto.communication.ChatMessage.prototype.clearFigmaItemNodesBody = function() {
  return this.setFigmaItemNodesBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.communication.ChatMessage.prototype.hasFigmaItemNodesBody = function() {
  return jspb.Message.getField(this, 59) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.communication.ReadReceiptEntity.prototype.toObject = function(opt_includeInstance) {
  return proto.communication.ReadReceiptEntity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.communication.ReadReceiptEntity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.ReadReceiptEntity.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    read: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.communication.ReadReceiptEntity}
 */
proto.communication.ReadReceiptEntity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.communication.ReadReceiptEntity;
  return proto.communication.ReadReceiptEntity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.communication.ReadReceiptEntity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.communication.ReadReceiptEntity}
 */
proto.communication.ReadReceiptEntity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRead(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.communication.ReadReceiptEntity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.communication.ReadReceiptEntity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.communication.ReadReceiptEntity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.ReadReceiptEntity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRead();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.communication.ReadReceiptEntity.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.communication.ReadReceiptEntity} returns this
 */
proto.communication.ReadReceiptEntity.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool read = 2;
 * @return {boolean}
 */
proto.communication.ReadReceiptEntity.prototype.getRead = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.communication.ReadReceiptEntity} returns this
 */
proto.communication.ReadReceiptEntity.prototype.setRead = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.communication.FigmaItemNodesMsgBody.prototype.toObject = function(opt_includeInstance) {
  return proto.communication.FigmaItemNodesMsgBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.communication.FigmaItemNodesMsgBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.FigmaItemNodesMsgBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    componentId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.communication.FigmaItemNodesMsgBody}
 */
proto.communication.FigmaItemNodesMsgBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.communication.FigmaItemNodesMsgBody;
  return proto.communication.FigmaItemNodesMsgBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.communication.FigmaItemNodesMsgBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.communication.FigmaItemNodesMsgBody}
 */
proto.communication.FigmaItemNodesMsgBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setItemId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setComponentId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.communication.FigmaItemNodesMsgBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.communication.FigmaItemNodesMsgBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.communication.FigmaItemNodesMsgBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.FigmaItemNodesMsgBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getComponentId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string item_id = 1;
 * @return {string}
 */
proto.communication.FigmaItemNodesMsgBody.prototype.getItemId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.communication.FigmaItemNodesMsgBody} returns this
 */
proto.communication.FigmaItemNodesMsgBody.prototype.setItemId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string component_id = 2;
 * @return {string}
 */
proto.communication.FigmaItemNodesMsgBody.prototype.getComponentId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.communication.FigmaItemNodesMsgBody} returns this
 */
proto.communication.FigmaItemNodesMsgBody.prototype.setComponentId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.communication.FigmaLinkMsgBody.prototype.toObject = function(opt_includeInstance) {
  return proto.communication.FigmaLinkMsgBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.communication.FigmaLinkMsgBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.FigmaLinkMsgBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    figmaLink: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.communication.FigmaLinkMsgBody}
 */
proto.communication.FigmaLinkMsgBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.communication.FigmaLinkMsgBody;
  return proto.communication.FigmaLinkMsgBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.communication.FigmaLinkMsgBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.communication.FigmaLinkMsgBody}
 */
proto.communication.FigmaLinkMsgBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFigmaLink(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.communication.FigmaLinkMsgBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.communication.FigmaLinkMsgBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.communication.FigmaLinkMsgBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.FigmaLinkMsgBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFigmaLink();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string figma_link = 1;
 * @return {string}
 */
proto.communication.FigmaLinkMsgBody.prototype.getFigmaLink = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.communication.FigmaLinkMsgBody} returns this
 */
proto.communication.FigmaLinkMsgBody.prototype.setFigmaLink = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.communication.CommentMsgBody.prototype.toObject = function(opt_includeInstance) {
  return proto.communication.CommentMsgBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.communication.CommentMsgBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.CommentMsgBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.communication.CommentMsgBody}
 */
proto.communication.CommentMsgBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.communication.CommentMsgBody;
  return proto.communication.CommentMsgBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.communication.CommentMsgBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.communication.CommentMsgBody}
 */
proto.communication.CommentMsgBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.communication.CommentMsgBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.communication.CommentMsgBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.communication.CommentMsgBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.CommentMsgBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.communication.CommentMsgBody.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.communication.CommentMsgBody} returns this
 */
proto.communication.CommentMsgBody.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.communication.ItemCreateMsgBody.prototype.toObject = function(opt_includeInstance) {
  return proto.communication.ItemCreateMsgBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.communication.ItemCreateMsgBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.ItemCreateMsgBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    item: (f = msg.getItem()) && communication_item_pb.ItemEntity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.communication.ItemCreateMsgBody}
 */
proto.communication.ItemCreateMsgBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.communication.ItemCreateMsgBody;
  return proto.communication.ItemCreateMsgBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.communication.ItemCreateMsgBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.communication.ItemCreateMsgBody}
 */
proto.communication.ItemCreateMsgBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new communication_item_pb.ItemEntity;
      reader.readMessage(value,communication_item_pb.ItemEntity.deserializeBinaryFromReader);
      msg.setItem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.communication.ItemCreateMsgBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.communication.ItemCreateMsgBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.communication.ItemCreateMsgBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.ItemCreateMsgBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItem();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      communication_item_pb.ItemEntity.serializeBinaryToWriter
    );
  }
};


/**
 * optional ItemEntity item = 1;
 * @return {?proto.communication.ItemEntity}
 */
proto.communication.ItemCreateMsgBody.prototype.getItem = function() {
  return /** @type{?proto.communication.ItemEntity} */ (
    jspb.Message.getWrapperField(this, communication_item_pb.ItemEntity, 1));
};


/**
 * @param {?proto.communication.ItemEntity|undefined} value
 * @return {!proto.communication.ItemCreateMsgBody} returns this
*/
proto.communication.ItemCreateMsgBody.prototype.setItem = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.communication.ItemCreateMsgBody} returns this
 */
proto.communication.ItemCreateMsgBody.prototype.clearItem = function() {
  return this.setItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.communication.ItemCreateMsgBody.prototype.hasItem = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.communication.ItemDeleteMsgBody.prototype.toObject = function(opt_includeInstance) {
  return proto.communication.ItemDeleteMsgBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.communication.ItemDeleteMsgBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.ItemDeleteMsgBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    item: (f = msg.getItem()) && communication_item_pb.ItemEntity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.communication.ItemDeleteMsgBody}
 */
proto.communication.ItemDeleteMsgBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.communication.ItemDeleteMsgBody;
  return proto.communication.ItemDeleteMsgBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.communication.ItemDeleteMsgBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.communication.ItemDeleteMsgBody}
 */
proto.communication.ItemDeleteMsgBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new communication_item_pb.ItemEntity;
      reader.readMessage(value,communication_item_pb.ItemEntity.deserializeBinaryFromReader);
      msg.setItem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.communication.ItemDeleteMsgBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.communication.ItemDeleteMsgBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.communication.ItemDeleteMsgBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.ItemDeleteMsgBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItem();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      communication_item_pb.ItemEntity.serializeBinaryToWriter
    );
  }
};


/**
 * optional ItemEntity item = 1;
 * @return {?proto.communication.ItemEntity}
 */
proto.communication.ItemDeleteMsgBody.prototype.getItem = function() {
  return /** @type{?proto.communication.ItemEntity} */ (
    jspb.Message.getWrapperField(this, communication_item_pb.ItemEntity, 1));
};


/**
 * @param {?proto.communication.ItemEntity|undefined} value
 * @return {!proto.communication.ItemDeleteMsgBody} returns this
*/
proto.communication.ItemDeleteMsgBody.prototype.setItem = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.communication.ItemDeleteMsgBody} returns this
 */
proto.communication.ItemDeleteMsgBody.prototype.clearItem = function() {
  return this.setItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.communication.ItemDeleteMsgBody.prototype.hasItem = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.communication.DeadlineCreateMsgBody.prototype.toObject = function(opt_includeInstance) {
  return proto.communication.DeadlineCreateMsgBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.communication.DeadlineCreateMsgBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.DeadlineCreateMsgBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    deadline: (f = msg.getDeadline()) && communication_deadline_pb.DeadlineEntity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.communication.DeadlineCreateMsgBody}
 */
proto.communication.DeadlineCreateMsgBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.communication.DeadlineCreateMsgBody;
  return proto.communication.DeadlineCreateMsgBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.communication.DeadlineCreateMsgBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.communication.DeadlineCreateMsgBody}
 */
proto.communication.DeadlineCreateMsgBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new communication_deadline_pb.DeadlineEntity;
      reader.readMessage(value,communication_deadline_pb.DeadlineEntity.deserializeBinaryFromReader);
      msg.setDeadline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.communication.DeadlineCreateMsgBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.communication.DeadlineCreateMsgBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.communication.DeadlineCreateMsgBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.DeadlineCreateMsgBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeadline();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      communication_deadline_pb.DeadlineEntity.serializeBinaryToWriter
    );
  }
};


/**
 * optional DeadlineEntity deadline = 1;
 * @return {?proto.communication.DeadlineEntity}
 */
proto.communication.DeadlineCreateMsgBody.prototype.getDeadline = function() {
  return /** @type{?proto.communication.DeadlineEntity} */ (
    jspb.Message.getWrapperField(this, communication_deadline_pb.DeadlineEntity, 1));
};


/**
 * @param {?proto.communication.DeadlineEntity|undefined} value
 * @return {!proto.communication.DeadlineCreateMsgBody} returns this
*/
proto.communication.DeadlineCreateMsgBody.prototype.setDeadline = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.communication.DeadlineCreateMsgBody} returns this
 */
proto.communication.DeadlineCreateMsgBody.prototype.clearDeadline = function() {
  return this.setDeadline(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.communication.DeadlineCreateMsgBody.prototype.hasDeadline = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.communication.DeadlineDeleteMsgBody.prototype.toObject = function(opt_includeInstance) {
  return proto.communication.DeadlineDeleteMsgBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.communication.DeadlineDeleteMsgBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.DeadlineDeleteMsgBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    deadline: (f = msg.getDeadline()) && communication_deadline_pb.DeadlineEntity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.communication.DeadlineDeleteMsgBody}
 */
proto.communication.DeadlineDeleteMsgBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.communication.DeadlineDeleteMsgBody;
  return proto.communication.DeadlineDeleteMsgBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.communication.DeadlineDeleteMsgBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.communication.DeadlineDeleteMsgBody}
 */
proto.communication.DeadlineDeleteMsgBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new communication_deadline_pb.DeadlineEntity;
      reader.readMessage(value,communication_deadline_pb.DeadlineEntity.deserializeBinaryFromReader);
      msg.setDeadline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.communication.DeadlineDeleteMsgBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.communication.DeadlineDeleteMsgBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.communication.DeadlineDeleteMsgBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.DeadlineDeleteMsgBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeadline();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      communication_deadline_pb.DeadlineEntity.serializeBinaryToWriter
    );
  }
};


/**
 * optional DeadlineEntity deadline = 1;
 * @return {?proto.communication.DeadlineEntity}
 */
proto.communication.DeadlineDeleteMsgBody.prototype.getDeadline = function() {
  return /** @type{?proto.communication.DeadlineEntity} */ (
    jspb.Message.getWrapperField(this, communication_deadline_pb.DeadlineEntity, 1));
};


/**
 * @param {?proto.communication.DeadlineEntity|undefined} value
 * @return {!proto.communication.DeadlineDeleteMsgBody} returns this
*/
proto.communication.DeadlineDeleteMsgBody.prototype.setDeadline = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.communication.DeadlineDeleteMsgBody} returns this
 */
proto.communication.DeadlineDeleteMsgBody.prototype.clearDeadline = function() {
  return this.setDeadline(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.communication.DeadlineDeleteMsgBody.prototype.hasDeadline = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.communication.ItemMsgBody.prototype.toObject = function(opt_includeInstance) {
  return proto.communication.ItemMsgBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.communication.ItemMsgBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.ItemMsgBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemId: jspb.Message.getFieldWithDefault(msg, 8, ""),
    newVersion: jspb.Message.getFieldWithDefault(msg, 1, ""),
    oldVersion: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.communication.ItemMsgBody}
 */
proto.communication.ItemMsgBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.communication.ItemMsgBody;
  return proto.communication.ItemMsgBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.communication.ItemMsgBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.communication.ItemMsgBody}
 */
proto.communication.ItemMsgBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setItemId(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOldVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.communication.ItemMsgBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.communication.ItemMsgBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.communication.ItemMsgBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.ItemMsgBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getNewVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOldVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string item_id = 8;
 * @return {string}
 */
proto.communication.ItemMsgBody.prototype.getItemId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.communication.ItemMsgBody} returns this
 */
proto.communication.ItemMsgBody.prototype.setItemId = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string new_version = 1;
 * @return {string}
 */
proto.communication.ItemMsgBody.prototype.getNewVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.communication.ItemMsgBody} returns this
 */
proto.communication.ItemMsgBody.prototype.setNewVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string old_version = 2;
 * @return {string}
 */
proto.communication.ItemMsgBody.prototype.getOldVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.communication.ItemMsgBody} returns this
 */
proto.communication.ItemMsgBody.prototype.setOldVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.communication.DateMsgBody.prototype.toObject = function(opt_includeInstance) {
  return proto.communication.DateMsgBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.communication.DateMsgBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.DateMsgBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    deadlineId: jspb.Message.getFieldWithDefault(msg, 8, ""),
    newVersion: (f = msg.getNewVersion()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    oldVersion: (f = msg.getOldVersion()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.communication.DateMsgBody}
 */
proto.communication.DateMsgBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.communication.DateMsgBody;
  return proto.communication.DateMsgBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.communication.DateMsgBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.communication.DateMsgBody}
 */
proto.communication.DateMsgBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeadlineId(value);
      break;
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setNewVersion(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setOldVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.communication.DateMsgBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.communication.DateMsgBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.communication.DateMsgBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.DateMsgBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeadlineId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getNewVersion();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getOldVersion();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string deadline_id = 8;
 * @return {string}
 */
proto.communication.DateMsgBody.prototype.getDeadlineId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.communication.DateMsgBody} returns this
 */
proto.communication.DateMsgBody.prototype.setDeadlineId = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional google.protobuf.Timestamp new_version = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.communication.DateMsgBody.prototype.getNewVersion = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.communication.DateMsgBody} returns this
*/
proto.communication.DateMsgBody.prototype.setNewVersion = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.communication.DateMsgBody} returns this
 */
proto.communication.DateMsgBody.prototype.clearNewVersion = function() {
  return this.setNewVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.communication.DateMsgBody.prototype.hasNewVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp old_version = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.communication.DateMsgBody.prototype.getOldVersion = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.communication.DateMsgBody} returns this
*/
proto.communication.DateMsgBody.prototype.setOldVersion = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.communication.DateMsgBody} returns this
 */
proto.communication.DateMsgBody.prototype.clearOldVersion = function() {
  return this.setOldVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.communication.DateMsgBody.prototype.hasOldVersion = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.communication.DeadlineItemMsgBody.repeatedFields_ = [14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.communication.DeadlineItemMsgBody.prototype.toObject = function(opt_includeInstance) {
  return proto.communication.DeadlineItemMsgBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.communication.DeadlineItemMsgBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.DeadlineItemMsgBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    deadline: (f = msg.getDeadline()) && communication_deadline_pb.DeadlineEntity.toObject(includeInstance, f),
    newItemsList: jspb.Message.toObjectList(msg.getNewItemsList(),
    communication_item_pb.ItemNub.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.communication.DeadlineItemMsgBody}
 */
proto.communication.DeadlineItemMsgBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.communication.DeadlineItemMsgBody;
  return proto.communication.DeadlineItemMsgBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.communication.DeadlineItemMsgBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.communication.DeadlineItemMsgBody}
 */
proto.communication.DeadlineItemMsgBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new communication_deadline_pb.DeadlineEntity;
      reader.readMessage(value,communication_deadline_pb.DeadlineEntity.deserializeBinaryFromReader);
      msg.setDeadline(value);
      break;
    case 14:
      var value = new communication_item_pb.ItemNub;
      reader.readMessage(value,communication_item_pb.ItemNub.deserializeBinaryFromReader);
      msg.addNewItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.communication.DeadlineItemMsgBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.communication.DeadlineItemMsgBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.communication.DeadlineItemMsgBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.DeadlineItemMsgBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeadline();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      communication_deadline_pb.DeadlineEntity.serializeBinaryToWriter
    );
  }
  f = message.getNewItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      communication_item_pb.ItemNub.serializeBinaryToWriter
    );
  }
};


/**
 * optional DeadlineEntity deadline = 1;
 * @return {?proto.communication.DeadlineEntity}
 */
proto.communication.DeadlineItemMsgBody.prototype.getDeadline = function() {
  return /** @type{?proto.communication.DeadlineEntity} */ (
    jspb.Message.getWrapperField(this, communication_deadline_pb.DeadlineEntity, 1));
};


/**
 * @param {?proto.communication.DeadlineEntity|undefined} value
 * @return {!proto.communication.DeadlineItemMsgBody} returns this
*/
proto.communication.DeadlineItemMsgBody.prototype.setDeadline = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.communication.DeadlineItemMsgBody} returns this
 */
proto.communication.DeadlineItemMsgBody.prototype.clearDeadline = function() {
  return this.setDeadline(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.communication.DeadlineItemMsgBody.prototype.hasDeadline = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ItemNub new_items = 14;
 * @return {!Array<!proto.communication.ItemNub>}
 */
proto.communication.DeadlineItemMsgBody.prototype.getNewItemsList = function() {
  return /** @type{!Array<!proto.communication.ItemNub>} */ (
    jspb.Message.getRepeatedWrapperField(this, communication_item_pb.ItemNub, 14));
};


/**
 * @param {!Array<!proto.communication.ItemNub>} value
 * @return {!proto.communication.DeadlineItemMsgBody} returns this
*/
proto.communication.DeadlineItemMsgBody.prototype.setNewItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.communication.ItemNub=} opt_value
 * @param {number=} opt_index
 * @return {!proto.communication.ItemNub}
 */
proto.communication.DeadlineItemMsgBody.prototype.addNewItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.communication.ItemNub, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.communication.DeadlineItemMsgBody} returns this
 */
proto.communication.DeadlineItemMsgBody.prototype.clearNewItemsList = function() {
  return this.setNewItemsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.communication.UserJoin.prototype.toObject = function(opt_includeInstance) {
  return proto.communication.UserJoin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.communication.UserJoin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.UserJoin.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    roomId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.communication.UserJoin}
 */
proto.communication.UserJoin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.communication.UserJoin;
  return proto.communication.UserJoin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.communication.UserJoin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.communication.UserJoin}
 */
proto.communication.UserJoin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.communication.UserJoin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.communication.UserJoin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.communication.UserJoin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.UserJoin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.communication.UserJoin.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.communication.UserJoin} returns this
 */
proto.communication.UserJoin.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string room_id = 2;
 * @return {string}
 */
proto.communication.UserJoin.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.communication.UserJoin} returns this
 */
proto.communication.UserJoin.prototype.setRoomId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.communication.UserLeave.prototype.toObject = function(opt_includeInstance) {
  return proto.communication.UserLeave.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.communication.UserLeave} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.UserLeave.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    roomId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.communication.UserLeave}
 */
proto.communication.UserLeave.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.communication.UserLeave;
  return proto.communication.UserLeave.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.communication.UserLeave} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.communication.UserLeave}
 */
proto.communication.UserLeave.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.communication.UserLeave.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.communication.UserLeave.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.communication.UserLeave} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.UserLeave.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.communication.UserLeave.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.communication.UserLeave} returns this
 */
proto.communication.UserLeave.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string room_id = 2;
 * @return {string}
 */
proto.communication.UserLeave.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.communication.UserLeave} returns this
 */
proto.communication.UserLeave.prototype.setRoomId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.communication.UserClose.prototype.toObject = function(opt_includeInstance) {
  return proto.communication.UserClose.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.communication.UserClose} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.UserClose.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.communication.UserClose}
 */
proto.communication.UserClose.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.communication.UserClose;
  return proto.communication.UserClose.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.communication.UserClose} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.communication.UserClose}
 */
proto.communication.UserClose.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.communication.UserClose.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.communication.UserClose.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.communication.UserClose} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.UserClose.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.communication.SendRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.communication.SendRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.communication.SendRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.SendRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    roomId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    body: (f = msg.getBody()) && proto.communication.CommentMsgBody.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.communication.SendRequest}
 */
proto.communication.SendRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.communication.SendRequest;
  return proto.communication.SendRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.communication.SendRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.communication.SendRequest}
 */
proto.communication.SendRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 4:
      var value = new proto.communication.CommentMsgBody;
      reader.readMessage(value,proto.communication.CommentMsgBody.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.communication.SendRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.communication.SendRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.communication.SendRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.SendRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.communication.CommentMsgBody.serializeBinaryToWriter
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.communication.SendRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.communication.SendRequest} returns this
 */
proto.communication.SendRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string room_id = 2;
 * @return {string}
 */
proto.communication.SendRequest.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.communication.SendRequest} returns this
 */
proto.communication.SendRequest.prototype.setRoomId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional CommentMsgBody body = 4;
 * @return {?proto.communication.CommentMsgBody}
 */
proto.communication.SendRequest.prototype.getBody = function() {
  return /** @type{?proto.communication.CommentMsgBody} */ (
    jspb.Message.getWrapperField(this, proto.communication.CommentMsgBody, 4));
};


/**
 * @param {?proto.communication.CommentMsgBody|undefined} value
 * @return {!proto.communication.SendRequest} returns this
*/
proto.communication.SendRequest.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.communication.SendRequest} returns this
 */
proto.communication.SendRequest.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.communication.SendRequest.prototype.hasBody = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.communication.SendResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.communication.SendResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.communication.SendResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.SendResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.communication.SendResponse}
 */
proto.communication.SendResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.communication.SendResponse;
  return proto.communication.SendResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.communication.SendResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.communication.SendResponse}
 */
proto.communication.SendResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.communication.SendResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.communication.SendResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.communication.SendResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.SendResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.communication.ChatPullRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.communication.ChatPullRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.communication.ChatPullRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.ChatPullRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.communication.ChatPullRequest}
 */
proto.communication.ChatPullRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.communication.ChatPullRequest;
  return proto.communication.ChatPullRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.communication.ChatPullRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.communication.ChatPullRequest}
 */
proto.communication.ChatPullRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.communication.ChatPullRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.communication.ChatPullRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.communication.ChatPullRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.ChatPullRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string room_id = 1;
 * @return {string}
 */
proto.communication.ChatPullRequest.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.communication.ChatPullRequest} returns this
 */
proto.communication.ChatPullRequest.prototype.setRoomId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.communication.ChatPullRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.communication.ChatPullRequest} returns this
 */
proto.communication.ChatPullRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.communication.ChatMessageSet.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.communication.ChatMessageSet.prototype.toObject = function(opt_includeInstance) {
  return proto.communication.ChatMessageSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.communication.ChatMessageSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.ChatMessageSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.communication.ChatMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.communication.ChatMessageSet}
 */
proto.communication.ChatMessageSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.communication.ChatMessageSet;
  return proto.communication.ChatMessageSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.communication.ChatMessageSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.communication.ChatMessageSet}
 */
proto.communication.ChatMessageSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 2:
      var value = new proto.communication.ChatMessage;
      reader.readMessage(value,proto.communication.ChatMessage.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.communication.ChatMessageSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.communication.ChatMessageSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.communication.ChatMessageSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.ChatMessageSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.communication.ChatMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional string room_id = 1;
 * @return {string}
 */
proto.communication.ChatMessageSet.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.communication.ChatMessageSet} returns this
 */
proto.communication.ChatMessageSet.prototype.setRoomId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated ChatMessage messages = 2;
 * @return {!Array<!proto.communication.ChatMessage>}
 */
proto.communication.ChatMessageSet.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.communication.ChatMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.communication.ChatMessage, 2));
};


/**
 * @param {!Array<!proto.communication.ChatMessage>} value
 * @return {!proto.communication.ChatMessageSet} returns this
*/
proto.communication.ChatMessageSet.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.communication.ChatMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.communication.ChatMessage}
 */
proto.communication.ChatMessageSet.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.communication.ChatMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.communication.ChatMessageSet} returns this
 */
proto.communication.ChatMessageSet.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.communication.NewMessagesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.communication.NewMessagesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.communication.NewMessagesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.NewMessagesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.communication.NewMessagesRequest}
 */
proto.communication.NewMessagesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.communication.NewMessagesRequest;
  return proto.communication.NewMessagesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.communication.NewMessagesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.communication.NewMessagesRequest}
 */
proto.communication.NewMessagesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.communication.NewMessagesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.communication.NewMessagesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.communication.NewMessagesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.NewMessagesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.communication.NewMessagesRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.communication.NewMessagesRequest} returns this
 */
proto.communication.NewMessagesRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.communication.NewMessageEntity.prototype.toObject = function(opt_includeInstance) {
  return proto.communication.NewMessageEntity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.communication.NewMessageEntity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.NewMessageEntity.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: (f = msg.getMessage()) && proto.communication.ChatMessage.toObject(includeInstance, f),
    document: (f = msg.getDocument()) && communication_document_pb.DocumentNub.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.communication.NewMessageEntity}
 */
proto.communication.NewMessageEntity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.communication.NewMessageEntity;
  return proto.communication.NewMessageEntity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.communication.NewMessageEntity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.communication.NewMessageEntity}
 */
proto.communication.NewMessageEntity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.communication.ChatMessage;
      reader.readMessage(value,proto.communication.ChatMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 3:
      var value = new communication_document_pb.DocumentNub;
      reader.readMessage(value,communication_document_pb.DocumentNub.deserializeBinaryFromReader);
      msg.setDocument(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.communication.NewMessageEntity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.communication.NewMessageEntity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.communication.NewMessageEntity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.NewMessageEntity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.communication.ChatMessage.serializeBinaryToWriter
    );
  }
  f = message.getDocument();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      communication_document_pb.DocumentNub.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChatMessage message = 1;
 * @return {?proto.communication.ChatMessage}
 */
proto.communication.NewMessageEntity.prototype.getMessage = function() {
  return /** @type{?proto.communication.ChatMessage} */ (
    jspb.Message.getWrapperField(this, proto.communication.ChatMessage, 1));
};


/**
 * @param {?proto.communication.ChatMessage|undefined} value
 * @return {!proto.communication.NewMessageEntity} returns this
*/
proto.communication.NewMessageEntity.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.communication.NewMessageEntity} returns this
 */
proto.communication.NewMessageEntity.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.communication.NewMessageEntity.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DocumentNub document = 3;
 * @return {?proto.communication.DocumentNub}
 */
proto.communication.NewMessageEntity.prototype.getDocument = function() {
  return /** @type{?proto.communication.DocumentNub} */ (
    jspb.Message.getWrapperField(this, communication_document_pb.DocumentNub, 3));
};


/**
 * @param {?proto.communication.DocumentNub|undefined} value
 * @return {!proto.communication.NewMessageEntity} returns this
*/
proto.communication.NewMessageEntity.prototype.setDocument = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.communication.NewMessageEntity} returns this
 */
proto.communication.NewMessageEntity.prototype.clearDocument = function() {
  return this.setDocument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.communication.NewMessageEntity.prototype.hasDocument = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.communication.NewMessageSet.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.communication.NewMessageSet.prototype.toObject = function(opt_includeInstance) {
  return proto.communication.NewMessageSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.communication.NewMessageSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.NewMessageSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.communication.NewMessageEntity.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.communication.NewMessageSet}
 */
proto.communication.NewMessageSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.communication.NewMessageSet;
  return proto.communication.NewMessageSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.communication.NewMessageSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.communication.NewMessageSet}
 */
proto.communication.NewMessageSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.communication.NewMessageEntity;
      reader.readMessage(value,proto.communication.NewMessageEntity.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.communication.NewMessageSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.communication.NewMessageSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.communication.NewMessageSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.communication.NewMessageSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.communication.NewMessageEntity.serializeBinaryToWriter
    );
  }
};


/**
 * repeated NewMessageEntity messages = 2;
 * @return {!Array<!proto.communication.NewMessageEntity>}
 */
proto.communication.NewMessageSet.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.communication.NewMessageEntity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.communication.NewMessageEntity, 2));
};


/**
 * @param {!Array<!proto.communication.NewMessageEntity>} value
 * @return {!proto.communication.NewMessageSet} returns this
*/
proto.communication.NewMessageSet.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.communication.NewMessageEntity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.communication.NewMessageEntity}
 */
proto.communication.NewMessageSet.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.communication.NewMessageEntity, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.communication.NewMessageSet} returns this
 */
proto.communication.NewMessageSet.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};


goog.object.extend(exports, proto.communication);
