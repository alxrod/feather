// source: communication/chat.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var communication_contract_pb = require('../communication/contract_pb.js');
goog.object.extend(proto, communication_contract_pb);
goog.exportSymbol('proto.main.ChatLabel', null, global);
goog.exportSymbol('proto.main.ChatMessage', null, global);
goog.exportSymbol('proto.main.ChatMessage.BodyCase', null, global);
goog.exportSymbol('proto.main.ChatMessageSet', null, global);
goog.exportSymbol('proto.main.ChatPullRequest', null, global);
goog.exportSymbol('proto.main.CommentMsgBody', null, global);
goog.exportSymbol('proto.main.DateMsgBody', null, global);
goog.exportSymbol('proto.main.ItemCreateMsgBody', null, global);
goog.exportSymbol('proto.main.ItemDeleteMsgBody', null, global);
goog.exportSymbol('proto.main.ItemMsgBody', null, global);
goog.exportSymbol('proto.main.PayoutMsgBody', null, global);
goog.exportSymbol('proto.main.PriceMsgBody', null, global);
goog.exportSymbol('proto.main.RevMsgBody', null, global);
goog.exportSymbol('proto.main.SendRequest', null, global);
goog.exportSymbol('proto.main.SendRequest.BodyCase', null, global);
goog.exportSymbol('proto.main.SendResponse', null, global);
goog.exportSymbol('proto.main.UserClose', null, global);
goog.exportSymbol('proto.main.UserHandle', null, global);
goog.exportSymbol('proto.main.UserJoin', null, global);
goog.exportSymbol('proto.main.UserLeave', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main.UserHandle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.main.UserHandle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.main.UserHandle.displayName = 'proto.main.UserHandle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main.ChatMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.main.ChatMessage.oneofGroups_);
};
goog.inherits(proto.main.ChatMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.main.ChatMessage.displayName = 'proto.main.ChatMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main.ChatLabel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.main.ChatLabel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.main.ChatLabel.displayName = 'proto.main.ChatLabel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main.CommentMsgBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.main.CommentMsgBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.main.CommentMsgBody.displayName = 'proto.main.CommentMsgBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main.ItemCreateMsgBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.main.ItemCreateMsgBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.main.ItemCreateMsgBody.displayName = 'proto.main.ItemCreateMsgBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main.ItemDeleteMsgBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.main.ItemDeleteMsgBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.main.ItemDeleteMsgBody.displayName = 'proto.main.ItemDeleteMsgBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main.ItemMsgBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.main.ItemMsgBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.main.ItemMsgBody.displayName = 'proto.main.ItemMsgBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main.DateMsgBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.main.DateMsgBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.main.DateMsgBody.displayName = 'proto.main.DateMsgBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main.PayoutMsgBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.main.PayoutMsgBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.main.PayoutMsgBody.displayName = 'proto.main.PayoutMsgBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main.PriceMsgBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.main.PriceMsgBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.main.PriceMsgBody.displayName = 'proto.main.PriceMsgBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main.RevMsgBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.main.RevMsgBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.main.RevMsgBody.displayName = 'proto.main.RevMsgBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main.UserJoin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.main.UserJoin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.main.UserJoin.displayName = 'proto.main.UserJoin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main.UserLeave = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.main.UserLeave, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.main.UserLeave.displayName = 'proto.main.UserLeave';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main.UserClose = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.main.UserClose, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.main.UserClose.displayName = 'proto.main.UserClose';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main.SendRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.main.SendRequest.oneofGroups_);
};
goog.inherits(proto.main.SendRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.main.SendRequest.displayName = 'proto.main.SendRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main.SendResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.main.SendResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.main.SendResponse.displayName = 'proto.main.SendResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main.ChatPullRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.main.ChatPullRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.main.ChatPullRequest.displayName = 'proto.main.ChatPullRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main.ChatMessageSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.main.ChatMessageSet.repeatedFields_, null);
};
goog.inherits(proto.main.ChatMessageSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.main.ChatMessageSet.displayName = 'proto.main.ChatMessageSet';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.main.UserHandle.prototype.toObject = function(opt_includeInstance) {
  return proto.main.UserHandle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.main.UserHandle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.UserHandle.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    username: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main.UserHandle}
 */
proto.main.UserHandle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main.UserHandle;
  return proto.main.UserHandle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main.UserHandle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main.UserHandle}
 */
proto.main.UserHandle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main.UserHandle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.main.UserHandle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.main.UserHandle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.UserHandle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.main.UserHandle.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.main.UserHandle} returns this
 */
proto.main.UserHandle.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string username = 2;
 * @return {string}
 */
proto.main.UserHandle.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.main.UserHandle} returns this
 */
proto.main.UserHandle.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.main.ChatMessage.oneofGroups_ = [[6,7,11,8,9,10,12,13]];

/**
 * @enum {number}
 */
proto.main.ChatMessage.BodyCase = {
  BODY_NOT_SET: 0,
  COMMENT_BODY: 6,
  PAYOUT_BODY: 7,
  DATE_BODY: 11,
  PRICE_BODY: 8,
  ITEM_BODY: 9,
  REV_BODY: 10,
  ITEM_CREATE_BODY: 12,
  ITEM_DELETE_BODY: 13
};

/**
 * @return {proto.main.ChatMessage.BodyCase}
 */
proto.main.ChatMessage.prototype.getBodyCase = function() {
  return /** @type {proto.main.ChatMessage.BodyCase} */(jspb.Message.computeOneofCase(this, proto.main.ChatMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.main.ChatMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.main.ChatMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.main.ChatMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.ChatMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    user: (f = msg.getUser()) && proto.main.UserHandle.toObject(includeInstance, f),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    label: (f = msg.getLabel()) && proto.main.ChatLabel.toObject(includeInstance, f),
    method: jspb.Message.getFieldWithDefault(msg, 4, 0),
    commentBody: (f = msg.getCommentBody()) && proto.main.CommentMsgBody.toObject(includeInstance, f),
    payoutBody: (f = msg.getPayoutBody()) && proto.main.PayoutMsgBody.toObject(includeInstance, f),
    dateBody: (f = msg.getDateBody()) && proto.main.DateMsgBody.toObject(includeInstance, f),
    priceBody: (f = msg.getPriceBody()) && proto.main.PriceMsgBody.toObject(includeInstance, f),
    itemBody: (f = msg.getItemBody()) && proto.main.ItemMsgBody.toObject(includeInstance, f),
    revBody: (f = msg.getRevBody()) && proto.main.RevMsgBody.toObject(includeInstance, f),
    itemCreateBody: (f = msg.getItemCreateBody()) && proto.main.ItemCreateMsgBody.toObject(includeInstance, f),
    itemDeleteBody: (f = msg.getItemDeleteBody()) && proto.main.ItemDeleteMsgBody.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main.ChatMessage}
 */
proto.main.ChatMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main.ChatMessage;
  return proto.main.ChatMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main.ChatMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main.ChatMessage}
 */
proto.main.ChatMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.main.UserHandle;
      reader.readMessage(value,proto.main.UserHandle.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 5:
      var value = new proto.main.ChatLabel;
      reader.readMessage(value,proto.main.ChatLabel.deserializeBinaryFromReader);
      msg.setLabel(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMethod(value);
      break;
    case 6:
      var value = new proto.main.CommentMsgBody;
      reader.readMessage(value,proto.main.CommentMsgBody.deserializeBinaryFromReader);
      msg.setCommentBody(value);
      break;
    case 7:
      var value = new proto.main.PayoutMsgBody;
      reader.readMessage(value,proto.main.PayoutMsgBody.deserializeBinaryFromReader);
      msg.setPayoutBody(value);
      break;
    case 11:
      var value = new proto.main.DateMsgBody;
      reader.readMessage(value,proto.main.DateMsgBody.deserializeBinaryFromReader);
      msg.setDateBody(value);
      break;
    case 8:
      var value = new proto.main.PriceMsgBody;
      reader.readMessage(value,proto.main.PriceMsgBody.deserializeBinaryFromReader);
      msg.setPriceBody(value);
      break;
    case 9:
      var value = new proto.main.ItemMsgBody;
      reader.readMessage(value,proto.main.ItemMsgBody.deserializeBinaryFromReader);
      msg.setItemBody(value);
      break;
    case 10:
      var value = new proto.main.RevMsgBody;
      reader.readMessage(value,proto.main.RevMsgBody.deserializeBinaryFromReader);
      msg.setRevBody(value);
      break;
    case 12:
      var value = new proto.main.ItemCreateMsgBody;
      reader.readMessage(value,proto.main.ItemCreateMsgBody.deserializeBinaryFromReader);
      msg.setItemCreateBody(value);
      break;
    case 13:
      var value = new proto.main.ItemDeleteMsgBody;
      reader.readMessage(value,proto.main.ItemDeleteMsgBody.deserializeBinaryFromReader);
      msg.setItemDeleteBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main.ChatMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.main.ChatMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.main.ChatMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.ChatMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.main.UserHandle.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLabel();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.main.ChatLabel.serializeBinaryToWriter
    );
  }
  f = message.getMethod();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getCommentBody();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.main.CommentMsgBody.serializeBinaryToWriter
    );
  }
  f = message.getPayoutBody();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.main.PayoutMsgBody.serializeBinaryToWriter
    );
  }
  f = message.getDateBody();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.main.DateMsgBody.serializeBinaryToWriter
    );
  }
  f = message.getPriceBody();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.main.PriceMsgBody.serializeBinaryToWriter
    );
  }
  f = message.getItemBody();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.main.ItemMsgBody.serializeBinaryToWriter
    );
  }
  f = message.getRevBody();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.main.RevMsgBody.serializeBinaryToWriter
    );
  }
  f = message.getItemCreateBody();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.main.ItemCreateMsgBody.serializeBinaryToWriter
    );
  }
  f = message.getItemDeleteBody();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.main.ItemDeleteMsgBody.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.main.ChatMessage.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.main.ChatMessage} returns this
 */
proto.main.ChatMessage.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional UserHandle user = 2;
 * @return {?proto.main.UserHandle}
 */
proto.main.ChatMessage.prototype.getUser = function() {
  return /** @type{?proto.main.UserHandle} */ (
    jspb.Message.getWrapperField(this, proto.main.UserHandle, 2));
};


/**
 * @param {?proto.main.UserHandle|undefined} value
 * @return {!proto.main.ChatMessage} returns this
*/
proto.main.ChatMessage.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.main.ChatMessage} returns this
 */
proto.main.ChatMessage.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.main.ChatMessage.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Timestamp timestamp = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.main.ChatMessage.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.main.ChatMessage} returns this
*/
proto.main.ChatMessage.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.main.ChatMessage} returns this
 */
proto.main.ChatMessage.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.main.ChatMessage.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ChatLabel label = 5;
 * @return {?proto.main.ChatLabel}
 */
proto.main.ChatMessage.prototype.getLabel = function() {
  return /** @type{?proto.main.ChatLabel} */ (
    jspb.Message.getWrapperField(this, proto.main.ChatLabel, 5));
};


/**
 * @param {?proto.main.ChatLabel|undefined} value
 * @return {!proto.main.ChatMessage} returns this
*/
proto.main.ChatMessage.prototype.setLabel = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.main.ChatMessage} returns this
 */
proto.main.ChatMessage.prototype.clearLabel = function() {
  return this.setLabel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.main.ChatMessage.prototype.hasLabel = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 method = 4;
 * @return {number}
 */
proto.main.ChatMessage.prototype.getMethod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.main.ChatMessage} returns this
 */
proto.main.ChatMessage.prototype.setMethod = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional CommentMsgBody comment_body = 6;
 * @return {?proto.main.CommentMsgBody}
 */
proto.main.ChatMessage.prototype.getCommentBody = function() {
  return /** @type{?proto.main.CommentMsgBody} */ (
    jspb.Message.getWrapperField(this, proto.main.CommentMsgBody, 6));
};


/**
 * @param {?proto.main.CommentMsgBody|undefined} value
 * @return {!proto.main.ChatMessage} returns this
*/
proto.main.ChatMessage.prototype.setCommentBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.main.ChatMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.main.ChatMessage} returns this
 */
proto.main.ChatMessage.prototype.clearCommentBody = function() {
  return this.setCommentBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.main.ChatMessage.prototype.hasCommentBody = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional PayoutMsgBody payout_body = 7;
 * @return {?proto.main.PayoutMsgBody}
 */
proto.main.ChatMessage.prototype.getPayoutBody = function() {
  return /** @type{?proto.main.PayoutMsgBody} */ (
    jspb.Message.getWrapperField(this, proto.main.PayoutMsgBody, 7));
};


/**
 * @param {?proto.main.PayoutMsgBody|undefined} value
 * @return {!proto.main.ChatMessage} returns this
*/
proto.main.ChatMessage.prototype.setPayoutBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.main.ChatMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.main.ChatMessage} returns this
 */
proto.main.ChatMessage.prototype.clearPayoutBody = function() {
  return this.setPayoutBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.main.ChatMessage.prototype.hasPayoutBody = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional DateMsgBody date_body = 11;
 * @return {?proto.main.DateMsgBody}
 */
proto.main.ChatMessage.prototype.getDateBody = function() {
  return /** @type{?proto.main.DateMsgBody} */ (
    jspb.Message.getWrapperField(this, proto.main.DateMsgBody, 11));
};


/**
 * @param {?proto.main.DateMsgBody|undefined} value
 * @return {!proto.main.ChatMessage} returns this
*/
proto.main.ChatMessage.prototype.setDateBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.main.ChatMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.main.ChatMessage} returns this
 */
proto.main.ChatMessage.prototype.clearDateBody = function() {
  return this.setDateBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.main.ChatMessage.prototype.hasDateBody = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional PriceMsgBody price_body = 8;
 * @return {?proto.main.PriceMsgBody}
 */
proto.main.ChatMessage.prototype.getPriceBody = function() {
  return /** @type{?proto.main.PriceMsgBody} */ (
    jspb.Message.getWrapperField(this, proto.main.PriceMsgBody, 8));
};


/**
 * @param {?proto.main.PriceMsgBody|undefined} value
 * @return {!proto.main.ChatMessage} returns this
*/
proto.main.ChatMessage.prototype.setPriceBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.main.ChatMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.main.ChatMessage} returns this
 */
proto.main.ChatMessage.prototype.clearPriceBody = function() {
  return this.setPriceBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.main.ChatMessage.prototype.hasPriceBody = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional ItemMsgBody item_body = 9;
 * @return {?proto.main.ItemMsgBody}
 */
proto.main.ChatMessage.prototype.getItemBody = function() {
  return /** @type{?proto.main.ItemMsgBody} */ (
    jspb.Message.getWrapperField(this, proto.main.ItemMsgBody, 9));
};


/**
 * @param {?proto.main.ItemMsgBody|undefined} value
 * @return {!proto.main.ChatMessage} returns this
*/
proto.main.ChatMessage.prototype.setItemBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.main.ChatMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.main.ChatMessage} returns this
 */
proto.main.ChatMessage.prototype.clearItemBody = function() {
  return this.setItemBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.main.ChatMessage.prototype.hasItemBody = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional RevMsgBody rev_body = 10;
 * @return {?proto.main.RevMsgBody}
 */
proto.main.ChatMessage.prototype.getRevBody = function() {
  return /** @type{?proto.main.RevMsgBody} */ (
    jspb.Message.getWrapperField(this, proto.main.RevMsgBody, 10));
};


/**
 * @param {?proto.main.RevMsgBody|undefined} value
 * @return {!proto.main.ChatMessage} returns this
*/
proto.main.ChatMessage.prototype.setRevBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.main.ChatMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.main.ChatMessage} returns this
 */
proto.main.ChatMessage.prototype.clearRevBody = function() {
  return this.setRevBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.main.ChatMessage.prototype.hasRevBody = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional ItemCreateMsgBody item_create_body = 12;
 * @return {?proto.main.ItemCreateMsgBody}
 */
proto.main.ChatMessage.prototype.getItemCreateBody = function() {
  return /** @type{?proto.main.ItemCreateMsgBody} */ (
    jspb.Message.getWrapperField(this, proto.main.ItemCreateMsgBody, 12));
};


/**
 * @param {?proto.main.ItemCreateMsgBody|undefined} value
 * @return {!proto.main.ChatMessage} returns this
*/
proto.main.ChatMessage.prototype.setItemCreateBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.main.ChatMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.main.ChatMessage} returns this
 */
proto.main.ChatMessage.prototype.clearItemCreateBody = function() {
  return this.setItemCreateBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.main.ChatMessage.prototype.hasItemCreateBody = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional ItemDeleteMsgBody item_delete_body = 13;
 * @return {?proto.main.ItemDeleteMsgBody}
 */
proto.main.ChatMessage.prototype.getItemDeleteBody = function() {
  return /** @type{?proto.main.ItemDeleteMsgBody} */ (
    jspb.Message.getWrapperField(this, proto.main.ItemDeleteMsgBody, 13));
};


/**
 * @param {?proto.main.ItemDeleteMsgBody|undefined} value
 * @return {!proto.main.ChatMessage} returns this
*/
proto.main.ChatMessage.prototype.setItemDeleteBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.main.ChatMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.main.ChatMessage} returns this
 */
proto.main.ChatMessage.prototype.clearItemDeleteBody = function() {
  return this.setItemDeleteBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.main.ChatMessage.prototype.hasItemDeleteBody = function() {
  return jspb.Message.getField(this, 13) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.main.ChatLabel.prototype.toObject = function(opt_includeInstance) {
  return proto.main.ChatLabel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.main.ChatLabel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.ChatLabel.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    itemId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main.ChatLabel}
 */
proto.main.ChatLabel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main.ChatLabel;
  return proto.main.ChatLabel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main.ChatLabel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main.ChatLabel}
 */
proto.main.ChatLabel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setItemId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main.ChatLabel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.main.ChatLabel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.main.ChatLabel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.ChatLabel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getItemId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 type = 1;
 * @return {number}
 */
proto.main.ChatLabel.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.main.ChatLabel} returns this
 */
proto.main.ChatLabel.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.main.ChatLabel.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.main.ChatLabel} returns this
 */
proto.main.ChatLabel.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string item_id = 3;
 * @return {string}
 */
proto.main.ChatLabel.prototype.getItemId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.main.ChatLabel} returns this
 */
proto.main.ChatLabel.prototype.setItemId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.main.CommentMsgBody.prototype.toObject = function(opt_includeInstance) {
  return proto.main.CommentMsgBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.main.CommentMsgBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.CommentMsgBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main.CommentMsgBody}
 */
proto.main.CommentMsgBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main.CommentMsgBody;
  return proto.main.CommentMsgBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main.CommentMsgBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main.CommentMsgBody}
 */
proto.main.CommentMsgBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main.CommentMsgBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.main.CommentMsgBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.main.CommentMsgBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.CommentMsgBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.main.CommentMsgBody.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.main.CommentMsgBody} returns this
 */
proto.main.CommentMsgBody.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.main.ItemCreateMsgBody.prototype.toObject = function(opt_includeInstance) {
  return proto.main.ItemCreateMsgBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.main.ItemCreateMsgBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.ItemCreateMsgBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    item: (f = msg.getItem()) && communication_contract_pb.ItemEntity.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    resolved: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    resolStatus: jspb.Message.getFieldWithDefault(msg, 7, 0),
    workerStatus: jspb.Message.getFieldWithDefault(msg, 5, 0),
    buyerStatus: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main.ItemCreateMsgBody}
 */
proto.main.ItemCreateMsgBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main.ItemCreateMsgBody;
  return proto.main.ItemCreateMsgBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main.ItemCreateMsgBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main.ItemCreateMsgBody}
 */
proto.main.ItemCreateMsgBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new communication_contract_pb.ItemEntity;
      reader.readMessage(value,communication_contract_pb.ItemEntity.deserializeBinaryFromReader);
      msg.setItem(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResolved(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResolStatus(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWorkerStatus(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBuyerStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main.ItemCreateMsgBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.main.ItemCreateMsgBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.main.ItemCreateMsgBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.ItemCreateMsgBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItem();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      communication_contract_pb.ItemEntity.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getResolved();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getResolStatus();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getWorkerStatus();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getBuyerStatus();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional ItemEntity item = 1;
 * @return {?proto.main.ItemEntity}
 */
proto.main.ItemCreateMsgBody.prototype.getItem = function() {
  return /** @type{?proto.main.ItemEntity} */ (
    jspb.Message.getWrapperField(this, communication_contract_pb.ItemEntity, 1));
};


/**
 * @param {?proto.main.ItemEntity|undefined} value
 * @return {!proto.main.ItemCreateMsgBody} returns this
*/
proto.main.ItemCreateMsgBody.prototype.setItem = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.main.ItemCreateMsgBody} returns this
 */
proto.main.ItemCreateMsgBody.prototype.clearItem = function() {
  return this.setItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.main.ItemCreateMsgBody.prototype.hasItem = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 type = 3;
 * @return {number}
 */
proto.main.ItemCreateMsgBody.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.main.ItemCreateMsgBody} returns this
 */
proto.main.ItemCreateMsgBody.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool resolved = 4;
 * @return {boolean}
 */
proto.main.ItemCreateMsgBody.prototype.getResolved = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.main.ItemCreateMsgBody} returns this
 */
proto.main.ItemCreateMsgBody.prototype.setResolved = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional uint32 resol_status = 7;
 * @return {number}
 */
proto.main.ItemCreateMsgBody.prototype.getResolStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.main.ItemCreateMsgBody} returns this
 */
proto.main.ItemCreateMsgBody.prototype.setResolStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 worker_status = 5;
 * @return {number}
 */
proto.main.ItemCreateMsgBody.prototype.getWorkerStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.main.ItemCreateMsgBody} returns this
 */
proto.main.ItemCreateMsgBody.prototype.setWorkerStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 buyer_status = 6;
 * @return {number}
 */
proto.main.ItemCreateMsgBody.prototype.getBuyerStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.main.ItemCreateMsgBody} returns this
 */
proto.main.ItemCreateMsgBody.prototype.setBuyerStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.main.ItemDeleteMsgBody.prototype.toObject = function(opt_includeInstance) {
  return proto.main.ItemDeleteMsgBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.main.ItemDeleteMsgBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.ItemDeleteMsgBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    item: (f = msg.getItem()) && communication_contract_pb.ItemEntity.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    resolved: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    resolStatus: jspb.Message.getFieldWithDefault(msg, 7, 0),
    workerStatus: jspb.Message.getFieldWithDefault(msg, 5, 0),
    buyerStatus: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main.ItemDeleteMsgBody}
 */
proto.main.ItemDeleteMsgBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main.ItemDeleteMsgBody;
  return proto.main.ItemDeleteMsgBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main.ItemDeleteMsgBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main.ItemDeleteMsgBody}
 */
proto.main.ItemDeleteMsgBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new communication_contract_pb.ItemEntity;
      reader.readMessage(value,communication_contract_pb.ItemEntity.deserializeBinaryFromReader);
      msg.setItem(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResolved(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResolStatus(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWorkerStatus(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBuyerStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main.ItemDeleteMsgBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.main.ItemDeleteMsgBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.main.ItemDeleteMsgBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.ItemDeleteMsgBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItem();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      communication_contract_pb.ItemEntity.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getResolved();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getResolStatus();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getWorkerStatus();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getBuyerStatus();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional ItemEntity item = 1;
 * @return {?proto.main.ItemEntity}
 */
proto.main.ItemDeleteMsgBody.prototype.getItem = function() {
  return /** @type{?proto.main.ItemEntity} */ (
    jspb.Message.getWrapperField(this, communication_contract_pb.ItemEntity, 1));
};


/**
 * @param {?proto.main.ItemEntity|undefined} value
 * @return {!proto.main.ItemDeleteMsgBody} returns this
*/
proto.main.ItemDeleteMsgBody.prototype.setItem = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.main.ItemDeleteMsgBody} returns this
 */
proto.main.ItemDeleteMsgBody.prototype.clearItem = function() {
  return this.setItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.main.ItemDeleteMsgBody.prototype.hasItem = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 type = 3;
 * @return {number}
 */
proto.main.ItemDeleteMsgBody.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.main.ItemDeleteMsgBody} returns this
 */
proto.main.ItemDeleteMsgBody.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool resolved = 4;
 * @return {boolean}
 */
proto.main.ItemDeleteMsgBody.prototype.getResolved = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.main.ItemDeleteMsgBody} returns this
 */
proto.main.ItemDeleteMsgBody.prototype.setResolved = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional uint32 resol_status = 7;
 * @return {number}
 */
proto.main.ItemDeleteMsgBody.prototype.getResolStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.main.ItemDeleteMsgBody} returns this
 */
proto.main.ItemDeleteMsgBody.prototype.setResolStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 worker_status = 5;
 * @return {number}
 */
proto.main.ItemDeleteMsgBody.prototype.getWorkerStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.main.ItemDeleteMsgBody} returns this
 */
proto.main.ItemDeleteMsgBody.prototype.setWorkerStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 buyer_status = 6;
 * @return {number}
 */
proto.main.ItemDeleteMsgBody.prototype.getBuyerStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.main.ItemDeleteMsgBody} returns this
 */
proto.main.ItemDeleteMsgBody.prototype.setBuyerStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.main.ItemMsgBody.prototype.toObject = function(opt_includeInstance) {
  return proto.main.ItemMsgBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.main.ItemMsgBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.ItemMsgBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemId: jspb.Message.getFieldWithDefault(msg, 8, ""),
    newVersion: jspb.Message.getFieldWithDefault(msg, 1, ""),
    oldVersion: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    resolved: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    resolStatus: jspb.Message.getFieldWithDefault(msg, 7, 0),
    workerStatus: jspb.Message.getFieldWithDefault(msg, 5, 0),
    buyerStatus: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main.ItemMsgBody}
 */
proto.main.ItemMsgBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main.ItemMsgBody;
  return proto.main.ItemMsgBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main.ItemMsgBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main.ItemMsgBody}
 */
proto.main.ItemMsgBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setItemId(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOldVersion(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResolved(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResolStatus(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWorkerStatus(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBuyerStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main.ItemMsgBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.main.ItemMsgBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.main.ItemMsgBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.ItemMsgBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getNewVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOldVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getResolved();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getResolStatus();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getWorkerStatus();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getBuyerStatus();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional string item_id = 8;
 * @return {string}
 */
proto.main.ItemMsgBody.prototype.getItemId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.main.ItemMsgBody} returns this
 */
proto.main.ItemMsgBody.prototype.setItemId = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string new_version = 1;
 * @return {string}
 */
proto.main.ItemMsgBody.prototype.getNewVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.main.ItemMsgBody} returns this
 */
proto.main.ItemMsgBody.prototype.setNewVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string old_version = 2;
 * @return {string}
 */
proto.main.ItemMsgBody.prototype.getOldVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.main.ItemMsgBody} returns this
 */
proto.main.ItemMsgBody.prototype.setOldVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 type = 3;
 * @return {number}
 */
proto.main.ItemMsgBody.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.main.ItemMsgBody} returns this
 */
proto.main.ItemMsgBody.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool resolved = 4;
 * @return {boolean}
 */
proto.main.ItemMsgBody.prototype.getResolved = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.main.ItemMsgBody} returns this
 */
proto.main.ItemMsgBody.prototype.setResolved = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional uint32 resol_status = 7;
 * @return {number}
 */
proto.main.ItemMsgBody.prototype.getResolStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.main.ItemMsgBody} returns this
 */
proto.main.ItemMsgBody.prototype.setResolStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 worker_status = 5;
 * @return {number}
 */
proto.main.ItemMsgBody.prototype.getWorkerStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.main.ItemMsgBody} returns this
 */
proto.main.ItemMsgBody.prototype.setWorkerStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 buyer_status = 6;
 * @return {number}
 */
proto.main.ItemMsgBody.prototype.getBuyerStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.main.ItemMsgBody} returns this
 */
proto.main.ItemMsgBody.prototype.setBuyerStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.main.DateMsgBody.prototype.toObject = function(opt_includeInstance) {
  return proto.main.DateMsgBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.main.DateMsgBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.DateMsgBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    deadlineId: jspb.Message.getFieldWithDefault(msg, 8, ""),
    newVersion: (f = msg.getNewVersion()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    oldVersion: (f = msg.getOldVersion()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    resolved: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    resolStatus: jspb.Message.getFieldWithDefault(msg, 7, 0),
    workerStatus: jspb.Message.getFieldWithDefault(msg, 5, 0),
    buyerStatus: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main.DateMsgBody}
 */
proto.main.DateMsgBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main.DateMsgBody;
  return proto.main.DateMsgBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main.DateMsgBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main.DateMsgBody}
 */
proto.main.DateMsgBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeadlineId(value);
      break;
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setNewVersion(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setOldVersion(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResolved(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResolStatus(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWorkerStatus(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBuyerStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main.DateMsgBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.main.DateMsgBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.main.DateMsgBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.DateMsgBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeadlineId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getNewVersion();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getOldVersion();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getResolved();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getResolStatus();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getWorkerStatus();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getBuyerStatus();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional string deadline_id = 8;
 * @return {string}
 */
proto.main.DateMsgBody.prototype.getDeadlineId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.main.DateMsgBody} returns this
 */
proto.main.DateMsgBody.prototype.setDeadlineId = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional google.protobuf.Timestamp new_version = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.main.DateMsgBody.prototype.getNewVersion = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.main.DateMsgBody} returns this
*/
proto.main.DateMsgBody.prototype.setNewVersion = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.main.DateMsgBody} returns this
 */
proto.main.DateMsgBody.prototype.clearNewVersion = function() {
  return this.setNewVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.main.DateMsgBody.prototype.hasNewVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp old_version = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.main.DateMsgBody.prototype.getOldVersion = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.main.DateMsgBody} returns this
*/
proto.main.DateMsgBody.prototype.setOldVersion = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.main.DateMsgBody} returns this
 */
proto.main.DateMsgBody.prototype.clearOldVersion = function() {
  return this.setOldVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.main.DateMsgBody.prototype.hasOldVersion = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 type = 3;
 * @return {number}
 */
proto.main.DateMsgBody.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.main.DateMsgBody} returns this
 */
proto.main.DateMsgBody.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool resolved = 4;
 * @return {boolean}
 */
proto.main.DateMsgBody.prototype.getResolved = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.main.DateMsgBody} returns this
 */
proto.main.DateMsgBody.prototype.setResolved = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional uint32 resol_status = 7;
 * @return {number}
 */
proto.main.DateMsgBody.prototype.getResolStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.main.DateMsgBody} returns this
 */
proto.main.DateMsgBody.prototype.setResolStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 worker_status = 5;
 * @return {number}
 */
proto.main.DateMsgBody.prototype.getWorkerStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.main.DateMsgBody} returns this
 */
proto.main.DateMsgBody.prototype.setWorkerStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 buyer_status = 6;
 * @return {number}
 */
proto.main.DateMsgBody.prototype.getBuyerStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.main.DateMsgBody} returns this
 */
proto.main.DateMsgBody.prototype.setBuyerStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.main.PayoutMsgBody.prototype.toObject = function(opt_includeInstance) {
  return proto.main.PayoutMsgBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.main.PayoutMsgBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.PayoutMsgBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    deadlineId: jspb.Message.getFieldWithDefault(msg, 8, ""),
    newVersion: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    oldVersion: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    resolved: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    resolStatus: jspb.Message.getFieldWithDefault(msg, 7, 0),
    workerStatus: jspb.Message.getFieldWithDefault(msg, 5, 0),
    buyerStatus: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main.PayoutMsgBody}
 */
proto.main.PayoutMsgBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main.PayoutMsgBody;
  return proto.main.PayoutMsgBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main.PayoutMsgBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main.PayoutMsgBody}
 */
proto.main.PayoutMsgBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeadlineId(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNewVersion(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOldVersion(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResolved(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResolStatus(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWorkerStatus(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBuyerStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main.PayoutMsgBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.main.PayoutMsgBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.main.PayoutMsgBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.PayoutMsgBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeadlineId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getNewVersion();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getOldVersion();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getResolved();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getResolStatus();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getWorkerStatus();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getBuyerStatus();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional string deadline_id = 8;
 * @return {string}
 */
proto.main.PayoutMsgBody.prototype.getDeadlineId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.main.PayoutMsgBody} returns this
 */
proto.main.PayoutMsgBody.prototype.setDeadlineId = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional float new_version = 1;
 * @return {number}
 */
proto.main.PayoutMsgBody.prototype.getNewVersion = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.main.PayoutMsgBody} returns this
 */
proto.main.PayoutMsgBody.prototype.setNewVersion = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float old_version = 2;
 * @return {number}
 */
proto.main.PayoutMsgBody.prototype.getOldVersion = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.main.PayoutMsgBody} returns this
 */
proto.main.PayoutMsgBody.prototype.setOldVersion = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional uint32 type = 3;
 * @return {number}
 */
proto.main.PayoutMsgBody.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.main.PayoutMsgBody} returns this
 */
proto.main.PayoutMsgBody.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool resolved = 4;
 * @return {boolean}
 */
proto.main.PayoutMsgBody.prototype.getResolved = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.main.PayoutMsgBody} returns this
 */
proto.main.PayoutMsgBody.prototype.setResolved = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional uint32 resol_status = 7;
 * @return {number}
 */
proto.main.PayoutMsgBody.prototype.getResolStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.main.PayoutMsgBody} returns this
 */
proto.main.PayoutMsgBody.prototype.setResolStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 worker_status = 5;
 * @return {number}
 */
proto.main.PayoutMsgBody.prototype.getWorkerStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.main.PayoutMsgBody} returns this
 */
proto.main.PayoutMsgBody.prototype.setWorkerStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 buyer_status = 6;
 * @return {number}
 */
proto.main.PayoutMsgBody.prototype.getBuyerStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.main.PayoutMsgBody} returns this
 */
proto.main.PayoutMsgBody.prototype.setBuyerStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.main.PriceMsgBody.prototype.toObject = function(opt_includeInstance) {
  return proto.main.PriceMsgBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.main.PriceMsgBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.PriceMsgBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    newVersion: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    oldVersion: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    resolved: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    resolStatus: jspb.Message.getFieldWithDefault(msg, 7, 0),
    workerStatus: jspb.Message.getFieldWithDefault(msg, 5, 0),
    buyerStatus: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main.PriceMsgBody}
 */
proto.main.PriceMsgBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main.PriceMsgBody;
  return proto.main.PriceMsgBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main.PriceMsgBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main.PriceMsgBody}
 */
proto.main.PriceMsgBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNewVersion(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOldVersion(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResolved(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResolStatus(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWorkerStatus(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBuyerStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main.PriceMsgBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.main.PriceMsgBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.main.PriceMsgBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.PriceMsgBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewVersion();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getOldVersion();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getResolved();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getResolStatus();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getWorkerStatus();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getBuyerStatus();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional float new_version = 1;
 * @return {number}
 */
proto.main.PriceMsgBody.prototype.getNewVersion = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.main.PriceMsgBody} returns this
 */
proto.main.PriceMsgBody.prototype.setNewVersion = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float old_version = 2;
 * @return {number}
 */
proto.main.PriceMsgBody.prototype.getOldVersion = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.main.PriceMsgBody} returns this
 */
proto.main.PriceMsgBody.prototype.setOldVersion = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional uint32 type = 3;
 * @return {number}
 */
proto.main.PriceMsgBody.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.main.PriceMsgBody} returns this
 */
proto.main.PriceMsgBody.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool resolved = 4;
 * @return {boolean}
 */
proto.main.PriceMsgBody.prototype.getResolved = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.main.PriceMsgBody} returns this
 */
proto.main.PriceMsgBody.prototype.setResolved = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional uint32 resol_status = 7;
 * @return {number}
 */
proto.main.PriceMsgBody.prototype.getResolStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.main.PriceMsgBody} returns this
 */
proto.main.PriceMsgBody.prototype.setResolStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 worker_status = 5;
 * @return {number}
 */
proto.main.PriceMsgBody.prototype.getWorkerStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.main.PriceMsgBody} returns this
 */
proto.main.PriceMsgBody.prototype.setWorkerStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 buyer_status = 6;
 * @return {number}
 */
proto.main.PriceMsgBody.prototype.getBuyerStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.main.PriceMsgBody} returns this
 */
proto.main.PriceMsgBody.prototype.setBuyerStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.main.RevMsgBody.prototype.toObject = function(opt_includeInstance) {
  return proto.main.RevMsgBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.main.RevMsgBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.RevMsgBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    resolved: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    resolStatus: jspb.Message.getFieldWithDefault(msg, 7, 0),
    workerStatus: jspb.Message.getFieldWithDefault(msg, 5, 0),
    buyerStatus: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main.RevMsgBody}
 */
proto.main.RevMsgBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main.RevMsgBody;
  return proto.main.RevMsgBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main.RevMsgBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main.RevMsgBody}
 */
proto.main.RevMsgBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResolved(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResolStatus(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWorkerStatus(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBuyerStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main.RevMsgBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.main.RevMsgBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.main.RevMsgBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.RevMsgBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResolved();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getResolStatus();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getWorkerStatus();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getBuyerStatus();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional string msg_id = 1;
 * @return {string}
 */
proto.main.RevMsgBody.prototype.getMsgId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.main.RevMsgBody} returns this
 */
proto.main.RevMsgBody.prototype.setMsgId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool resolved = 2;
 * @return {boolean}
 */
proto.main.RevMsgBody.prototype.getResolved = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.main.RevMsgBody} returns this
 */
proto.main.RevMsgBody.prototype.setResolved = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional uint32 resol_status = 7;
 * @return {number}
 */
proto.main.RevMsgBody.prototype.getResolStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.main.RevMsgBody} returns this
 */
proto.main.RevMsgBody.prototype.setResolStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 worker_status = 5;
 * @return {number}
 */
proto.main.RevMsgBody.prototype.getWorkerStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.main.RevMsgBody} returns this
 */
proto.main.RevMsgBody.prototype.setWorkerStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 buyer_status = 6;
 * @return {number}
 */
proto.main.RevMsgBody.prototype.getBuyerStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.main.RevMsgBody} returns this
 */
proto.main.RevMsgBody.prototype.setBuyerStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.main.UserJoin.prototype.toObject = function(opt_includeInstance) {
  return proto.main.UserJoin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.main.UserJoin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.UserJoin.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    roomId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main.UserJoin}
 */
proto.main.UserJoin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main.UserJoin;
  return proto.main.UserJoin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main.UserJoin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main.UserJoin}
 */
proto.main.UserJoin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main.UserJoin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.main.UserJoin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.main.UserJoin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.UserJoin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.main.UserJoin.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.main.UserJoin} returns this
 */
proto.main.UserJoin.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string room_id = 2;
 * @return {string}
 */
proto.main.UserJoin.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.main.UserJoin} returns this
 */
proto.main.UserJoin.prototype.setRoomId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.main.UserLeave.prototype.toObject = function(opt_includeInstance) {
  return proto.main.UserLeave.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.main.UserLeave} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.UserLeave.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    roomId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main.UserLeave}
 */
proto.main.UserLeave.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main.UserLeave;
  return proto.main.UserLeave.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main.UserLeave} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main.UserLeave}
 */
proto.main.UserLeave.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main.UserLeave.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.main.UserLeave.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.main.UserLeave} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.UserLeave.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.main.UserLeave.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.main.UserLeave} returns this
 */
proto.main.UserLeave.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string room_id = 2;
 * @return {string}
 */
proto.main.UserLeave.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.main.UserLeave} returns this
 */
proto.main.UserLeave.prototype.setRoomId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.main.UserClose.prototype.toObject = function(opt_includeInstance) {
  return proto.main.UserClose.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.main.UserClose} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.UserClose.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main.UserClose}
 */
proto.main.UserClose.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main.UserClose;
  return proto.main.UserClose.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main.UserClose} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main.UserClose}
 */
proto.main.UserClose.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main.UserClose.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.main.UserClose.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.main.UserClose} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.UserClose.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.main.SendRequest.oneofGroups_ = [[6,7,11,8,9]];

/**
 * @enum {number}
 */
proto.main.SendRequest.BodyCase = {
  BODY_NOT_SET: 0,
  COMMENT_BODY: 6,
  PAYOUT_BODY: 7,
  DATE_BODY: 11,
  PRICE_BODY: 8,
  ITEM_BODY: 9
};

/**
 * @return {proto.main.SendRequest.BodyCase}
 */
proto.main.SendRequest.prototype.getBodyCase = function() {
  return /** @type {proto.main.SendRequest.BodyCase} */(jspb.Message.computeOneofCase(this, proto.main.SendRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.main.SendRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.main.SendRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.main.SendRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.SendRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    roomId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    method: jspb.Message.getFieldWithDefault(msg, 10, 0),
    commentBody: (f = msg.getCommentBody()) && proto.main.CommentMsgBody.toObject(includeInstance, f),
    payoutBody: (f = msg.getPayoutBody()) && proto.main.PayoutMsgBody.toObject(includeInstance, f),
    dateBody: (f = msg.getDateBody()) && proto.main.DateMsgBody.toObject(includeInstance, f),
    priceBody: (f = msg.getPriceBody()) && proto.main.PriceMsgBody.toObject(includeInstance, f),
    itemBody: (f = msg.getItemBody()) && proto.main.ItemMsgBody.toObject(includeInstance, f),
    label: (f = msg.getLabel()) && proto.main.ChatLabel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main.SendRequest}
 */
proto.main.SendRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main.SendRequest;
  return proto.main.SendRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main.SendRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main.SendRequest}
 */
proto.main.SendRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMethod(value);
      break;
    case 6:
      var value = new proto.main.CommentMsgBody;
      reader.readMessage(value,proto.main.CommentMsgBody.deserializeBinaryFromReader);
      msg.setCommentBody(value);
      break;
    case 7:
      var value = new proto.main.PayoutMsgBody;
      reader.readMessage(value,proto.main.PayoutMsgBody.deserializeBinaryFromReader);
      msg.setPayoutBody(value);
      break;
    case 11:
      var value = new proto.main.DateMsgBody;
      reader.readMessage(value,proto.main.DateMsgBody.deserializeBinaryFromReader);
      msg.setDateBody(value);
      break;
    case 8:
      var value = new proto.main.PriceMsgBody;
      reader.readMessage(value,proto.main.PriceMsgBody.deserializeBinaryFromReader);
      msg.setPriceBody(value);
      break;
    case 9:
      var value = new proto.main.ItemMsgBody;
      reader.readMessage(value,proto.main.ItemMsgBody.deserializeBinaryFromReader);
      msg.setItemBody(value);
      break;
    case 4:
      var value = new proto.main.ChatLabel;
      reader.readMessage(value,proto.main.ChatLabel.deserializeBinaryFromReader);
      msg.setLabel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main.SendRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.main.SendRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.main.SendRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.SendRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMethod();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getCommentBody();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.main.CommentMsgBody.serializeBinaryToWriter
    );
  }
  f = message.getPayoutBody();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.main.PayoutMsgBody.serializeBinaryToWriter
    );
  }
  f = message.getDateBody();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.main.DateMsgBody.serializeBinaryToWriter
    );
  }
  f = message.getPriceBody();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.main.PriceMsgBody.serializeBinaryToWriter
    );
  }
  f = message.getItemBody();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.main.ItemMsgBody.serializeBinaryToWriter
    );
  }
  f = message.getLabel();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.main.ChatLabel.serializeBinaryToWriter
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.main.SendRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.main.SendRequest} returns this
 */
proto.main.SendRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string room_id = 2;
 * @return {string}
 */
proto.main.SendRequest.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.main.SendRequest} returns this
 */
proto.main.SendRequest.prototype.setRoomId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 method = 10;
 * @return {number}
 */
proto.main.SendRequest.prototype.getMethod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.main.SendRequest} returns this
 */
proto.main.SendRequest.prototype.setMethod = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional CommentMsgBody comment_body = 6;
 * @return {?proto.main.CommentMsgBody}
 */
proto.main.SendRequest.prototype.getCommentBody = function() {
  return /** @type{?proto.main.CommentMsgBody} */ (
    jspb.Message.getWrapperField(this, proto.main.CommentMsgBody, 6));
};


/**
 * @param {?proto.main.CommentMsgBody|undefined} value
 * @return {!proto.main.SendRequest} returns this
*/
proto.main.SendRequest.prototype.setCommentBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.main.SendRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.main.SendRequest} returns this
 */
proto.main.SendRequest.prototype.clearCommentBody = function() {
  return this.setCommentBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.main.SendRequest.prototype.hasCommentBody = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional PayoutMsgBody payout_body = 7;
 * @return {?proto.main.PayoutMsgBody}
 */
proto.main.SendRequest.prototype.getPayoutBody = function() {
  return /** @type{?proto.main.PayoutMsgBody} */ (
    jspb.Message.getWrapperField(this, proto.main.PayoutMsgBody, 7));
};


/**
 * @param {?proto.main.PayoutMsgBody|undefined} value
 * @return {!proto.main.SendRequest} returns this
*/
proto.main.SendRequest.prototype.setPayoutBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.main.SendRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.main.SendRequest} returns this
 */
proto.main.SendRequest.prototype.clearPayoutBody = function() {
  return this.setPayoutBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.main.SendRequest.prototype.hasPayoutBody = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional DateMsgBody date_body = 11;
 * @return {?proto.main.DateMsgBody}
 */
proto.main.SendRequest.prototype.getDateBody = function() {
  return /** @type{?proto.main.DateMsgBody} */ (
    jspb.Message.getWrapperField(this, proto.main.DateMsgBody, 11));
};


/**
 * @param {?proto.main.DateMsgBody|undefined} value
 * @return {!proto.main.SendRequest} returns this
*/
proto.main.SendRequest.prototype.setDateBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.main.SendRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.main.SendRequest} returns this
 */
proto.main.SendRequest.prototype.clearDateBody = function() {
  return this.setDateBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.main.SendRequest.prototype.hasDateBody = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional PriceMsgBody price_body = 8;
 * @return {?proto.main.PriceMsgBody}
 */
proto.main.SendRequest.prototype.getPriceBody = function() {
  return /** @type{?proto.main.PriceMsgBody} */ (
    jspb.Message.getWrapperField(this, proto.main.PriceMsgBody, 8));
};


/**
 * @param {?proto.main.PriceMsgBody|undefined} value
 * @return {!proto.main.SendRequest} returns this
*/
proto.main.SendRequest.prototype.setPriceBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.main.SendRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.main.SendRequest} returns this
 */
proto.main.SendRequest.prototype.clearPriceBody = function() {
  return this.setPriceBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.main.SendRequest.prototype.hasPriceBody = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional ItemMsgBody item_body = 9;
 * @return {?proto.main.ItemMsgBody}
 */
proto.main.SendRequest.prototype.getItemBody = function() {
  return /** @type{?proto.main.ItemMsgBody} */ (
    jspb.Message.getWrapperField(this, proto.main.ItemMsgBody, 9));
};


/**
 * @param {?proto.main.ItemMsgBody|undefined} value
 * @return {!proto.main.SendRequest} returns this
*/
proto.main.SendRequest.prototype.setItemBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.main.SendRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.main.SendRequest} returns this
 */
proto.main.SendRequest.prototype.clearItemBody = function() {
  return this.setItemBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.main.SendRequest.prototype.hasItemBody = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional ChatLabel label = 4;
 * @return {?proto.main.ChatLabel}
 */
proto.main.SendRequest.prototype.getLabel = function() {
  return /** @type{?proto.main.ChatLabel} */ (
    jspb.Message.getWrapperField(this, proto.main.ChatLabel, 4));
};


/**
 * @param {?proto.main.ChatLabel|undefined} value
 * @return {!proto.main.SendRequest} returns this
*/
proto.main.SendRequest.prototype.setLabel = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.main.SendRequest} returns this
 */
proto.main.SendRequest.prototype.clearLabel = function() {
  return this.setLabel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.main.SendRequest.prototype.hasLabel = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.main.SendResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.main.SendResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.main.SendResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.SendResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main.SendResponse}
 */
proto.main.SendResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main.SendResponse;
  return proto.main.SendResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main.SendResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main.SendResponse}
 */
proto.main.SendResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main.SendResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.main.SendResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.main.SendResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.SendResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.main.ChatPullRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.main.ChatPullRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.main.ChatPullRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.ChatPullRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main.ChatPullRequest}
 */
proto.main.ChatPullRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main.ChatPullRequest;
  return proto.main.ChatPullRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main.ChatPullRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main.ChatPullRequest}
 */
proto.main.ChatPullRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main.ChatPullRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.main.ChatPullRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.main.ChatPullRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.ChatPullRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string room_id = 1;
 * @return {string}
 */
proto.main.ChatPullRequest.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.main.ChatPullRequest} returns this
 */
proto.main.ChatPullRequest.prototype.setRoomId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.main.ChatMessageSet.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.main.ChatMessageSet.prototype.toObject = function(opt_includeInstance) {
  return proto.main.ChatMessageSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.main.ChatMessageSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.ChatMessageSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.main.ChatMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main.ChatMessageSet}
 */
proto.main.ChatMessageSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main.ChatMessageSet;
  return proto.main.ChatMessageSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main.ChatMessageSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main.ChatMessageSet}
 */
proto.main.ChatMessageSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 2:
      var value = new proto.main.ChatMessage;
      reader.readMessage(value,proto.main.ChatMessage.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main.ChatMessageSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.main.ChatMessageSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.main.ChatMessageSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main.ChatMessageSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.main.ChatMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional string room_id = 1;
 * @return {string}
 */
proto.main.ChatMessageSet.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.main.ChatMessageSet} returns this
 */
proto.main.ChatMessageSet.prototype.setRoomId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated ChatMessage messages = 2;
 * @return {!Array<!proto.main.ChatMessage>}
 */
proto.main.ChatMessageSet.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.main.ChatMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.main.ChatMessage, 2));
};


/**
 * @param {!Array<!proto.main.ChatMessage>} value
 * @return {!proto.main.ChatMessageSet} returns this
*/
proto.main.ChatMessageSet.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.main.ChatMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.main.ChatMessage}
 */
proto.main.ChatMessageSet.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.main.ChatMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.main.ChatMessageSet} returns this
 */
proto.main.ChatMessageSet.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};


goog.object.extend(exports, proto.main);
