/**
 * @fileoverview gRPC-Web generated client stub for communication
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.15.8
// source: communication/stripe.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var communication_contract_pb = require('../communication/contract_pb.js')
const proto = {};
proto.communication = require('./stripe_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.communication.StripeServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.communication.StripeServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.communication.PaymentRegisterRequest,
 *   !proto.communication.AccountLinkResp>}
 */
const methodDescriptor_StripeService_GetAccountOnboardLink = new grpc.web.MethodDescriptor(
  '/communication.StripeService/GetAccountOnboardLink',
  grpc.web.MethodType.UNARY,
  proto.communication.PaymentRegisterRequest,
  proto.communication.AccountLinkResp,
  /**
   * @param {!proto.communication.PaymentRegisterRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.communication.AccountLinkResp.deserializeBinary
);


/**
 * @param {!proto.communication.PaymentRegisterRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.communication.AccountLinkResp)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.communication.AccountLinkResp>|undefined}
 *     The XHR Node Readable Stream
 */
proto.communication.StripeServiceClient.prototype.getAccountOnboardLink =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/communication.StripeService/GetAccountOnboardLink',
      request,
      metadata || {},
      methodDescriptor_StripeService_GetAccountOnboardLink,
      callback);
};


/**
 * @param {!proto.communication.PaymentRegisterRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.communication.AccountLinkResp>}
 *     Promise that resolves to the response
 */
proto.communication.StripeServicePromiseClient.prototype.getAccountOnboardLink =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/communication.StripeService/GetAccountOnboardLink',
      request,
      metadata || {},
      methodDescriptor_StripeService_GetAccountOnboardLink);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.communication.PaymentRegisterRequest,
 *   !proto.communication.IntentSecret>}
 */
const methodDescriptor_StripeService_GetInitialSetupSecret = new grpc.web.MethodDescriptor(
  '/communication.StripeService/GetInitialSetupSecret',
  grpc.web.MethodType.UNARY,
  proto.communication.PaymentRegisterRequest,
  proto.communication.IntentSecret,
  /**
   * @param {!proto.communication.PaymentRegisterRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.communication.IntentSecret.deserializeBinary
);


/**
 * @param {!proto.communication.PaymentRegisterRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.communication.IntentSecret)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.communication.IntentSecret>|undefined}
 *     The XHR Node Readable Stream
 */
proto.communication.StripeServiceClient.prototype.getInitialSetupSecret =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/communication.StripeService/GetInitialSetupSecret',
      request,
      metadata || {},
      methodDescriptor_StripeService_GetInitialSetupSecret,
      callback);
};


/**
 * @param {!proto.communication.PaymentRegisterRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.communication.IntentSecret>}
 *     Promise that resolves to the response
 */
proto.communication.StripeServicePromiseClient.prototype.getInitialSetupSecret =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/communication.StripeService/GetInitialSetupSecret',
      request,
      metadata || {},
      methodDescriptor_StripeService_GetInitialSetupSecret);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.communication.PaymentRegisterRequest,
 *   !proto.communication.FCSSecret>}
 */
const methodDescriptor_StripeService_GetCustomerFCSecret = new grpc.web.MethodDescriptor(
  '/communication.StripeService/GetCustomerFCSecret',
  grpc.web.MethodType.UNARY,
  proto.communication.PaymentRegisterRequest,
  proto.communication.FCSSecret,
  /**
   * @param {!proto.communication.PaymentRegisterRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.communication.FCSSecret.deserializeBinary
);


/**
 * @param {!proto.communication.PaymentRegisterRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.communication.FCSSecret)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.communication.FCSSecret>|undefined}
 *     The XHR Node Readable Stream
 */
proto.communication.StripeServiceClient.prototype.getCustomerFCSecret =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/communication.StripeService/GetCustomerFCSecret',
      request,
      metadata || {},
      methodDescriptor_StripeService_GetCustomerFCSecret,
      callback);
};


/**
 * @param {!proto.communication.PaymentRegisterRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.communication.FCSSecret>}
 *     Promise that resolves to the response
 */
proto.communication.StripeServicePromiseClient.prototype.getCustomerFCSecret =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/communication.StripeService/GetCustomerFCSecret',
      request,
      metadata || {},
      methodDescriptor_StripeService_GetCustomerFCSecret);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.communication.SetupConfirm,
 *   !proto.communication.NullResponse>}
 */
const methodDescriptor_StripeService_ConfirmPaymentConnected = new grpc.web.MethodDescriptor(
  '/communication.StripeService/ConfirmPaymentConnected',
  grpc.web.MethodType.UNARY,
  proto.communication.SetupConfirm,
  communication_contract_pb.NullResponse,
  /**
   * @param {!proto.communication.SetupConfirm} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  communication_contract_pb.NullResponse.deserializeBinary
);


/**
 * @param {!proto.communication.SetupConfirm} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.communication.NullResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.communication.NullResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.communication.StripeServiceClient.prototype.confirmPaymentConnected =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/communication.StripeService/ConfirmPaymentConnected',
      request,
      metadata || {},
      methodDescriptor_StripeService_ConfirmPaymentConnected,
      callback);
};


/**
 * @param {!proto.communication.SetupConfirm} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.communication.NullResponse>}
 *     Promise that resolves to the response
 */
proto.communication.StripeServicePromiseClient.prototype.confirmPaymentConnected =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/communication.StripeService/ConfirmPaymentConnected',
      request,
      metadata || {},
      methodDescriptor_StripeService_ConfirmPaymentConnected);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.communication.ListRequest,
 *   !proto.communication.BASet>}
 */
const methodDescriptor_StripeService_ListFcas = new grpc.web.MethodDescriptor(
  '/communication.StripeService/ListFcas',
  grpc.web.MethodType.UNARY,
  proto.communication.ListRequest,
  proto.communication.BASet,
  /**
   * @param {!proto.communication.ListRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.communication.BASet.deserializeBinary
);


/**
 * @param {!proto.communication.ListRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.communication.BASet)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.communication.BASet>|undefined}
 *     The XHR Node Readable Stream
 */
proto.communication.StripeServiceClient.prototype.listFcas =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/communication.StripeService/ListFcas',
      request,
      metadata || {},
      methodDescriptor_StripeService_ListFcas,
      callback);
};


/**
 * @param {!proto.communication.ListRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.communication.BASet>}
 *     Promise that resolves to the response
 */
proto.communication.StripeServicePromiseClient.prototype.listFcas =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/communication.StripeService/ListFcas',
      request,
      metadata || {},
      methodDescriptor_StripeService_ListFcas);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.communication.ListRequest,
 *   !proto.communication.BASet>}
 */
const methodDescriptor_StripeService_ListExBAs = new grpc.web.MethodDescriptor(
  '/communication.StripeService/ListExBAs',
  grpc.web.MethodType.UNARY,
  proto.communication.ListRequest,
  proto.communication.BASet,
  /**
   * @param {!proto.communication.ListRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.communication.BASet.deserializeBinary
);


/**
 * @param {!proto.communication.ListRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.communication.BASet)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.communication.BASet>|undefined}
 *     The XHR Node Readable Stream
 */
proto.communication.StripeServiceClient.prototype.listExBAs =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/communication.StripeService/ListExBAs',
      request,
      metadata || {},
      methodDescriptor_StripeService_ListExBAs,
      callback);
};


/**
 * @param {!proto.communication.ListRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.communication.BASet>}
 *     Promise that resolves to the response
 */
proto.communication.StripeServicePromiseClient.prototype.listExBAs =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/communication.StripeService/ListExBAs',
      request,
      metadata || {},
      methodDescriptor_StripeService_ListExBAs);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.communication.ExBaQuery,
 *   !proto.communication.NullResponse>}
 */
const methodDescriptor_StripeService_DisconnectExBa = new grpc.web.MethodDescriptor(
  '/communication.StripeService/DisconnectExBa',
  grpc.web.MethodType.UNARY,
  proto.communication.ExBaQuery,
  communication_contract_pb.NullResponse,
  /**
   * @param {!proto.communication.ExBaQuery} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  communication_contract_pb.NullResponse.deserializeBinary
);


/**
 * @param {!proto.communication.ExBaQuery} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.communication.NullResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.communication.NullResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.communication.StripeServiceClient.prototype.disconnectExBa =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/communication.StripeService/DisconnectExBa',
      request,
      metadata || {},
      methodDescriptor_StripeService_DisconnectExBa,
      callback);
};


/**
 * @param {!proto.communication.ExBaQuery} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.communication.NullResponse>}
 *     Promise that resolves to the response
 */
proto.communication.StripeServicePromiseClient.prototype.disconnectExBa =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/communication.StripeService/DisconnectExBa',
      request,
      metadata || {},
      methodDescriptor_StripeService_DisconnectExBa);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.communication.DeleteConAccRequest,
 *   !proto.communication.NullResponse>}
 */
const methodDescriptor_StripeService_DeleteConnectedAccount = new grpc.web.MethodDescriptor(
  '/communication.StripeService/DeleteConnectedAccount',
  grpc.web.MethodType.UNARY,
  proto.communication.DeleteConAccRequest,
  communication_contract_pb.NullResponse,
  /**
   * @param {!proto.communication.DeleteConAccRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  communication_contract_pb.NullResponse.deserializeBinary
);


/**
 * @param {!proto.communication.DeleteConAccRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.communication.NullResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.communication.NullResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.communication.StripeServiceClient.prototype.deleteConnectedAccount =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/communication.StripeService/DeleteConnectedAccount',
      request,
      metadata || {},
      methodDescriptor_StripeService_DeleteConnectedAccount,
      callback);
};


/**
 * @param {!proto.communication.DeleteConAccRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.communication.NullResponse>}
 *     Promise that resolves to the response
 */
proto.communication.StripeServicePromiseClient.prototype.deleteConnectedAccount =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/communication.StripeService/DeleteConnectedAccount',
      request,
      metadata || {},
      methodDescriptor_StripeService_DeleteConnectedAccount);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.communication.FcaQuery,
 *   !proto.communication.NullResponse>}
 */
const methodDescriptor_StripeService_DisconnectFca = new grpc.web.MethodDescriptor(
  '/communication.StripeService/DisconnectFca',
  grpc.web.MethodType.UNARY,
  proto.communication.FcaQuery,
  communication_contract_pb.NullResponse,
  /**
   * @param {!proto.communication.FcaQuery} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  communication_contract_pb.NullResponse.deserializeBinary
);


/**
 * @param {!proto.communication.FcaQuery} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.communication.NullResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.communication.NullResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.communication.StripeServiceClient.prototype.disconnectFca =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/communication.StripeService/DisconnectFca',
      request,
      metadata || {},
      methodDescriptor_StripeService_DisconnectFca,
      callback);
};


/**
 * @param {!proto.communication.FcaQuery} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.communication.NullResponse>}
 *     Promise that resolves to the response
 */
proto.communication.StripeServicePromiseClient.prototype.disconnectFca =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/communication.StripeService/DisconnectFca',
      request,
      metadata || {},
      methodDescriptor_StripeService_DisconnectFca);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.communication.FcaQuery,
 *   !proto.communication.NullResponse>}
 */
const methodDescriptor_StripeService_SetDefaultFca = new grpc.web.MethodDescriptor(
  '/communication.StripeService/SetDefaultFca',
  grpc.web.MethodType.UNARY,
  proto.communication.FcaQuery,
  communication_contract_pb.NullResponse,
  /**
   * @param {!proto.communication.FcaQuery} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  communication_contract_pb.NullResponse.deserializeBinary
);


/**
 * @param {!proto.communication.FcaQuery} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.communication.NullResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.communication.NullResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.communication.StripeServiceClient.prototype.setDefaultFca =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/communication.StripeService/SetDefaultFca',
      request,
      metadata || {},
      methodDescriptor_StripeService_SetDefaultFca,
      callback);
};


/**
 * @param {!proto.communication.FcaQuery} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.communication.NullResponse>}
 *     Promise that resolves to the response
 */
proto.communication.StripeServicePromiseClient.prototype.setDefaultFca =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/communication.StripeService/SetDefaultFca',
      request,
      metadata || {},
      methodDescriptor_StripeService_SetDefaultFca);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.communication.IntentCreateReq,
 *   !proto.communication.IntentSecret>}
 */
const methodDescriptor_StripeService_TestCharge = new grpc.web.MethodDescriptor(
  '/communication.StripeService/TestCharge',
  grpc.web.MethodType.UNARY,
  proto.communication.IntentCreateReq,
  proto.communication.IntentSecret,
  /**
   * @param {!proto.communication.IntentCreateReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.communication.IntentSecret.deserializeBinary
);


/**
 * @param {!proto.communication.IntentCreateReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.communication.IntentSecret)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.communication.IntentSecret>|undefined}
 *     The XHR Node Readable Stream
 */
proto.communication.StripeServiceClient.prototype.testCharge =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/communication.StripeService/TestCharge',
      request,
      metadata || {},
      methodDescriptor_StripeService_TestCharge,
      callback);
};


/**
 * @param {!proto.communication.IntentCreateReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.communication.IntentSecret>}
 *     Promise that resolves to the response
 */
proto.communication.StripeServicePromiseClient.prototype.testCharge =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/communication.StripeService/TestCharge',
      request,
      metadata || {},
      methodDescriptor_StripeService_TestCharge);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.communication.InternalChargeRequest,
 *   !proto.communication.InternalChargeSet>}
 */
const methodDescriptor_StripeService_GetInternalCharges = new grpc.web.MethodDescriptor(
  '/communication.StripeService/GetInternalCharges',
  grpc.web.MethodType.UNARY,
  proto.communication.InternalChargeRequest,
  proto.communication.InternalChargeSet,
  /**
   * @param {!proto.communication.InternalChargeRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.communication.InternalChargeSet.deserializeBinary
);


/**
 * @param {!proto.communication.InternalChargeRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.communication.InternalChargeSet)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.communication.InternalChargeSet>|undefined}
 *     The XHR Node Readable Stream
 */
proto.communication.StripeServiceClient.prototype.getInternalCharges =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/communication.StripeService/GetInternalCharges',
      request,
      metadata || {},
      methodDescriptor_StripeService_GetInternalCharges,
      callback);
};


/**
 * @param {!proto.communication.InternalChargeRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.communication.InternalChargeSet>}
 *     Promise that resolves to the response
 */
proto.communication.StripeServicePromiseClient.prototype.getInternalCharges =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/communication.StripeService/GetInternalCharges',
      request,
      metadata || {},
      methodDescriptor_StripeService_GetInternalCharges);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.communication.InternalChargeEntity,
 *   !proto.communication.NullResponse>}
 */
const methodDescriptor_StripeService_TransferDeadlineFunds = new grpc.web.MethodDescriptor(
  '/communication.StripeService/TransferDeadlineFunds',
  grpc.web.MethodType.UNARY,
  proto.communication.InternalChargeEntity,
  communication_contract_pb.NullResponse,
  /**
   * @param {!proto.communication.InternalChargeEntity} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  communication_contract_pb.NullResponse.deserializeBinary
);


/**
 * @param {!proto.communication.InternalChargeEntity} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.communication.NullResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.communication.NullResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.communication.StripeServiceClient.prototype.transferDeadlineFunds =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/communication.StripeService/TransferDeadlineFunds',
      request,
      metadata || {},
      methodDescriptor_StripeService_TransferDeadlineFunds,
      callback);
};


/**
 * @param {!proto.communication.InternalChargeEntity} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.communication.NullResponse>}
 *     Promise that resolves to the response
 */
proto.communication.StripeServicePromiseClient.prototype.transferDeadlineFunds =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/communication.StripeService/TransferDeadlineFunds',
      request,
      metadata || {},
      methodDescriptor_StripeService_TransferDeadlineFunds);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.communication.InternalChargeCustomQuery,
 *   !proto.communication.InternalChargeEntity>}
 */
const methodDescriptor_StripeService_QueryICharge = new grpc.web.MethodDescriptor(
  '/communication.StripeService/QueryICharge',
  grpc.web.MethodType.UNARY,
  proto.communication.InternalChargeCustomQuery,
  proto.communication.InternalChargeEntity,
  /**
   * @param {!proto.communication.InternalChargeCustomQuery} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.communication.InternalChargeEntity.deserializeBinary
);


/**
 * @param {!proto.communication.InternalChargeCustomQuery} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.communication.InternalChargeEntity)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.communication.InternalChargeEntity>|undefined}
 *     The XHR Node Readable Stream
 */
proto.communication.StripeServiceClient.prototype.queryICharge =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/communication.StripeService/QueryICharge',
      request,
      metadata || {},
      methodDescriptor_StripeService_QueryICharge,
      callback);
};


/**
 * @param {!proto.communication.InternalChargeCustomQuery} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.communication.InternalChargeEntity>}
 *     Promise that resolves to the response
 */
proto.communication.StripeServicePromiseClient.prototype.queryICharge =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/communication.StripeService/QueryICharge',
      request,
      metadata || {},
      methodDescriptor_StripeService_QueryICharge);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.communication.InternalChargeUpdateStateRequest,
 *   !proto.communication.InternalChargeEntity>}
 */
const methodDescriptor_StripeService_UpdateState = new grpc.web.MethodDescriptor(
  '/communication.StripeService/UpdateState',
  grpc.web.MethodType.UNARY,
  proto.communication.InternalChargeUpdateStateRequest,
  proto.communication.InternalChargeEntity,
  /**
   * @param {!proto.communication.InternalChargeUpdateStateRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.communication.InternalChargeEntity.deserializeBinary
);


/**
 * @param {!proto.communication.InternalChargeUpdateStateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.communication.InternalChargeEntity)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.communication.InternalChargeEntity>|undefined}
 *     The XHR Node Readable Stream
 */
proto.communication.StripeServiceClient.prototype.updateState =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/communication.StripeService/UpdateState',
      request,
      metadata || {},
      methodDescriptor_StripeService_UpdateState,
      callback);
};


/**
 * @param {!proto.communication.InternalChargeUpdateStateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.communication.InternalChargeEntity>}
 *     Promise that resolves to the response
 */
proto.communication.StripeServicePromiseClient.prototype.updateState =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/communication.StripeService/UpdateState',
      request,
      metadata || {},
      methodDescriptor_StripeService_UpdateState);
};


module.exports = proto.communication;

