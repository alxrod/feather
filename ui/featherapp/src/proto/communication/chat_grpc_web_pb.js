/**
 * @fileoverview gRPC-Web generated client stub for main
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.3.1
// 	protoc              v3.19.4
// source: communication/chat.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js')

var communication_contract_pb = require('../communication/contract_pb.js')
const proto = {};
proto.main = require('./chat_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.main.ChatClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname;

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.main.ChatPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname;

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.main.ChatPullRequest,
 *   !proto.main.ChatMessageSet>}
 */
const methodDescriptor_Chat_PullChatHistory = new grpc.web.MethodDescriptor(
  '/main.Chat/PullChatHistory',
  grpc.web.MethodType.UNARY,
  proto.main.ChatPullRequest,
  proto.main.ChatMessageSet,
  /**
   * @param {!proto.main.ChatPullRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.main.ChatMessageSet.deserializeBinary
);


/**
 * @param {!proto.main.ChatPullRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.main.ChatMessageSet)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.main.ChatMessageSet>|undefined}
 *     The XHR Node Readable Stream
 */
proto.main.ChatClient.prototype.pullChatHistory =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/main.Chat/PullChatHistory',
      request,
      metadata || {},
      methodDescriptor_Chat_PullChatHistory,
      callback);
};


/**
 * @param {!proto.main.ChatPullRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.main.ChatMessageSet>}
 *     Promise that resolves to the response
 */
proto.main.ChatPromiseClient.prototype.pullChatHistory =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/main.Chat/PullChatHistory',
      request,
      metadata || {},
      methodDescriptor_Chat_PullChatHistory);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.main.UserJoin,
 *   !proto.main.ChatMessage>}
 */
const methodDescriptor_Chat_JoinChat = new grpc.web.MethodDescriptor(
  '/main.Chat/JoinChat',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.main.UserJoin,
  proto.main.ChatMessage,
  /**
   * @param {!proto.main.UserJoin} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.main.ChatMessage.deserializeBinary
);


/**
 * @param {!proto.main.UserJoin} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.main.ChatMessage>}
 *     The XHR Node Readable Stream
 */
proto.main.ChatClient.prototype.joinChat =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/main.Chat/JoinChat',
      request,
      metadata || {},
      methodDescriptor_Chat_JoinChat);
};


/**
 * @param {!proto.main.UserJoin} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.main.ChatMessage>}
 *     The XHR Node Readable Stream
 */
proto.main.ChatPromiseClient.prototype.joinChat =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/main.Chat/JoinChat',
      request,
      metadata || {},
      methodDescriptor_Chat_JoinChat);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.main.UserLeave,
 *   !proto.main.UserClose>}
 */
const methodDescriptor_Chat_LeaveChat = new grpc.web.MethodDescriptor(
  '/main.Chat/LeaveChat',
  grpc.web.MethodType.UNARY,
  proto.main.UserLeave,
  proto.main.UserClose,
  /**
   * @param {!proto.main.UserLeave} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.main.UserClose.deserializeBinary
);


/**
 * @param {!proto.main.UserLeave} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.main.UserClose)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.main.UserClose>|undefined}
 *     The XHR Node Readable Stream
 */
proto.main.ChatClient.prototype.leaveChat =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/main.Chat/LeaveChat',
      request,
      metadata || {},
      methodDescriptor_Chat_LeaveChat,
      callback);
};


/**
 * @param {!proto.main.UserLeave} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.main.UserClose>}
 *     Promise that resolves to the response
 */
proto.main.ChatPromiseClient.prototype.leaveChat =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/main.Chat/LeaveChat',
      request,
      metadata || {},
      methodDescriptor_Chat_LeaveChat);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.main.SendRequest,
 *   !proto.main.SendResponse>}
 */
const methodDescriptor_Chat_SendCommentMessage = new grpc.web.MethodDescriptor(
  '/main.Chat/SendCommentMessage',
  grpc.web.MethodType.UNARY,
  proto.main.SendRequest,
  proto.main.SendResponse,
  /**
   * @param {!proto.main.SendRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.main.SendResponse.deserializeBinary
);


/**
 * @param {!proto.main.SendRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.main.SendResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.main.SendResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.main.ChatClient.prototype.sendCommentMessage =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/main.Chat/SendCommentMessage',
      request,
      metadata || {},
      methodDescriptor_Chat_SendCommentMessage,
      callback);
};


/**
 * @param {!proto.main.SendRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.main.SendResponse>}
 *     Promise that resolves to the response
 */
proto.main.ChatPromiseClient.prototype.sendCommentMessage =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/main.Chat/SendCommentMessage',
      request,
      metadata || {},
      methodDescriptor_Chat_SendCommentMessage);
};


module.exports = proto.main;

